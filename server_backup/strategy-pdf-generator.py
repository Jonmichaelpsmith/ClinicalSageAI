from fpdf import FPDF
import time
import os
import json
import re

def clean_text_for_pdf(text):
    """
    Clean text to be compatible with PDF generation by removing problematic Unicode characters
    """
    # Replace common Unicode characters with ASCII alternatives
    replacements = {
        '‚â•': '>=',
        '‚â§': '<=',
        '‚â†': '!=',
        '‚âà': '~=',
        '‚Üí': '->',
        '‚Üê': '<-',
        '‚Üë': '^',
        '‚Üì': 'v',
        '‚Ä¢': '-',
        '‚úì': 'Y',
        '‚úÖ': 'Y',
        '‚ö†Ô∏è': '!',
        '‚ùå': 'X',
        '‚≠ê': '*',
        'üß™': '',
        'üîç': '',
        'üî¨': '',
        'üìä': '',
        'üìà': '',
        'üìâ': '',
        'üìã': '',
        'üìù': '',
        'üìÑ': '',
        'üìë': '',
        'üìå': '',
        'üìç': '',
        'üéØ': '',
        '‚öôÔ∏è': '',
        'üß†': '',
        'üí°': '',
        '‚öïÔ∏è': '',
        'üî¨': '',
        'üß´': '',
        'üß¨': '',
        'ü©∫': '',
        'üíä': '',
        'üíâ': ''
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    # Remove any remaining non-Latin1 characters
    text = re.sub(r'[^\x00-\xFF]', '', text)
    
    return text

def generate_strategic_report_pdf(title, protocol_summary, strategy_summary, recommendations):
    """
    Generate a PDF report for strategic analysis
    
    Args:
        title (str): Report title
        protocol_summary (str): Protocol summary text
        strategy_summary (str): Strategic analysis text
        recommendations (list): List of recommendations
        
    Returns:
        str: Path to the generated PDF file
    """
    # Clean inputs to avoid Unicode issues
    title = clean_text_for_pdf(title)
    protocol_summary = clean_text_for_pdf(protocol_summary)
    strategy_summary = clean_text_for_pdf(strategy_summary)
    recommendations = [clean_text_for_pdf(rec) for rec in recommendations]
    
    # Create PDF
    pdf = FPDF()
    pdf.add_page()
    
    # Add title and header
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "TrialSage Strategic Summary", ln=True, align="C")
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, title, ln=True)
    pdf.ln(5)
    
    # Add timestamp
    current_time = time.strftime("%Y-%m-%d %H:%M:%S")
    pdf.set_font("Arial", "I", 10)
    pdf.cell(0, 10, f"Generated on: {current_time}", ln=True)
    pdf.ln(5)

    # Protocol summary section
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Protocol Summary", ln=True)
    pdf.set_font("Arial", "", 11)
    pdf.multi_cell(0, 8, protocol_summary)
    pdf.ln()

    # Strategic analysis section
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Strategic Analysis", ln=True)
    pdf.set_font("Arial", "", 11)
    pdf.multi_cell(0, 8, strategy_summary)
    pdf.ln()

    # Recommendations section
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "AI-Powered Recommendations", ln=True)
    pdf.set_font("Arial", "", 11)
    for rec in recommendations:
        pdf.multi_cell(0, 8, f"- {rec}")
    
    # Add footer with source citations
    pdf.ln(10)
    pdf.set_font("Arial", "I", 9)
    pdf.cell(0, 10, "Analysis based on Health Canada CSRs and ClinicalTrials.gov data", ln=True)
    pdf.cell(0, 10, "Generated by TrialSage Strategic Intelligence Engine", ln=True)
    
    # Create directory if it doesn't exist
    os.makedirs("data/reports", exist_ok=True)
    
    # Save PDF
    filename = f"data/reports/Strategic_Report_{int(time.time())}.pdf"
    pdf.output(filename)
    
    return filename

def extract_recommendations(analysis_text):
    """Extract recommendations from analysis text"""
    recommendations = []
    
    # Simple extraction based on common patterns
    lines = analysis_text.split('\n')
    for line in lines:
        line = line.strip()
        if line.startswith("- ") or line.startswith("‚Ä¢ "):
            recommendations.append(line[2:])
        elif line.startswith("* "):
            recommendations.append(line[2:])
            
    # If no recommendations found, use default fallback
    if not recommendations:
        recommendations = [
            "Align endpoints with regulatory precedents",
            "Consider standard treatment duration for this indication",
            "Evaluate sample size based on similar successful trials"
        ]
        
    return recommendations

def save_strategy_to_dossier(protocol_id, strategy_text):
    """Save strategy analysis to a dossier file"""
    # Create directory if it doesn't exist
    os.makedirs("data/dossiers", exist_ok=True)
    
    # Format the data
    data = {
        "protocol_id": protocol_id,
        "strategy_text": strategy_text,
        "timestamp": time.time(),
        "date": time.strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # Save to file
    path = f"data/dossiers/{protocol_id}_strategy.json"
    with open(path, "w") as f:
        json.dump(data, f, indent=2)
    
    return path