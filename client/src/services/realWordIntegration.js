/**
 * Microsoft Word Integration Service
 * 
 * This service provides direct integration with Microsoft Word Online/Office 365
 * using the Office JS API. It allows for embedding and manipulating Word documents
 * within the ClinicalSageAI platform.
 */

// Constants for Microsoft Office endpoints
const OFFICE_ONLINE_BASE_URL = 'https://office-online.com';
const WOPI_FRAME_URL = 'https://view.officeapps.live.com/op/view.aspx';

/**
 * Initialize Office.js API when available
 * @returns {Promise<boolean>} Whether initialization succeeded
 */
export const initializeOfficeApi = () => {
  return new Promise((resolve, reject) => {
    try {
      // Check if Office.js is available in the current context
      if (window.Office) {
        // If we're running inside an Office Add-in
        Office.onReady((info) => {
          if (info.host === Office.HostType.Word) {
            console.log('Office.js initialized for Word');
            resolve(true);
          } else {
            console.warn(`Office.js initialized for ${info.host}, but Word is required`);
            resolve(false);
          }
        });
      } else {
        // We're in a regular web context - need to use Office Online embedding
        console.log('Office.js not available - will use Office Online embedding');
        resolve(false);
      }
    } catch (error) {
      console.error('Failed to initialize Office.js:', error);
      reject(error);
    }
  });
};

/**
 * Generate a WOPI iframe URL for embedding Word Online
 * @param {string} documentUrl SharePoint/OneDrive document URL
 * @param {boolean} editMode Whether to open in edit mode
 * @returns {string} The WOPI iframe URL
 */
export const getWordOnlineEmbedUrl = (documentUrl, editMode = true) => {
  // Note: In a real implementation, this URL would be generated by a server-side API
  // that handles the proper WOPI token generation and security
  const action = editMode ? 'edit' : 'view';
  
  // For security, in production we would get this from the server with proper authentication
  const wopiSrc = encodeURIComponent(documentUrl);
  
  return `${WOPI_FRAME_URL}?WOPISrc=${wopiSrc}&action=${action}`;
};

/**
 * Generates a Microsoft 365 sharing link for embedding Word Online
 * @param {string} sharePointDocumentUrl The SharePoint document URL
 * @returns {string} URL for embedding Word Online
 */
export const getMicrosoftWordOnlineUrl = (sharePointDocumentUrl) => {
  // In production, this would leverage Microsoft Graph API to generate a proper embedUrl
  // For now, we'll use a simple transformation
  if (sharePointDocumentUrl.includes('sharepoint.com')) {
    // Extract document ID from SharePoint URL
    const urlParts = sharePointDocumentUrl.split('/');
    const documentId = urlParts[urlParts.length - 1];
    
    // Generate an embed URL in the format Microsoft Word Online expects
    return `https://office.live.com/m/WEFnmc2FY/edit.aspx?resid=${documentId}`;
  }
  
  // Fallback to direct embedding using query parameters
  return `https://word-edit.officeapps.live.com/we/wordeditorframe.aspx?ui=en-US&rs=en-US&WOPISrc=${encodeURIComponent(sharePointDocumentUrl)}`;
};

/**
 * Open a document in Word Online inside an iframe
 * @param {Object} options Configuration options
 * @param {string} options.documentUrl SharePoint/OneDrive document URL
 * @param {string} options.containerId HTML element ID to embed the iframe
 * @param {boolean} options.editMode Whether to open in edit mode
 * @returns {Promise<Object>} Session info
 */
export const embedWordOnline = async ({ documentUrl, containerId, editMode = true }) => {
  try {
    const container = document.getElementById(containerId);
    if (!container) {
      throw new Error(`Container element with ID ${containerId} not found`);
    }
    
    // Clear existing content
    container.innerHTML = '';
    
    // Create iframe for Word Online
    const iframe = document.createElement('iframe');
    iframe.src = getWordOnlineEmbedUrl(documentUrl, editMode);
    iframe.style.width = '100%';
    iframe.style.height = '100%';
    iframe.style.border = 'none';
    
    // Add iframe to container
    container.appendChild(iframe);
    
    // Return session info
    return {
      sessionId: `word-session-${Date.now()}`,
      documentUrl,
      iframe,
      editMode
    };
  } catch (error) {
    console.error('Error embedding Word Online:', error);
    throw error;
  }
};

/**
 * Create a new Word document in SharePoint/OneDrive
 * This would typically be handled through Microsoft Graph API
 * @param {Object} options Configuration options
 * @param {string} options.title Document title
 * @param {string} options.folderPath SharePoint/OneDrive folder path
 * @param {string} options.template Template ID (optional)
 * @returns {Promise<Object>} Document info
 */
export const createWordDocument = async ({ title, folderPath, template }) => {
  try {
    console.log(`Creating Word document: ${title} in ${folderPath}`);
    
    // This would make a real Graph API call in production
    // For now, simulate the response with a mock document URL
    const documentId = `doc-${Date.now()}`;
    const documentUrl = `https://tenant.sharepoint.com/sites/ClinicalSageAI/Shared%20Documents/${folderPath}/${encodeURIComponent(title)}.docx`;
    
    return {
      id: documentId,
      title,
      url: documentUrl,
      webUrl: documentUrl,
      createdAt: new Date().toISOString()
    };
  } catch (error) {
    console.error('Error creating Word document:', error);
    throw error;
  }
};

/**
 * Open a document directly in Microsoft Word desktop app via protocol handler
 * @param {string} documentUrl SharePoint/OneDrive document URL
 * @returns {boolean} Whether the launch was initiated
 */
export const launchWordDesktop = (documentUrl) => {
  try {
    // Launch using ms-word protocol handler
    // This will only work if the user has Microsoft Word installed
    window.location.href = `ms-word:ofe|u|${documentUrl}`;
    return true;
  } catch (error) {
    console.error('Error launching Word desktop:', error);
    return false;
  }
};

/**
 * Insert text at current selection in Word document (Office Add-in mode)
 * @param {string} text Text to insert
 * @returns {Promise<boolean>} Whether the insertion succeeded
 */
export const insertTextAtSelection = async (text) => {
  try {
    if (!window.Word) {
      console.error('Word API not available');
      return false;
    }
    
    await Word.run(async (context) => {
      // Get the current selection
      const range = context.document.getSelection();
      
      // Insert text at the selection
      range.insertText(text, Word.InsertLocation.replace);
      
      // Sync changes back to the document
      await context.sync();
    });
    
    return true;
  } catch (error) {
    console.error('Error inserting text in Word:', error);
    return false;
  }
};

/**
 * Apply a template to the current Word document (Office Add-in mode)
 * @param {string} templateId Template ID
 * @returns {Promise<boolean>} Whether the template was applied
 */
export const applyTemplate = async (templateId) => {
  try {
    if (!window.Word) {
      console.error('Word API not available');
      return false;
    }
    
    await Word.run(async (context) => {
      // In a real implementation, this would:
      // 1. Fetch the template content from a template library
      // 2. Apply the template to the document
      // 3. Update styles, headers, footers, etc.
      
      // For now, just add a placeholder
      const range = context.document.body.getRange(Word.RangeLocation.start);
      range.insertText(`[Template applied: ${templateId}]\n\n`, Word.InsertLocation.start);
      
      await context.sync();
    });
    
    return true;
  } catch (error) {
    console.error('Error applying template:', error);
    return false;
  }
};

/**
 * Insert regulatory section into Word document based on eCTD requirements
 * @param {string} sectionId Regulatory section ID (e.g., '2.5', '3.2.P.1')
 * @param {string} sectionTitle Section title
 * @returns {Promise<boolean>} Whether the section was inserted
 */
export const insertRegulatorySection = async (sectionId, sectionTitle) => {
  try {
    if (!window.Word) {
      console.error('Word API not available');
      return false;
    }
    
    await Word.run(async (context) => {
      // Get the current selection as insertion point
      const range = context.document.getSelection();
      
      // Create section header with standard eCTD formatting
      const sectionText = `
        ${sectionId} ${sectionTitle}
        
        [Insert ${sectionTitle} content here]
        
      `;
      
      // Insert the section
      range.insertText(sectionText, Word.InsertLocation.replace);
      
      // Apply proper eCTD formatting (in a real implementation)
      // This would set the correct heading style, spacing, etc.
      
      await context.sync();
    });
    
    return true;
  } catch (error) {
    console.error('Error inserting regulatory section:', error);
    return false;
  }
};

/**
 * Run regulatory compliance check on the current document
 * This would integrate with the AI compliance service in production
 * @returns {Promise<Object>} Compliance check results
 */
export const runComplianceCheck = async () => {
  try {
    if (!window.Word) {
      console.error('Word API not available for direct content access');
      return {
        success: false,
        message: 'Word API not available'
      };
    }
    
    // Extract document text for compliance checking
    let documentText = '';
    
    await Word.run(async (context) => {
      // Get the whole document body
      const body = context.document.body;
      body.load('text');
      await context.sync();
      
      documentText = body.text;
    });
    
    // In production, this would call your AI compliance service
    // with the document text or sections
    
    // Simulate a compliance check response
    return {
      success: true,
      score: 85,
      issues: [
        {
          section: 'Missing Information',
          description: 'Some eCTD required sections appear to be missing',
          severity: 'high'
        },
        {
          section: 'Formatting',
          description: 'Heading styles do not conform to eCTD guidelines',
          severity: 'medium'
        }
      ],
      recommendations: [
        'Add missing section 2.5.1 Overview of Clinical Pharmacology',
        'Apply proper heading styles to all section titles'
      ]
    };
  } catch (error) {
    console.error('Error running compliance check:', error);
    return {
      success: false,
      message: error.message
    };
  }
};

// Export a default API for importing
export default {
  initializeOfficeApi,
  getWordOnlineEmbedUrl,
  getMicrosoftWordOnlineUrl,
  embedWordOnline,
  createWordDocument,
  launchWordDesktop,
  insertTextAtSelection,
  applyTemplate,
  insertRegulatorySection,
  runComplianceCheck
};