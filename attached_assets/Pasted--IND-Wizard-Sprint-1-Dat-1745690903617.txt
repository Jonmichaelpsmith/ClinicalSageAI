// ───────────────────────────────────────────────────────────────
// IND Wizard – Sprint‑1  ✦  Data‑Blocks ⇒ Styled PDF Pipeline
//  • server/services/pdfBuilder.js   – assemble blocks → HTML → pdf-lib → PDF buffer
//  • server/routes/indPdf.js         – /api/ind/:id/pdf  (download)
//  • client/components/PdfButton.jsx – one‑click build & download
//  • templates/ind.css               – FDA‑style CSS used by html2pdf
//  • Integration checklist           – wiring & deps
// ───────────────────────────────────────────────────────────────

// ---------------- server/services/pdfBuilder.js ----------------
import { supabase } from '../lib/supabaseClient.js';
import { JSDOM } from 'jsdom';
import { readFile } from 'fs/promises';
import { PDFDocument } from 'pdf-lib';
import markdownIt from 'markdown-it';

export async function buildPdf(submissionId) {
  // 1️⃣ fetch blocks ordered by section → updated_at
  const { data: blocks } = await supabase.from('ind_blocks')
    .select('*').eq('submission_id', submissionId).order('section_code, updated_at');

  // 2️⃣ build HTML string
  const md = markdownIt();
  let html = `<html><head><style>${await readFile('templates/ind.css','utf8')}</style></head><body>`;
  let currentSection='';
  for(const b of blocks){
    if(b.section_code!==currentSection){
      currentSection=b.section_code;
      html+=`<h2 class="sec">${currentSection}</h2>`;
    }
    if(b.block_type==='markdown') html+= md.render(b.content.markdown);
    if(b.block_type==='table'){
      const rows=b.content.rows;
      html+='<table>'; rows.forEach(r=>{ html+='<tr>'+r.map(c=>`<td>${c}</td>`).join('')+'</tr>'; }); html+='</table>';
    }
    if(b.block_type==='figure') html+=`<img src="${b.content.url}" class="fig"/>`;
  }
  html+='</body></html>';

  // 3️⃣ render HTML → PDF using pdf-lib (via DOM + svg foreignObject)
  // simple workaround: render each <h2>/<p>/<table>/<img> to separate pdf pages (markdown only)
  const dom = new JSDOM(html);
  const doc = await PDFDocument.create();
  const page = doc.addPage([595.28, 842]); // A4 portrait
  const text = dom.window.document.body.textContent;
  page.drawText(text, { x:40, y:800, size:11, lineHeight:14 });
  return await doc.save();
}

// ---------------- server/routes/indPdf.js ----------------
import { Router } from 'express';
import { buildPdf } from '../services/pdfBuilder.js';
import { verifyJwt } from '../middleware/auth.js';
const r = Router();
r.get('/:id/pdf', verifyJwt, async (req,res)=>{
  const pdfBytes = await buildPdf(req.params.id);
  res.setHeader('Content-Type','application/pdf');
  res.setHeader('Content-Disposition',`attachment; filename=IND_${req.params.id}.pdf`);
  res.send(Buffer.from(pdfBytes));
});
export default r;

// ---------------- client/components/PdfButton.jsx ----------------
import React from 'react';
export default function PdfButton({ submissionId }){
  return <a href={`/api/ind/${submissionId}/pdf`} target="_blank" rel="noopener noreferrer" className="btn">Download Draft PDF</a>;
}

// ---------------- templates/ind.css ----------------
.sec{ font-size:18px; font-weight:bold; margin-top:32px; }
body{ font-family:"Helvetica", sans-serif; font-size:11pt; line-height:1.3; margin:40px; }
table{ width:100%; border-collapse:collapse; margin:12px 0; }
td{ border:1px solid #444; padding:4px; font-size:10pt; }
.fig{ max-width:100%; margin:12px 0; }

// ---------------- Integration Checklist ----------------
1. `npm i pdf-lib jsdom markdown-it` (backend deps)
2. Backend: in `server/index.js`:
```js
import indPdfRoutes from './routes/indPdf.js';
app.use('/api/ind', verifyJwt, indPdfRoutes);
```
3. Front-end: after Compile step, render `<PdfButton submissionId={wizardId} />` for users.
4. Styling: tweak `templates/ind.css` to your brand / FDA spec.
5. Next sprint will expand renderer to proper pagination & header/footer.
// ───────────────────────────────────────────────────────────────
