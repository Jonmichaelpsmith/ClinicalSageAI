// =====================================================
// TrialSage Vault™ – Sprint‑3  ✦  Versioning + AI Auto‑Tagging
//  • Track every upload as a version
//  • AI (OpenAI) generates summary + keyword tags on upload
//  • Version list & restore in UI
// =====================================================

/* ---------- migrations/003_versioning.sql ---------- */
CREATE TABLE document_versions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  document_id UUID REFERENCES documents(id) ON DELETE CASCADE,
  version_number INT NOT NULL,
  storage_path TEXT NOT NULL,
  mime_type TEXT NOT NULL,
  file_size BIGINT,
  summary TEXT,
  tags JSONB,
  uploaded_by UUID REFERENCES users(id),
  uploaded_at TIMESTAMPTZ DEFAULT now()
);
ALTER TABLE documents ADD COLUMN latest_version INT DEFAULT 1;
ALTER TABLE documents ADD COLUMN summary TEXT;
ALTER TABLE documents ADD COLUMN tags JSONB;

/* ---------- src/routes/documents.js  (additions) ---------- */
import OpenAI from 'openai';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function generateAI(meta) {
  try {
    const prompt = `You are a regulatory medical writer. Provide a 3‑sentence summary and 5 keyword tags for a file named "${meta.filename}" which has MIME type ${meta.mime}. Guess from the filename if necessary.`;
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 200
    });
    const txt = completion.choices[0].message.content;
    const [summaryLine, ...rest] = txt.split('\n');
    const summary = summaryLine.trim();
    const tags = rest.join(' ').match(/#[A-Za-z0-9_]+/g) || [];
    return { summary, tags };
  } catch (_) { return { summary: null, tags: [] }; }
}

// --- replace previous POST upload handler ---
r.post('/studies/:studyId/documents', requireAuth, upload.single('file'), async (req, res) => {
  const { studyId } = req.params;
  const file = req.file;
  if (!file) return res.status(400).json({ message: 'No file' });
  const keyBase = `${studyId}/${Date.now()}_${file.originalname}`;
  const { error: upErr } = await supabaseSrv.storage.from('vault-files').upload(keyBase, file.buffer, { contentType: file.mimetype, upsert: false });
  if (upErr) return res.status(500).json({ message: 'Upload failed', error: upErr.message });

  // check if doc exists (by filename within study)
  let doc = await db('documents').where({ filename: file.originalname, study_id: studyId, organization_id: req.user.orgId }).first();
  let versionNumber = 1;
  if (!doc) {
    // create new doc row
    [doc] = await db('documents').insert({
      study_id: studyId,
      organization_id: req.user.orgId,
      filename: file.originalname,
      mime_type: file.mimetype,
      file_size: file.size,
      storage_path: keyBase,
      uploaded_by: req.user.id,
      latest_version: 1
    }).returning('*');
  } else {
    versionNumber = doc.latest_version + 1;
    await db('documents').where({ id: doc.id }).update({ latest_version: versionNumber, file_size: file.size, mime_type: file.mimetype, storage_path: keyBase, uploaded_at: db.fn.now() });
  }

  // AI summary + tags
  const ai = await generateAI({ filename: file.originalname, mime: file.mimetype });
  if (ai.summary) {
    await db('documents').where({ id: doc.id }).update({ summary: ai.summary, tags: ai.tags });
  }
  await db('document_versions').insert({
    document_id: doc.id,
    version_number: versionNumber,
    storage_path: keyBase,
    mime_type: file.mimetype,
    file_size: file.size,
    summary: ai.summary,
    tags: ai.tags,
    uploaded_by: req.user.id
  });
  res.status(201).json({ ...doc, latest_version: versionNumber, summary: ai.summary, tags: ai.tags });
});

// GET versions list
r.get('/documents/:docId/versions', requireAuth, async (req,res)=>{
  const rows = await db('document_versions as v')
    .join('documents as d','d.id','v.document_id')
    .where({'v.document_id': req.params.docId, 'd.organization_id': req.user.orgId})
    .orderBy('version_number','desc')
    .select('v.id','v.version_number','v.uploaded_at','v.file_size','v.summary');
  res.json(rows);
});

// ================================= FRONTEND =================================
/* ---------- extend VaultView.tsx ---------- */
import { Panel, PanelHeader, PanelBody } from '@fluentui/react-components';
...
const [versions,setVersions] = useState<any[]>([]);
const [panelOpen,setPanelOpen] = useState(false);
const openVersions = async (docId:string)=>{
  const r = await fetch(`${import.meta.env.VITE_API_URL}/api/documents/${docId}/versions`,{ headers:{ Authorization:`Bearer ${token}` }});
  if(r.ok){ setVersions(await r.json()); setPanelOpen(true); }
};
...
cols.push({ key:'ver', name:'Version', onRender:(i)=><Button size="small" onClick={()=>openVersions(i.id)}>{i.latest_version}</Button>, minWidth:80 });
...
{/* Versions side panel */}
<Panel open={panelOpen} onOpenChange={(_,v)=>setPanelOpen(v.open)}>
  <PanelHeader>Versions</PanelHeader>
  <PanelBody>
    {versions.map(v=>(
      <div key={v.id} style={{padding:8,borderBottom:'1px solid #eee'}}>
        v{v.version_number} – {(v.file_size/1024).toFixed(1)} KB – {new Date(v.uploaded_at).toLocaleString()}
        <p style={{fontSize:12,margin:4}}>{v.summary}</p>
      </div>
    ))}
  </PanelBody>
</Panel>

// =====================================================
// END Sprint‑3
