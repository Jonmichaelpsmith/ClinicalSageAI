// src/components/ind-wizard/steps/components/MilestoneTracker.tsx
import React, { useState, useMemo, useEffect } from 'react';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
  Row,
} from '@tanstack/react-table';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useForm } from 'react-hook-form';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose, // Import DialogClose
} from '@/components/ui/dialog';
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
  ContextMenuSeparator,
} from '@/components/ui/context-menu';
import { toast } from '@/components/ui/use-toast'; // Assuming you use shadcn toast
import { Bot, CalendarIcon, Edit, Trash2, CheckCircle, HelpCircle } from 'lucide-react';
import { cn } from "@/lib/utils";
import { format } from "date-fns";

// --- Data Schema and Validation ---

// Define the structure of a single milestone
export const milestoneSchema = z.object({
  id: z.string().uuid().or(z.string().min(1)), // Allow UUID or temporary string ID
  title: z.string().min(3, 'Title must be at least 3 characters'),
  dueDate: z.date().optional(),
  status: z.enum(['Pending', 'InProgress', 'Completed', 'Blocked']),
  description: z.string().optional(),
});

export type Milestone = z.infer<typeof milestoneSchema>;

// --- Component Props ---

interface MilestoneTrackerProps {
  initialMilestones: Milestone[];
  onMilestonesChange: (milestones: Milestone[]) => void; // Callback to update parent state
  // Function to trigger AI help from parent context
  triggerAiAssistance: (context: string, milestone?: Milestone) => void;
}

// --- Milestone Editor Form Component (for Dialog) ---

interface MilestoneEditorFormProps {
  milestone: Partial<Milestone>; // Can be partial for new milestones
  onSave: (data: Milestone) => void;
  onCancel: () => void;
}

function MilestoneEditorForm({ milestone, onSave, onCancel }: MilestoneEditorFormProps) {
  const form = useForm<Milestone>({
    resolver: zodResolver(milestoneSchema),
    defaultValues: {
      id: milestone.id || crypto.randomUUID(), // Generate ID if new
      title: milestone.title || '',
      dueDate: milestone.dueDate || undefined,
      status: milestone.status || 'Pending',
      description: milestone.description || '',
    },
  });

  const onSubmit = (data: Milestone) => {
    onSave(data);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Milestone Title</FormLabel>
              <FormControl><Input placeholder="e.g., Finalize Pre-IND Meeting Request" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="dueDate"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Due Date</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button variant="outline" className={cn("w-[240px] pl-3 text-left font-normal", !field.value && "text-muted-foreground")}>
                      {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar mode="single" selected={field.value} onSelect={field.onChange} initialFocus />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="status"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Status</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="Pending">Pending</SelectItem>
                  <SelectItem value="InProgress">In Progress</SelectItem>
                  <SelectItem value="Completed">Completed</SelectItem>
                  <SelectItem value="Blocked">Blocked</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
         <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl><Textarea placeholder="Add details or notes..." {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <DialogFooter>
          <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
          <Button type="submit">Save Milestone</Button>
        </DialogFooter>
      </form>
    </Form>
  );
}


// --- Main Milestone Tracker Component ---

export function MilestoneTracker({
  initialMilestones,
  onMilestonesChange,
  triggerAiAssistance,
}: MilestoneTrackerProps) {
  const [milestones, setMilestones] = useState<Milestone[]>(initialMilestones);
  const [sorting, setSorting] = useState<SortingState>([]);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingMilestone, setEditingMilestone] = useState<Partial<Milestone> | null>(null);

  // Update parent state whenever local milestones change
  useEffect(() => {
    onMilestonesChange(milestones);
  }, [milestones, onMilestonesChange]);

  // --- Actions ---

  const addMilestone = () => {
    setEditingMilestone({}); // Open editor with empty object for new milestone
    setIsEditDialogOpen(true);
  };

  const editMilestone = (milestone: Milestone) => {
    setEditingMilestone(milestone);
    setIsEditDialogOpen(true);
  };

  const deleteMilestone = (id: string) => {
    if (window.confirm('Are you sure you want to delete this milestone?')) {
      setMilestones(prev => prev.filter(m => m.id !== id));
      toast({ title: "Milestone Deleted", description: "The milestone has been removed." });
    }
  };

  const markComplete = (id: string) => {
      setMilestones(prev => prev.map(m => m.id === id ? { ...m, status: 'Completed' } : m));
      toast({ title: "Milestone Completed", description: "Status updated." });
  };

  const handleSaveMilestone = (data: Milestone) => {
      setMilestones(prev => {
          const exists = prev.some(m => m.id === data.id);
          if (exists) {
              return prev.map(m => m.id === data.id ? data : m); // Update existing
          } else {
              return [...prev, data]; // Add new
          }
      });
      setIsEditDialogOpen(false);
      setEditingMilestone(null);
      toast({ title: "Milestone Saved", description: "Your changes have been saved." });
  };

  const handleAiSuggestSubtasks = (milestone: Milestone) => {
      triggerAiAssistance(`Suggest sub-tasks or next steps for the milestone: "${milestone.title}" (Due: ${milestone.dueDate ? format(milestone.dueDate, "PPP") : 'N/A'}, Status: ${milestone.status})`, milestone);
  };

  const handleAiCheckTimeline = (milestone: Milestone) => {
       triggerAiAssistance(`Analyze potential risks or timeline issues for the milestone: "${milestone.title}" based on its due date (${milestone.dueDate ? format(milestone.dueDate, "PPP") : 'N/A'}) and current status (${milestone.status}). Consider typical IND timelines.`, milestone);
  };


  // --- Table Definition ---

  const columns = useMemo<ColumnDef<Milestone>[]>(
    () => [
      {
        accessorKey: 'title',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Title</Button>,
        cell: ({ row }) => <span className="font-medium">{row.original.title}</span>, // Add inline edit capability here later if needed
      },
      {
        accessorKey: 'dueDate',
        header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Due Date</Button>,
        cell: ({ row }) => row.original.dueDate ? format(row.original.dueDate, 'PPP') : <span className="text-gray-500">Not set</span>,
      },
      {
        accessorKey: 'status',
         header: ({ column }) => <Button variant="ghost" onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}>Status</Button>,
        cell: ({ row }) => {
          // Add color coding or icons based on status
          const status = row.original.status;
          let color = 'text-gray-600';
          if (status === 'Completed') color = 'text-green-600';
          if (status === 'Blocked') color = 'text-red-600';
          if (status === 'InProgress') color = 'text-blue-600';
          return <span className={cn("font-semibold", color)}>{status}</span>;
        },
      },
      {
        id: 'actions',
        header: 'Actions',
        cell: ({ row }) => (
          // Context Menu is triggered on the row, but actions button provides alternative access
          <Button variant="ghost" size="sm" onClick={() => editMilestone(row.original)}>
            <Edit className="h-4 w-4" />
          </Button>
        ),
      },
    ],
    [] // Dependencies if needed
  );

  const table = useReactTable({
    data: milestones,
    columns,
    state: { sorting },
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
  });

  // --- Render ---

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
            <CardTitle>Milestone Tracker</CardTitle>
            <CardDescription>Define and track key milestones for this IND stage.</CardDescription>
        </div>
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
            <DialogTrigger asChild>
                <Button onClick={addMilestone}>Add Milestone</Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                    <DialogTitle>{editingMilestone?.id ? 'Edit Milestone' : 'Add New Milestone'}</DialogTitle>
                    <DialogDescription>
                        {editingMilestone?.id ? 'Update the details below.' : 'Fill in the details for the new milestone.'}
                    </DialogDescription>
                </DialogHeader>
                {/* Render form only when dialog is open and milestone data is ready */}
                {editingMilestone !== null && (
                    <MilestoneEditorForm
                        milestone={editingMilestone}
                        onSave={handleSaveMilestone}
                        onCancel={() => { setIsEditDialogOpen(false); setEditingMilestone(null); }}
                    />
                )}
            </DialogContent>
        </Dialog>
      </CardHeader>
      <CardContent>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  // Wrap each row with ContextMenuTrigger
                  <ContextMenu key={row.id}>
                    <ContextMenuTrigger asChild>
                      <TableRow data-state={row.getIsSelected() && 'selected'}>
                        {row.getVisibleCells().map((cell) => (
                          <TableCell key={cell.id}>
                            {flexRender(
                              cell.column.columnDef.cell,
                              cell.getContext()
                            )}
                          </TableCell>
                        ))}
                      </TableRow>
                    </ContextMenuTrigger>
                    <ContextMenuContent className="w-64">
                      <ContextMenuItem inset onClick={() => editMilestone(row.original)}>
                        <Edit className="mr-2 h-4 w-4" />
                        Edit Details...
                      </ContextMenuItem>
                      <ContextMenuItem inset onClick={() => markComplete(row.original.id)} disabled={row.original.status === 'Completed'}>
                         <CheckCircle className="mr-2 h-4 w-4" />
                        Mark as Completed
                      </ContextMenuItem>
                       <ContextMenuItem inset onClick={() => deleteMilestone(row.original.id)}>
                         <Trash2 className="mr-2 h-4 w-4 text-red-500" />
                         <span className="text-red-500">Delete Milestone</span>
                      </ContextMenuItem>
                      <ContextMenuSeparator />
                      <ContextMenuItem inset onClick={() => handleAiSuggestSubtasks(row.original)}>
                         <Bot className="mr-2 h-4 w-4" />
                        AI: Suggest Sub-tasks
                      </ContextMenuItem>
                       <ContextMenuItem inset onClick={() => handleAiCheckTimeline(row.original)}>
                         <HelpCircle className="mr-2 h-4 w-4" />
                        AI: Analyze Timeline Risk
                      </ContextMenuItem>
                    </ContextMenuContent>
                  </ContextMenu>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={columns.length} className="h-24 text-center">
                    No milestones added yet.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}

// --- Helper Components (already part of shadcn usually, ensure imports) ---
// You would need to ensure Form, FormField, FormItem, FormLabel, FormControl, FormMessage,
// Select, SelectTrigger, SelectValue, SelectContent, SelectItem, Textarea
// are correctly imported from '@/components/ui/*'
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';

