// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// TrialSage Vaultâ„¢ â€“ eCTD Submission Planner (Backend + Frontâ€‘end)
// ðŸ“‚ server/routes/ectd.js â€“ create & manage eCTD dossiers
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
import { verifyJwt } from '../middleware/auth.js';
import { suggestMissing } from '../services/ai.js';

const router = Router();

// POST /api/ectd â€“ create a new dossier skeleton
router.post('/', verifyJwt, async (req, res) => {
  const { tenantId, id: userId } = req.user;
  const { product, region, dossierType } = req.body; // e.g. NDA, MAA
  const { data, error } = await supabase
    .from('submissions')
    .insert({ tenant_id: tenantId, product, region, dossier_type: dossierType, status: 'Planning', created_by: userId })
    .select('*')
    .single();
  if (error) return res.status(500).json({ message: error.message });
  res.json(data);
});

// GET /api/ectd/:id/outline â€“ returns outline + readiness info
router.get('/:id/outline', verifyJwt, async (req, res) => {
  const { tenantId } = req.user;
  const { id } = req.params;
  const { data: sub, error: subErr } = await supabase
    .from('submissions')
    .select('*')
    .eq('id', id)
    .eq('tenant_id', tenantId)
    .single();
  if (subErr) return res.status(404).json({ message: 'Submission not found' });

  // Example static outline â€“ could be driven by region
  const outline = [
    { section: 'Module 1', name: 'Regional Admin', docs: [] },
    { section: 'Module 2', name: 'Summary', docs: [] },
    { section: 'Module 3', name: 'Quality (CMC)', docs: [] },
    { section: 'Module 4', name: 'Nonâ€‘clinical', docs: [] },
    { section: 'Module 5', name: 'Clinical', docs: [] }
  ];
  // fetch existing docs linked to this submission
  const { data: docs } = await supabase
    .from('documents')
    .select('*')
    .contains('tags', [`submission:${id}`]);
  // map docs to outline
  outline.forEach(o => { o.docs = docs.filter(d => d.tags?.includes(o.section)); });

  // AI suggestion for missing sections
  const missing = outline.filter(o => o.docs.length === 0).map(o => o.section);
  const aiHint = missing.length ? await suggestMissing(missing, sub.region) : null;

  res.json({ outline, missing, aiHint });
});

export default router;

//----------------------------------------------------------------
// ðŸ“‚ client/pages/EctdPlanner.jsx â€“ interactive planner UI
//----------------------------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

export default function EctdPlanner({ submissionId }) {
  const [outline, setOutline] = useState(null);
  const [missing, setMissing] = useState([]);
  const [hint, setHint] = useState('');

  useEffect(() => { load(); }, [submissionId]);
  async function load() {
    const { data } = await axios.get(`/api/ectd/${submissionId}/outline`);
    setOutline(data.outline);
    setMissing(data.missing);
    setHint(data.aiHint);
  }

  if (!outline) return <div className="p-8">Loading eCTD plannerâ€¦</div>;
  return (
    <div className="p-8 space-y-6">
      <h1 className="text-2xl font-bold">eCTD Planner â€“ Submission {submissionId}</h1>
      {outline.map(sec => (
        <Card key={sec.section} className="border shadow-sm">
          <CardContent className="p-4">
            <h2 className="text-xl font-semibold mb-2">{sec.section} â€“ {sec.name}</h2>
            {sec.docs.length ? (
              <ul className="list-disc ml-5 text-sm text-gray-700">
                {sec.docs.map(d => <li key={d.id}>{d.filename}</li>)}
              </ul>
            ) : (
              <p className="text-red-600 text-sm">No documents linked yet.</p>
            )}
            <Button size="xs" className="mt-2" onClick={() => alert('Open uploader preâ€‘tagged for ' + sec.section)}>Upload to {sec.section}</Button>
          </CardContent>
        </Card>
      ))}
      {hint && <div className="p-4 bg-yellow-50 border-l-4 border-yellow-400 text-sm">AI Suggestion: {hint}</div>}
      {missing.length === 0 && <div className="p-4 bg-green-50 text-green-700 text-sm rounded">All sections have at least one document. Ready for QC!</div>}
    </div>
  );
}

//----------------------------------------------------------------
// ðŸ“‚ server/services/ai.js â€“ add helper
//----------------------------------------------------------------
export async function suggestMissing(missingArray, region) {
  const msg = missingArray.join(', ');
  const resp = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      { role: 'system', content: 'You are a regulatory submissions assistant.' },
      { role: 'user', content: `We are preparing an eCTD for region ${region}. Missing modules: ${msg}. Suggest next actions in one sentence.` }
    ],
    max_tokens: 50
  });
  return resp.choices[0].message.content.trim();
}

//----------------------------------------------------------------
// ðŸ”— Integration steps
//----------------------------------------------------------------
// server/index.js â†’ add:
//   import ectdRoutes from './routes/ectd.js';
//   app.use('/api/ectd', ectdRoutes);
// client routing â€“ include <EctdPlanner submissionId={â€¦} /> where needed.
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
