// React Component: CSRSearchDashboard.jsx (with branding, comparison, export, and dossier integration)

import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Select, SelectItem } from '@/components/ui/select';
import CSRCompareViewer from './CSRCompareViewer';
import html2pdf from 'html2pdf.js';

const indications = ['Any', 'Oncology', 'Cardiology', 'Neurology'];
const phases = ['Any', 'Phase 1', 'Phase 2', 'Phase 3'];

export default function CSRSearchDashboard() {
  const [query, setQuery] = useState('');
  const [phase, setPhase] = useState('Any');
  const [indication, setIndication] = useState('Any');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState([]);

  const runSearch = async () => {
    setLoading(true);
    const payload = {
      query,
      filters: {
        phase: phase === 'Any' ? '' : phase,
        indication: indication === 'Any' ? '' : indication,
      },
    };

    const response = await fetch('/api/search/csr', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    const data = await response.json();
    setResults(data.results || []);
    setLoading(false);
  };

  const toggleSelect = (id) => {
    setSelected((prev) =>
      prev.includes(id) ? prev.filter((s) => s !== id) : [...prev, id].slice(0, 3)
    );
  };

  const clearSelection = () => setSelected([]);

  const exportComparison = () => {
    const element = document.getElementById('csr-comparison-section');
    if (element) {
      html2pdf().from(element).set({
        margin: 0.5,
        filename: 'TrialSage_StudyComparison.pdf',
        pagebreak: { mode: ['avoid-all'] },
        jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' },
        html2canvas: { scale: 2 }
      }).save();
    }
  };

  const sendToDossierBuilder = async () => {
    const response = await fetch('/api/dossier/create-from-csrs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csr_ids: selected })
    });
    const data = await response.json();
    if (data?.dossier_id) {
      window.location.href = `/dossier/${data.dossier_id}`;
    } else {
      alert('Failed to create dossier from selected CSRs.');
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      <h2 className="text-2xl font-bold text-blue-800">üß¨ TrialSage Study Intelligence Search</h2>
      <p className="text-sm text-gray-600 pb-4">Search and compare CSR-backed designs. Export directly into your protocol dossier.</p>

      <div className="flex space-x-2">
        <Input placeholder="e.g. Phase 2 study for glioblastoma with ORR endpoint" value={query} onChange={(e) => setQuery(e.target.value)} />
        <Select value={phase} onChange={(e) => setPhase(e.target.value)}>
          {phases.map((p) => <SelectItem key={p} value={p}>{p}</SelectItem>)}
        </Select>
        <Select value={indication} onChange={(e) => setIndication(e.target.value)}>
          {indications.map((i) => <SelectItem key={i} value={i}>{i}</SelectItem>)}
        </Select>
        <Button onClick={runSearch} disabled={loading}>
          {loading ? 'Searching...' : 'Search'}
        </Button>
      </div>

      {selected.length > 0 && (
        <div className="sticky top-0 z-10 bg-white border border-blue-300 p-3 rounded flex justify-between items-center shadow-sm">
          <p className="text-sm font-medium text-blue-700">üîç {selected.length} trial(s) selected for comparison</p>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={clearSelection}>Clear All</Button>
            {selected.length > 1 && (
              <>
                <Button size="sm" className="bg-blue-600 text-white hover:bg-blue-700" onClick={exportComparison}>üì§ Export as PDF</Button>
                <Button size="sm" className="bg-green-600 text-white hover:bg-green-700" onClick={sendToDossierBuilder}>üìÅ Add to Dossier</Button>
              </>
            )}
          </div>
        </div>
      )}

      <div className="space-y-4">
        {results.map((r) => (
          <Card key={r.csr_id} className="hover:shadow-lg transition">
            <CardContent className="space-y-1">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">{r.title} ({r.phase})</h3>
                <Button variant={selected.includes(r.csr_id) ? 'default' : 'outline'} size="sm" onClick={() => toggleSelect(r.csr_id)}>
                  {selected.includes(r.csr_id) ? '‚úì Selected' : 'Compare'}
                </Button>
              </div>
              <p className="text-sm text-gray-600">Indication: {r.indication}</p>
              <p className="text-sm">Similarity Score: {r.score}</p>
              <p className="text-sm italic">Match: {r.vector_summary?.slice(0, 200)}...</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {selected.length > 1 && (
        <div className="pt-6" id="csr-comparison-section">
          <CSRCompareViewer selectedIds={selected} />
        </div>
      )}
    </div>
  );
}
