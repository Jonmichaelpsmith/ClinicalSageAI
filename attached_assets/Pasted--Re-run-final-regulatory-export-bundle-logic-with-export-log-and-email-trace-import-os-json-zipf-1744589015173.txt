# Re-run final regulatory export bundle logic with export log and email trace
import os, json, zipfile, datetime
from fastapi import FastAPI
from fastapi.responses import FileResponse
from fpdf import FPDF
from docx import Document

app = FastAPI()

def add_cover_page(pdf: FPDF, session_id: str, title: str = "Study Intelligence Report"):
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt="LumenTrialGuide.AI", ln=True, align="C")
    pdf.set_font("Arial", "", 12)
    pdf.cell(200, 10, txt=title, ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("Arial", "", 10)
    pdf.multi_cell(0, 8, f"""
Session ID: {session_id}
Report Generated: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Generated By: LumenTrialGuide.AI Intelligence Suite

This report includes:
- Molecule-based design rationale
- Risk modeling and predictive analytics
- Regulatory justification and IND output
- Assistant decision trace
""")
    return pdf

def export_branded_docx(session_id: str, ind_text: str):
    archive_dir = f"/mnt/data/lumen_reports_backend/sessions/{session_id}"
    os.makedirs(archive_dir, exist_ok=True)
    doc = Document()
    doc.add_heading("LumenTrialGuide.AI", 0)
    doc.add_paragraph("Regulatory Intelligence Report", style="Intense Quote")
    doc.add_paragraph(f"Session ID: {session_id}")
    doc.add_paragraph("Generated By: LumenTrialGuide.AI Intelligence Suite")
    doc.add_paragraph(datetime.datetime.now().strftime("Generated: %Y-%m-%d %H:%M:%S"))
    doc.add_paragraph("Included Content:\n- IND 2.5 Summary\n- CSR-Based Design Evidence\n- Assistant Decision Reasoning")
    doc.add_page_break()
    doc.add_heading("ðŸ“„ IND Module 2.5 Summary", level=1)
    doc.add_paragraph(ind_text, style="Normal")
    doc.save(os.path.join(archive_dir, "ind_summary_branded.docx"))

@app.get("/api/export/regulatory-bundle/{session_id}")
def export_regulatory_bundle(session_id: str):
    archive_dir = f"/mnt/data/lumen_reports_backend/sessions/{session_id}"
    if not os.path.exists(archive_dir):
        return {"error": "Session data not found."}

    # Summary PDF
    pdf_path = os.path.join(archive_dir, "summary_packet.pdf")
    if not os.path.exists(pdf_path):
        pdf = FPDF()
        add_cover_page(pdf, session_id=session_id, title="Regulatory Intelligence Report")
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, f"No content yet available for {session_id}.")
        pdf.output(pdf_path)

    # IND DOCX
    ind_text_path = os.path.join(archive_dir, "ind_summary.txt")
    docx_path = os.path.join(archive_dir, "ind_summary_branded.docx")
    if os.path.exists(ind_text_path) and not os.path.exists(docx_path):
        with open(ind_text_path, "r") as f:
            export_branded_docx(session_id, f.read())

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"{session_id}_regulatory_ready_bundle_{timestamp}.zip"
    zip_path = f"/mnt/data/{zip_filename}"

    bundle_files = [
        "summary_packet.pdf",
        "dropout_forecast.json",
        "success_prediction.json",
        "ind_summary.txt",
        "ind_summary_branded.docx",
        "sap_summary_branded.docx",
        "wisdom_trace.json"
    ]

    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file in bundle_files:
            file_path = os.path.join(archive_dir, file)
            if os.path.exists(file_path):
                zipf.write(file_path, arcname=file)

    # Simulated email
    email_store_path = "/mnt/data/lumen_reports_backend/static/session_emails.json"
    recipient_email = None
    if os.path.exists(email_store_path):
        with open(email_store_path, "r") as f:
            store = json.load(f)
            recipient_email = store.get(session_id)

    if recipient_email:
        print(f"ðŸ“¤ Auto-sending to: {recipient_email}")

    # Write export log
    export_log = {
        "last_exported": timestamp,
        "bundle_file": zip_filename,
        "recipient": recipient_email or "N/A"
    }
    with open(os.path.join(archive_dir, "export_log.json"), "w") as f:
        json.dump(export_log, f, indent=2)

    return FileResponse(zip_path, filename=zip_filename, media_type="application/zip")
