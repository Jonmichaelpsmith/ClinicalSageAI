// SubmissionBuilder.tsx – drag‑drop tree with live QC badges via WebSocket, region aware
import React, { useEffect, useState, useRef } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import { CheckCircle, XCircle } from 'lucide-react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const REGION_FOLDERS: Record<string, string[]> = {
  FDA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  EMA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  PMDA: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp‑annex']
};

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

export default function SubmissionBuilder({ region = 'FDA' }: { region?: string }) {
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);
  const [selected, setSelected] = useState<Set<number>>(new Set());
  const ws = useRef<WebSocket | null>(null);

  useEffect(() => {
    loadDocs();
    const url = `${location.protocol === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/qc`;
    ws.current = new WebSocket(url);
    ws.current.onmessage = (ev) => {
      const msg = JSON.parse(ev.data);
      setTree(prev => prev.map(n => n.id === msg.id ? { ...n, data: { ...n.data!, qc_json: { status: msg.status } } } : n));
    };
    return () => ws.current?.close();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [region]);

  const loadDocs = async () => {
    setLoading(true);
    const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
    const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
    const folders = REGION_FOLDERS[region].map((m, idx) => ({ id: 10000 + idx, parent: 0, text: m, droppable: true }));
    const items = docs.map(d => ({
      id: d.id,
      parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
      text: d.title,
      droppable: false,
      data: d
    }));
    setTree([root, ...folders, ...items]);
    setLoading(false);
  };

  const handleDrop = (newTree: Node[]) => setTree(newTree);
  const toggleSel = (id: number) => setSelected(s => { const n=new Set(s); n.has(id)?n.delete(id):n.add(id); return n; });

  const bulkApprove = async () => {
    await fetch('/api/documents/bulk-approve', {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ids: Array.from(selected) })
    });
    toast.info('Bulk approval started');
    setSelected(new Set());
  };

  const saveOrder = async () => {
    const ordered = tree.filter(n => !n.droppable && n.parent !== 0).map((n, i) => ({ id: n.id, module: tree.find(f => f.id===n.parent)!.text, order: i }));
    await fetch('/api/documents/builder-order', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ docs: ordered }) });
    toast.success('Order saved');
  };

  const renderNode = (node: Node, { depth, isOpen, onToggle }: any) => node.droppable ? (
    <div style={{ marginLeft: depth*16 }} className="d-flex align-items-center gap-1 py-1 fw-bold">
      <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen?'▾':'▸'}</button>{node.text}
    </div>
  ) : (
    <div style={{ marginLeft: depth*16 }} className="d-flex align-items-center gap-2 py-1">
      <input type="checkbox" checked={selected.has(node.id)} onChange={() => toggleSel(node.id)} />
      {node.data?.qc_json?.status==='passed'?<CheckCircle size={14} className="text-success"/>:<XCircle size={14} className="text-danger"/>}
      <span>{node.text}</span>
    </div>
  );

  if (loading) return <p className="text-center mt-4">Loading…</p>;

  return (
    <div className="container py-4">
      <h2>Submission Builder <span className="badge bg-secondary ms-2">{region}</span></h2>
      <DndProvider backend={HTML5Backend}>
        <Tree tree={tree} rootId={0} render={renderNode} onDrop={handleDrop} />
      </DndProvider>
      <div className="d-flex gap-3 mt-3">
        <button className="btn btn-primary" onClick={saveOrder}>Save Order</button>
        <button className="btn btn-outline-success" disabled={!selected.size} onClick={bulkApprove}>Bulk Approve + QC</button>
      </div>
    </div>
  );
}

async function fetchJson(url:string){const r=await fetch(url);if(!r.ok)throw new Error('fetch');return r.json();}
