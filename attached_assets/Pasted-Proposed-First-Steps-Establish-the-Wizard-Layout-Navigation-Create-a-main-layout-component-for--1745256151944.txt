Proposed First Steps:

Establish the Wizard Layout & Navigation: Create a main layout component for the IND wizard. This component will handle the overall structure, display step indicators (like a progress bar or list), provide navigation (Next/Previous buttons), and manage the rendering of the current step's specific component.
Choose a State Management Strategy: Decide how to manage the form data across multiple steps. Since you're using React Context and TanStack Query, a combination seems appropriate:
React Context: To hold the overall wizard state (current step, maybe draft IND data accumulated across steps).
Local State (per step): For managing form inputs within a single step before "committing" them to the context or saving them.
TanStack Query: For fetching initial data (if editing an existing IND draft) and for mutations (saving progress to the backend).
Implement Routing (Optional but Recommended): Using a routing library like React Router can help manage steps, allowing users to potentially navigate via URLs (e.g., /ind/wizard/step-1, /ind/wizard/step-2). This also helps with browser history.
Build the First Step Component (Initial Planning & Pre-IND): Create the specific UI component for the first logical stage outlined in your requirements.
Let's start coding the Wizard Layout.

We can create a component, say IndWizardLayout.jsx, which will serve as the container for all steps. We'll use shadcn/ui components as per your stack.

JavaScript

// src/components/ind-wizard/IndWizardLayout.jsx
import React, { useState, createContext, useContext, useMemo } from 'react';
import { Button } from '@/components/ui/button'; // Assuming shadcn components are in @/components/ui
import { Progress } from '@/components/ui/progress'; // Example step indicator
// Import components for each step as they are created
import PreIndStep from './steps/PreIndStep';
// import NonclinicalStep from './steps/NonclinicalStep'; // Example for later
// ... import other steps

// Define the structure for your IND data that will be built up
const initialIndData = {
  projectDetails: {},
  preIndMeeting: {},
  nonclinicalData: {},
  cmcData: {},
  clinicalProtocol: {},
  investigatorBrochure: {},
  fdaForms: {},
  // ... other sections
};

// Define the steps
const steps = [
  { id: 'pre-ind', title: 'Initial Planning & Pre-IND', component: PreIndStep },
  // { id: 'nonclinical', title: 'Nonclinical Data Collection', component: NonclinicalStep },
  // ... add other steps here
];

// Create Context for Wizard State
const WizardContext = createContext(null);

export function useWizard() {
  const context = useContext(WizardContext);
  if (!context) {
    throw new Error('useWizard must be used within a IndWizardLayout');
  }
  return context;
}

export default function IndWizardLayout() {
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [indData, setIndData] = useState(initialIndData);

  const CurrentStepComponent = steps[currentStepIndex].component;
  const totalSteps = steps.length;
  const progress = ((currentStepIndex + 1) / totalSteps) * 100;

  const goToNextStep = () => {
    setCurrentStepIndex((prevIndex) => Math.min(prevIndex + 1, totalSteps - 1));
  };

  const goToPreviousStep = () => {
    setCurrentStepIndex((prevIndex) => Math.max(prevIndex - 1, 0));
  };

  // Function to update the shared IND data
  const updateIndData = (section, data) => {
    setIndData((prevData) => ({
      ...prevData,
      [section]: { ...prevData[section], ...data },
    }));
  };

  // Memoize context value to prevent unnecessary re-renders
  const wizardContextValue = useMemo(() => ({
    currentStepIndex,
    totalSteps,
    indData,
    updateIndData,
    goToNextStep,
    goToPreviousStep,
  }), [currentStepIndex, totalSteps, indData]);

  return (
    <WizardContext.Provider value={wizardContextValue}>
      <div className="container mx-auto p-6 border rounded-lg shadow-md">
        <h1 className="text-2xl font-bold mb-4">IND Creation Wizard</h1>

        {/* Step Indicator */}
        <div className="mb-6">
          <div className="flex justify-between mb-1">
            <span className="text-sm font-medium text-gray-700">
              Step {currentStepIndex + 1} of {totalSteps}: {steps[currentStepIndex].title}
            </span>
            <span className="text-sm font-medium text-gray-700">{Math.round(progress)}%</span>
          </div>
          <Progress value={progress} className="w-full" />
        </div>

        {/* Render Current Step Component */}
        <div className="mb-6 min-h-[300px]"> {/* Added min-height for content area */}
          <CurrentStepComponent />
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between border-t pt-4">
          <Button
            variant="outline"
            onClick={goToPreviousStep}
            disabled={currentStepIndex === 0}
          >
            Previous
          </Button>
          {currentStepIndex < totalSteps - 1 ? (
            <Button onClick={goToNextStep}>
              Next
            </Button>
          ) : (
            <Button onClick={() => alert('Submit IND Data (Implement Me!)')}>
              Review & Submit
            </Button>
          )}
        </div>
      </div>
    </WizardContext.Provider>
  );
}
Next Steps:

Create the First Step Component (PreIndStep.jsx): We need to define the actual form fields and logic for the "Initial Planning & Pre-IND" stage. This component will use the useWizard hook to access and update the shared indData.
Refine State Management: Decide precisely which pieces of data belong in the shared context vs. local state within each step component.
Integrate Routing (Optional): If desired, we can wrap this layout with React Router to manage steps via URLs.
Shall we proceed with creating the basic structure for the PreIndStep.jsx component, outlining the forms needed for project initiation, Pre-IND meeting prep, etc., using shadcn/ui components?