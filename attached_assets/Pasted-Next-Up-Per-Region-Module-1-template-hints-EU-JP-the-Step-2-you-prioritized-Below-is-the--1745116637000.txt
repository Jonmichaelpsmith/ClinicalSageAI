Next Up — Per‑Region Module‑1 template hints (EU / JP)
(the “Step 2” you prioritized)

Below is the plan and code‑drop sequence that slots seamlessly into what we've built so far.

1 ▪ Regional folder map helper (add once)
client/src/utils/moduleMap.ts

ts
Copy
Edit
export const REGION_MAP: Record<string, { id: string; label: string }[]> = {
  FDA: [
    { id: 'm1', label: 'Module 1  – US Regional' },
    { id: 'm2', label: 'Module 2  – Common CTD' },
    { id: 'm3', label: 'Module 3  – Quality' },
    { id: 'm4', label: 'Module 4  – Non‑clinical' },
    { id: 'm5', label: 'Module 5  – Clinical' }
  ],
  EMA: [
    { id: 'm1', label: 'Module 1 – EU Regional (1.0–1.7)' },
    { id: '1.2', label: '‑‑ CTA Application form' },
    { id: '1.3', label: '‑‑ Product‑information' },
    { id: 'm2', label: 'Module 2 – Overview/summaries' },
    { id: 'm3', label: 'Module 3 – Quality' },
    { id: 'm4', label: 'Module 4 – Non‑clinical' },
    { id: 'm5', label: 'Module 5 – Clinical' }
  ],
  PMDA: [
    { id: 'm1', label: 'Module 1 – JP Regional (1.1–1.7)' },
    { id: 'jp‑annex', label: '‑‑ Japanese Annex' },
    { id: 'm2', label: 'Module 2 – Overviews' },
    { id: 'm3', label: 'Module 3 – CMC' },
    { id: 'm4', label: 'Module 4 – Non‑clinical' },
    { id: 'm5', label: 'Module 5 – Clinical' }
  ]
};
2 ▪ Enhance SubmissionBuilder.tsx
Replace the existing REGION_FOLDERS constant + folder build logic with:

tsx
Copy
Edit
import { REGION_MAP } from '../utils/moduleMap';

...

const folders = REGION_MAP[region].map((f, idx) => ({
  id: 10_000 + idx,
  parent: 0,
  text: f.id,
  label: f.label,
  droppable: true
}));
Inside the renderNode function, show tooltip / subtitle:

tsx
Copy
Edit
if (node.droppable) {
  return (
    <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-1 py-1">
      <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen ? '▾' : '▸'}</button>
      <strong title={node.label || node.text}>{node.text}</strong>
    </div>
  );
}
Result: when users switch region, the tree auto‑re‑renders with the appropriate EU or JP Module‑1 sub‑folders (CTA form, JP Annex). If a doc is dragged into an invalid folder (e.g., “jp‑annex” while region=FDA) we can flag it:

tsx
Copy
Edit
const invalid = region !== 'PMDA' && node.parent !== 0 &&
                tree.find(f => f.id === node.parent)!.text === 'jp‑annex';
...
{invalid && <XCircle size={12} className="text-warning" title="Invalid for this region" />}
3 ▪ Backend sequence creator already region‑aware
/sequence/create-region copies the module string as chosen; EU builder already exports eu‑regional.xml, JP builder in place.

No change required server‑side.

4 ▪ Next Steps in order you asked
(Step 1) Socket push – hook utils/event_bus to WebSocket UI so QC badge flips instantly.

(Step 3) EU / JP eValidator profile wiring – we already parameterized; just surface in UI.

Say “Go sockets” and I’ll wire the real‑time QC badge update, then roll into eValidator profile UI afterward.