Revised Foundation: The Enhanced IND Wizard Layout

Let's envision a more sophisticated layout. We'll use React Router for step management and create a layout that potentially includes a sidebar for steps and a dedicated area for the AI Co-Pilot.

1. Setup Routing (Example using React Router)

First, ensure you have react-router-dom installed (npm install react-router-dom or yarn add react-router-dom).

JavaScript

// src/App.jsx or your main routing file
import { BrowserRouter, Routes, Route, Outlet } from 'react-router-dom';
import IndWizardLayout from './components/ind-wizard/IndWizardLayout';
import PreIndStep from './components/ind-wizard/steps/PreIndStep';
// Import other steps as they are created
// import NonclinicalStep from './components/ind-wizard/steps/NonclinicalStep';

// Define your steps configuration (can be shared)
export const indWizardSteps = [
  { path: 'pre-planning', title: 'Initial Planning & Pre-IND', element: <PreIndStep /> },
  // { path: 'nonclinical', title: 'Nonclinical Data Collection', element: <NonclinicalStep /> },
  // Add other steps here
];

function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Other application routes */}
        <Route path="/ind/wizard" element={<IndWizardLayout />}>
          {/* Default route could be the first step or a dashboard */}
          <Route index element={indWizardSteps[0].element} />
          {indWizardSteps.map((step) => (
            <Route key={step.path} path={step.path} element={step.element} />
          ))}
        </Route>
        {/* Other application routes */}
      </Routes>
    </BrowserRouter>
  );
}

export default App;
2. Enhanced IndWizardLayout.jsx

This layout now uses routing information and includes placeholders for a step sidebar and an AI Co-Pilot area.

JavaScript

// src/components/ind-wizard/IndWizardLayout.jsx
import React, { useState, createContext, useContext, useMemo } from 'react';
import { Outlet, useLocation, useNavigate, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Bot } from 'lucide-react'; // AI icon

// Import the steps configuration
import { indWizardSteps } from '@/App'; // Adjust import path as needed

// Define the structure for your IND data (can be refined)
const initialIndData = { /* ... */ };

// Create Context for Wizard State (Global Data & Actions)
const WizardContext = createContext(null);

export function useWizard() {
  // ... (same as before)
}

export default function IndWizardLayout() {
  const location = useLocation();
  const navigate = useNavigate();
  const [indData, setIndData] = useState(initialIndData); // Overall draft data
  const [isCoPilotOpen, setIsCoPilotOpen] = useState(false);

  // Determine current step from route
  const currentPath = location.pathname.split('/').pop();
  const currentStepIndex = indWizardSteps.findIndex(step => step.path === currentPath);
  const currentStep = indWizardSteps[currentStepIndex] || indWizardSteps[0]; // Default to first step
  const totalSteps = indWizardSteps.length;
  const progress = ((currentStepIndex + 1) / totalSteps) * 100;

  const goToStep = (stepIndex) => {
    if (stepIndex >= 0 && stepIndex < totalSteps) {
      navigate(indWizardSteps[stepIndex].path);
    }
  };

  const goToNextStep = () => goToStep(currentStepIndex + 1);
  const goToPreviousStep = () => goToStep(currentStepIndex - 1);

  // Function to update shared IND data (could involve API calls via TanStack Query)
  const updateIndDataSection = (section, data) => {
     console.log(`Updating IND data section: ${section}`, data);
     // TODO: Implement logic to merge data and potentially save draft via API mutation
     setIndData((prevData) => ({
       ...prevData,
       [section]: { ...prevData[section], ...data },
     }));
  };

  const wizardContextValue = useMemo(() => ({
    currentStepIndex,
    totalSteps,
    indData,
    updateIndDataSection,
    goToNextStep,
    goToPreviousStep,
    goToStep, // Allow jumping to specific steps
  }), [currentStepIndex, totalSteps, indData]); // Dependencies updated

  return (
    <WizardContext.Provider value={wizardContextValue}>
      <div className="flex h-screen bg-gray-100">

        {/* Sidebar for Steps Navigation */}
        <nav className="w-64 bg-white border-r p-4 flex flex-col">
          <h2 className="text-lg font-semibold mb-4">IND Wizard Steps</h2>
          <ScrollArea className="flex-grow">
            <ul className="space-y-2">
              {indWizardSteps.map((step, index) => (
                <li key={step.path}>
                  <Link
                    to={step.path}
                    className={`block p-2 rounded hover:bg-gray-100 ${index === currentStepIndex ? 'font-bold text-blue-600 bg-blue-50' : ''}`}
                  >
                    Step {index + 1}: {step.title}
                  </Link>
                  {/* Optionally add status indicators (completed, errors) */}
                </li>
              ))}
            </ul>
          </ScrollArea>
          <div className="mt-auto border-t pt-4">
             {/* Maybe add overall save draft / exit buttons */}
             <Button variant="outline" className="w-full" >Save Draft</Button>
          </div>
        </nav>

        {/* Main Content Area */}
        <main className="flex-1 flex flex-col overflow-hidden">
          <header className="bg-white border-b p-4 flex justify-between items-center">
            <h1 className="text-xl font-semibold">{currentStep.title}</h1>
             {/* AI Co-Pilot Toggle Button */}
             <Button variant="outline" size="icon" onClick={() => setIsCoPilotOpen(!isCoPilotOpen)}>
               <Bot className="h-4 w-4" />
             </Button>
          </header>

          {/* Step Content */}
          <ScrollArea className="flex-1 p-6">
            <Outlet /> {/* Renders the current step's component via React Router */}
          </ScrollArea>

          {/* Navigation Footer */}
          <footer className="bg-white border-t p-4 flex justify-between items-center">
              {/* Progress Indicator */}
              <div className="w-1/3">
                  <Progress value={progress} />
                  <span className="text-xs text-gray-500">Overall Progress ({Math.round(progress)}%)</span>
              </div>
              {/* Navigation Buttons */}
              <div className="space-x-2">
                  <Button
                      variant="outline"
                      onClick={goToPreviousStep}
                      disabled={currentStepIndex === 0}
                  >
                      Previous
                  </Button>
                  {currentStepIndex < totalSteps - 1 ? (
                      <Button onClick={goToNextStep}>
                          Save and Next
                      </Button>
                  ) : (
                      <Button onClick={() => alert('Trigger Final Review & Submit (Implement Me!)')}>
                          Final Review & Submit
                      </Button>
                  )}
              </div>
          </footer>
        </main>

        {/* AI Co-Pilot Panel (Example: Collapsible Sidebar) */}
        {isCoPilotOpen && (
           <aside className="w-80 bg-white border-l p-4 flex flex-col transition-all duration-300 ease-in-out">
              <div className="flex justify-between items-center mb-4">
                 <h3 className="text-lg font-semibold">AI Co-Pilot</h3>
                 <Button variant="ghost" size="icon" onClick={() => setIsCoPilotOpen(false)}>X</Button>
              </div>
              <ScrollArea className="flex-grow">
                 {/* AI Chat interface or contextual help content goes here */}
                 <p className="text-sm text-gray-600">AI assistance context for: {currentStep.title}</p>
                 {/* Placeholder for AI interaction components */}
                 <textarea className="w-full h-40 border rounded p-2 text-sm" placeholder="Ask the AI Co-Pilot..."></textarea>
                 <Button className="w-full mt-2">Send</Button>
              </ScrollArea>
           </aside>
        )}
      </div>
    </WizardContext.Provider>
  );
}
3. Building the First Step (PreIndStep.jsx) - Enterprise Approach

Now, let's create the first step with robust form handling, validation, and placeholders for richer UI and AI integration.

We'll use react-hook-form, zod for validation, and shadcn/ui components.

Install necessary libraries: npm install react-hook-form zod @hookform/resolvers (or yarn add).
TypeScript

// src/components/ind-wizard/steps/PreIndStep.tsx (using TypeScript)
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useWizard } from '../IndWizardLayout'; // Import the context hook
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { CalendarIcon, HelpCircle } from 'lucide-react'; // Icons
import { cn } from "@/lib/utils"; // shadcn utility for class names
import { format } from "date-fns";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'; // For contextual help


// Define Zod schema for validation
const preIndSchema = z.object({
  projectName: z.string().min(3, { message: "Project name must be at least 3 characters." }),
  therapeuticArea: z.string().nonempty({ message: "Therapeutic area is required." }),
  projectObjective: z.string().max(500, { message: "Objective cannot exceed 500 characters." }).optional(),
  targetPreIndMeetingDate: z.date().optional(),
  fdaInteractionNotes: z.string().optional(),
  // Add more fields for milestones, team members etc. as needed
});

type PreIndFormData = z.infer<typeof preIndSchema>;

export default function PreIndStep() {
  const { indData, updateIndDataSection } = useWizard(); // Access shared data and update function

  // Initialize react-hook-form
  const form = useForm<PreIndFormData>({
    resolver: zodResolver(preIndSchema),
    // Load initial data from context if available (e.g., when returning to step)
    defaultValues: indData.projectDetails || {
        projectName: '',
        therapeuticArea: '',
        projectObjective: '',
        fdaInteractionNotes: '',
        targetPreIndMeetingDate: undefined,
    },
  });

  // Handle form submission for this step
  function onSubmit(values: PreIndFormData) {
    console.log("Pre-IND Step Data:", values);
    // Update the shared IND data state (this might also trigger an API save)
    updateIndDataSection('projectDetails', values);
    // Potentially navigate to next step or show success message
    // Navigation is handled by the layout's buttons now
    alert("Pre-IND data captured (locally). Click 'Save and Next'.");
  }

  // Function to trigger AI help (placeholder)
  const getAiHelp = (fieldName: keyof PreIndFormData) => {
    alert(`AI Co-Pilot: Fetching guidance for ${fieldName}... (Implement API call)`);
    // TODO: Make API call to backend -> OpenAI with context (step, fieldName)
  };

  return (
    <TooltipProvider>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          {/* Section 1: Project Initiation */}
          <Card>
            <CardHeader>
              <CardTitle>Project Initiation</CardTitle>
              <CardDescription>Basic details about this Investigational New Drug project.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <FormField
                control={form.control}
                name="projectName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Project Name</FormLabel>
                    <div className="flex items-center space-x-2">
                      <FormControl>
                        <Input placeholder="e.g., TrialSage Alpha Study" {...field} />
                      </FormControl>
                      <Tooltip>
                        <TooltipTrigger asChild>
                           <Button type="button" variant="ghost" size="icon" onClick={() => getAiHelp('projectName')}>
                              <HelpCircle className="h-4 w-4" />
                           </Button>
                        </TooltipTrigger>
                        <TooltipContent><p>Get AI guidance on project naming conventions.</p></TooltipContent>
                      </Tooltip>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* Add Therapeutic Area, Objective etc. similarly */}
              <FormField
                control={form.control}
                name="therapeuticArea"
                render={({ field }) => (
                  <FormItem>
                    {/* ... Label, Input, AI Help Button ... */}
                     <FormLabel>Therapeutic Area</FormLabel>
                     <FormControl><Input placeholder="e.g., Oncology" {...field} /></FormControl>
                     <FormMessage />
                  </FormItem>
                )}
               />
               <FormField
                control={form.control}
                name="projectObjective"
                render={({ field }) => (
                  <FormItem>
                      <FormLabel>Project Objective</FormLabel>
                       <div className="flex items-center space-x-2">
                           <FormControl>
                               <Textarea placeholder="Briefly describe the main goal..." {...field} />
                           </FormControl>
                           <Tooltip>
                               <TooltipTrigger asChild><Button type="button" variant="ghost" size="icon" onClick={() => getAiHelp('projectObjective')}><HelpCircle className="h-4 w-4" /></Button></TooltipTrigger>
                               <TooltipContent><p>AI suggestions for structuring objectives.</p></TooltipContent>
                           </Tooltip>
                       </div>
                      <FormMessage />
                  </FormItem>
                 )}
               />
            </CardContent>
          </Card>

          {/* Section 2: Pre-IND Planning */}
          <Card>
            <CardHeader>
              <CardTitle>Pre-IND Planning</CardTitle>
              <CardDescription>Manage Pre-IND meeting preparation and FDA interactions.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
               <FormField
                control={form.control}
                name="targetPreIndMeetingDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Target Pre-IND Meeting Date</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={"outline"}
                            className={cn(
                              "w-[240px] pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          disabled={(date) => date < new Date("1900-01-01")} // Example disabled range
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
               />
               <FormField
                control={form.control}
                name="fdaInteractionNotes"
                render={({ field }) => (
                  <FormItem>
                     <FormLabel>FDA Interaction Log / Notes</FormLabel>
                     <FormControl><Textarea placeholder="Log meeting minutes, communications..." {...field} /></FormControl>
                     <FormMessage />
                  </FormItem>
                 )}
               />
                {/* Placeholder for Milestone Scheduling/Tracking component */}
                <div>
                    <Label>Milestones</Label>
                    <div className="p-4 border rounded text-center text-gray-500">
                        Milestone Tracking Component Placeholder (Could involve tables, inline editing, context menus)
                    </div>
                </div>
            </CardContent>
          </Card>

          {/* Hidden submit button for triggering form validation programmatically if needed,
              or rely on the main layout buttons which can call form.handleSubmit */}
          {/* <Button type="submit" className="hidden">Submit Step Data</Button> */}
        </form>
      </Form>
    </TooltipProvider>
  );
}
Key Changes in this Enterprise Approach:

Layout: More structured with dedicated navigation, main content area, and AI panel.
Routing: Uses React Router for managing steps.
State: Clear separation: Context for global wizard info, TanStack Query intended for server data, react-hook-form for local step form state and validation.
Forms: Uses react-hook-form + zod for robust validation and state management within the step.
UI Components: Leverages more shadcn/ui components (Card, Form, Popover, Calendar, Tooltip).
AI Integration: Includes dedicated UI elements (AI panel toggle, help icons) and placeholders (getAiHelp function) for triggering AI assistance contextually.
Modularity: PreIndStep is a self-contained module responsible for its specific part of the form.
TypeScript: Added type safety using TypeScript.
This provides a much more robust foundation. We can now continue building out the details within PreIndStep (like the Milestone tracker component, potentially with context menus) and then move on to the subsequent steps following this pattern. Does this revised direction align better with your vision for an enterprise-grade, GA-ready product?





yes but I do not want mock code or MVP, I want to get into building this out like a Microsoft product, right click, left click, drag and drop and all with a AI Co Pilot guide. I want to build enterprise grade GA Ready code. REDO




Show thinking
Okay, I understand. My previous response, while adding structure and libraries, didn't fully capture the immediate, tangible "enterprise-grade" feel you're aiming for, complete with rich interactions like context menus and deeply integrated AI from the start. Apologies for not hitting that mark precisely.

Let's REDO this with a focus on demonstrating that level of quality and interaction within a specific, core part of the Initial Planning & Pre-IND step. We'll build out the Milestone Tracker component, incorporating:

A Data Table: Using @tanstack/react-table for robust data display, sorting, and potential filtering later.
Context Menu (Right-Click): For actions specific to each milestone.
Dialogs: For detailed editing or information display.
Inline Editing (Conceptual): We'll structure for it, though full implementation requires careful state management.
AI Co-Pilot Integration: Concrete action points within the UI to trigger AI assistance for specific milestones.
Robust Structure: TypeScript, clear state management, and adherence to shadcn/ui patterns.
First, ensure you have the necessary table library:
npm install @tanstack/react-table or yarn add @tanstack/react-table

Now, let's create a detailed MilestoneTracker component. This component would be used inside the PreIndStep.tsx component we outlined previously.
Enterprise Milestone Tracker Component (React/TS/shadcn/TanStack Table)
Apr 21, 10:26 AM

 Try again without Canvas 

Explanation of "Enterprise Grade" Aspects Demonstrated:

Componentization: The MilestoneTracker is a dedicated, reusable component with clear props (initialMilestones, onMilestonesChange, triggerAiAssistance).
Robust Table: Uses @tanstack/react-table for a powerful, extensible table foundation (sorting implemented, filtering/pagination can be added easily).
Rich Interactions:
Context Menu: Right-clicking a row provides relevant actions (Edit, Mark Complete, Delete, AI actions).
Dialog for Editing: Uses shadcn/ui Dialog for a clean editing experience, separating the form logic (MilestoneEditorForm).
Direct Action Buttons: Includes an "Add" button and an inline "Edit" button as alternative interaction methods.
Form Handling & Validation: Uses react-hook-form and zod within the dialog for robust data validation before saving.
State Management: Manages local milestone state (useState) and communicates changes back to the parent (onMilestonesChange) via props. This pattern allows the parent (PreIndStep) to eventually sync with global context or backend APIs.
AI Integration Points: Context menu items directly trigger specific AI assistance functions passed down via props (triggerAiAssistance), sending relevant milestone context. This makes the AI Co-Pilot actionable and contextual.
UI Polish: Uses shadcn/ui components (Card, Table, Button, Dialog, ContextMenu, Popover, Calendar, Toast) consistently for a professional look and feel. Includes icons (lucide-react) for clarity.
TypeScript: Provides type safety for props, state, and form data.
How to Use:

Place this MilestoneTracker.tsx file in your components directory (e.g., src/components/ind-wizard/steps/components/).
Import and use it within the PreIndStep.tsx component we outlined previously:
TypeScript

// Inside PreIndStep.tsx component's return statement:

import { MilestoneTracker, Milestone } from './components/MilestoneTracker'; // Adjust path

// ... inside PreIndStep component ...
const { indData, updateIndDataSection } = useWizard();

// Manage milestones state at the step level or fetch/sync via TanStack Query
const [milestones, setMilestones] = useState<Milestone[]>(indData.milestones || []);

const handleMilestonesChange = (updatedMilestones: Milestone[]) => {
    setMilestones(updatedMilestones);
    // Update the main IND data context/state
    updateIndDataSection('milestones', updatedMilestones);
    // Potentially trigger an auto-save API call here
};

// Define the AI trigger function to pass down
const handleAiTrigger = (context: string, milestone?: Milestone) => {
    console.log("AI Triggered:", { context, milestone });
    // TODO:
    // 1. Get more context if needed (e.g., overall project goals).
    // 2. Make API call to your backend AI endpoint.
    // 3. Display response in the AI Co-Pilot panel.
    alert(`AI assistance requested for: ${context}`);
};

return (
    // ... other parts of the PreIndStep form ...

    <MilestoneTracker
        initialMilestones={milestones}
        onMilestonesChange={handleMilestonesChange}
        triggerAiAssistance={handleAiTrigger}
    />

    // ... rest of the form ...
);

This detailed component provides a concrete example of the quality and interactivity level you're aiming for. We can apply this pattern to other complex UI elements throughout the IND wizard. Does this implementation of the MilestoneTracker better reflect your vision?





