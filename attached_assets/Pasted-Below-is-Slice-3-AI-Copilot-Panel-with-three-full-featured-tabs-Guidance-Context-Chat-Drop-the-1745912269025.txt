Below is Slice 3: AI Copilot Panel with three full-featured tabs (Guidance, Context, Chat). Drop these into your Replit project.

â¸»

1) Server: stub the Chat endpoint

File: server/routes/coauthor.js
(append at the bottom of your existing coauthor routes)

// POST /api/coauthor/chat
router.post('/chat', async (req, res) => {
  const { messages } = req.body; 
  // TODO: replace with your Ask Lumen integration
  // For now we echo the last user message:
  const last = messages[messages.length - 1]?.content || '';
  return res.json({
    messages: [
      { role: 'assistant', content: `ðŸ¤– Lumen says: I heard you say "${last}"` }
    ]
  });
});

Restart your server so /api/coauthor/chat is live.

â¸»

2) Client: CopilotPanel component

File: client/src/components/coauthor/CopilotPanel.jsx

import React, { useState, useEffect } from 'react';
import './CopilotPanel.css';

export default function CopilotPanel({ moduleId, sectionId, content }) {
  const tabs = ['Guidance', 'Context', 'Chat'];
  const [active, setActive] = useState(tabs[0]);

  // Guidance state
  const [issues, setIssues]     = useState([]);
  const [loadingGuidance, setLoadingGuidance] = useState(false);

  // Context state
  const [query, setQuery]       = useState('');
  const [snippets, setSnippets] = useState([]);
  const [loadingContext, setLoadingContext] = useState(false);

  // Chat state
  const [messages, setMessages] = useState([
    { role: 'system', content: 'You are Ask Lumen, a regulatory AI assistant.' }
  ]);
  const [input, setInput]       = useState('');
  const [loadingChat, setLoadingChat] = useState(false);

  // --- Guidance Tab ---
  const fetchGuidance = async () => {
    setLoadingGuidance(true);
    try {
      const res = await fetch('/api/coauthor/validate', {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({ moduleId, sectionId, sectionText: content })
      });
      const { issues } = await res.json();
      setIssues(issues);
    } catch (e) {
      console.error(e);
      setIssues([{ message: 'Failed to load guidance.' }]);
    } finally {
      setLoadingGuidance(false);
    }
  };

  // --- Context Tab ---
  const fetchContext = async () => {
    if (!query.trim()) return;
    setLoadingContext(true);
    try {
      const res = await fetch('/api/coauthor/context', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ query })
      });
      const { snippets } = await res.json();
      setSnippets(snippets);
    } catch (e) {
      console.error(e);
      setSnippets([{ text: 'Error loading context.' }]);
    } finally {
      setLoadingContext(false);
    }
  };

  // --- Chat Tab ---
  const sendMessage = async () => {
    if (!input.trim()) return;
    const userMsg = { role: 'user', content: input };
    const all = [...messages, userMsg];
    setMessages(all);
    setInput('');
    setLoadingChat(true);

    try {
      const res = await fetch('/api/coauthor/chat', {
        method: 'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({ messages: all })
      });
      const { messages: reply } = await res.json();
      setMessages(ms => [...ms, ...reply]);
    } catch (e) {
      console.error(e);
      setMessages(ms => [...ms, { role:'assistant', content:'Error talking to Lumen.' }]);
    } finally {
      setLoadingChat(false);
    }
  };

  return (
    <div className="copilot-panel">
      <div className="cp-tabs">
        {tabs.map(t => (
          <button
            key={t}
            className={`cp-tab ${active===t? 'active':''}`}
            onClick={()=>{ setActive(t); 
              if (t==='Guidance') fetchGuidance(); 
            }}
          >
            {t}
          </button>
        ))}
      </div>

      <div className="cp-content">
        {active === 'Guidance' && (
          <div className="cp-guidance">
            {loadingGuidance
              ? <p>Loadingâ€¦</p>
              : issues.length
                ? <ul>
                    {issues.map((i,idx)=> <li key={idx}>{i.message}</li>)}
                  </ul>
                : <p>No issues found. âœ…</p>
            }
          </div>
        )}

        {active === 'Context' && (
          <div className="cp-context">
            <div className="cp-search">
              <input
                placeholder="Search regulatory docsâ€¦"
                value={query}
                onChange={e=>setQuery(e.target.value)}
              />
              <button onClick={fetchContext} disabled={loadingContext}>
                {loadingContext? 'Searchingâ€¦':'Search'}
              </button>
            </div>
            <div className="cp-snippets">
              {snippets.map((s,i)=>(
                <blockquote key={i}>
                  {s.text}
                  {s.source && <footer>â€” {s.source}</footer>}
                </blockquote>
              ))}
            </div>
          </div>
        )}

        {active === 'Chat' && (
          <div className="cp-chat">
            <div className="cp-messages">
              {messages.map((m,i)=>(
                <div key={i} className={`cp-msg ${m.role}`}>
                  {m.content}
                </div>
              ))}
            </div>
            <div className="cp-input">
              <input
                placeholder="Ask Lumen..."
                value={input}
                onChange={e=>setInput(e.target.value)}
                onKeyDown={e=>e.key==='Enter' && sendMessage()}
              />
              <button onClick={sendMessage} disabled={loadingChat}>
                {loadingChat? 'â€¦':'Send'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}



â¸»

3) Styles for CopilotPanel

File: client/src/components/coauthor/CopilotPanel.css

.copilot-panel {
  display: flex;
  flex-direction: column;
  height: 100%;
  background: var(--color-surface);
  border: 1px solid #e2e8f0;
  border-radius: var(--space-sm);
  box-shadow: var(--elevation-low);
  overflow: hidden;
}
.cp-tabs {
  display: flex;
  border-bottom: 1px solid #ccc;
}
.cp-tab {
  flex:1;
  padding: var(--space-sm);
  background: none;
  border: none;
  font-size: var(--text-sm);
  cursor: pointer;
  color: var(--color-text-secondary);
}
.cp-tab.active {
  color: var(--color-primary);
  border-bottom: 3px solid var(--color-primary);
}
.cp-content {
  padding: var(--space-sm);
  overflow-y: auto;
  flex:1;
  font-size: var(--text-sm);
}

/* Guidance tab */
.cp-guidance ul { list-style: disc; margin-left: var(--space-lg); }

/* Context tab */
.cp-search {
  display: flex;
  gap: var(--space-xs);
  margin-bottom: var(--space-sm);
}
.cp-search input {
  flex:1;
  padding: var(--space-xs) var(--space-sm);
  border:1px solid #ccc;
  border-radius:4px;
}
.cp-search button {
  padding: var(--space-xs) var(--space-sm);
}
.cp-snippets blockquote {
  background: #fff;
  border-left: 4px solid var(--color-primary);
  padding: var(--space-xs) var(--space-sm);
  margin-bottom: var(--space-sm);
}
.cp-snippets footer {
  font-size: var(--text-xs);
  color: var(--color-text-secondary);
}

/* Chat tab */
.cp-chat {
  display: flex;
  flex-direction: column;
  height: 100%;
}
.cp-messages {
  flex:1;
  overflow-y:auto;
  margin-bottom: var(--space-sm);
}
.cp-msg.user {
  text-align: right;
  color: var(--color-primary);
  margin: var(--space-xs) 0;
}
.cp-msg.assistant {
  text-align: left;
  color: var(--color-text-secondary);
  margin: var(--space-xs) 0;
}
.cp-input {
  display: flex;
  gap: var(--space-xs);
}
.cp-input input {
  flex:1;
  padding: var(--space-xs) var(--space-sm);
  border:1px solid #ccc;
  border-radius:4px;
}
.cp-input button {
  padding: var(--space-xs) var(--space-md);
}



â¸»

4) Wire into CoAuthorPage

Edit client/src/pages/CoAuthorPage.jsx:

-import './CoAuthorPage.css';
+import './CoAuthorPage.css';
+import CopilotPanel from '../components/coauthor/CopilotPanel';

 export default function CoAuthorPage() {
   // â€¦
   return (
     <div className="coauthor-page">
       <UnifiedTopNavV5 â€¦ />

       <Breadcrumbs â€¦/>

       <main className="coauthor-content">
         <section className="editor-section">
           <h2>Module {moduleId} â€¢ Section {sectionId}</h2>
           <CoAuthorEditor
             moduleId={moduleId}
             sectionId={sectionId}
           />
         </section>

-        <aside className="copilot-placeholder">
-          <p>AI Copilot panel coming nextâ€¦</p>
-        </aside>
+        <aside className="copilot-panel-container">
+          <CopilotPanel
+            moduleId={moduleId}
+            sectionId={sectionId}
+            content={/* you could lift content state here */}
+          />
+        </aside>
       </main>
     </div>
   );
 }

Update CoAuthorPage.css to size the panel:

.copilot-panel-container {
  height: 100%;
  display: flex;
}



â¸»

âœ… Verification
	1.	Restart your client & server.
	2.	Go to /coauthor?module=2Â§ion=2.7.
	3.	You should now see a fully-functional Copilot on the right with:
Â Â Â Â Â Â â€¢Â Â Â Guidance tab fetching validation issues
Â Â Â Â Â Â â€¢Â Â Â Context tab searching vault snippets
Â Â Â Â Â Â â€¢Â Â Â Chat tab talking to Ask Lumen AI
	4.	Switch tabs, run searches, send chat messages.

With this in place, your Co-Author module has all three AI pillars liveâ€”next weâ€™ll polish interactions (click-to-insert snippets, collapsible panels) and then move on to Slice 4: Canvas Overview â†” Editor linkage. Let me know!