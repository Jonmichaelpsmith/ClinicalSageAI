# ───────────────────────────────────────────────────────────────
# TrialSage Vault™ – Secure Ops Add‑On (Docker + CI/CD + Monitoring)
# This canvas includes:
#   • Dockerfile            – production container
#   • docker-compose.yml    – local multi‑service stack
#   • .github/workflows/deploy.yml – CI → container registry → Fly.io/Render
#   • server/utils/logger.js – Pino + Sentry integration
# ───────────────────────────────────────────────────────────────

# ---------------- Dockerfile ----------------
# syntax=docker/dockerfile:1.5
FROM node:20-slim AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci --omit=dev
COPY . .
ENV NODE_ENV=production
CMD ["node","server/index.js"]

# ---------------- docker-compose.yml ----------------
version: "3.9"
services:
  vault-api:
    build: .
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "4000:4000"
    restart: always

# ---------------- .github/workflows/deploy.yml ----------------
name: CI‑CD
on:
  push:
    branches: [main]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/trialsage-vault:latest
          build-args: |
            SUPABASE_URL
            SUPABASE_SERVICE_ROLE_KEY
            JWT_SECRET
            OPENAI_API_KEY
            SENTRY_DSN
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

# ---------------- server/utils/logger.js ----------------
import pino from 'pino';
import * as Sentry from '@sentry/node';

Sentry.init({ dsn: process.env.SENTRY_DSN, tracesSampleRate: 0.1 });

export const logger = pino({ level: 'info' });
export function sentryMiddleware(err, req, res, next) {
  Sentry.captureException(err);
  next(err);
}

# Integration snippet (server/index.js)
// import { logger, sentryMiddleware } from './utils/logger.js';
// app.use((req,res,next)=>{ logger.info({url:req.url, user:req.user?.id}); next(); });
// app.use(sentryMiddleware);
# ───────────────────────────────────────────────────────────────
