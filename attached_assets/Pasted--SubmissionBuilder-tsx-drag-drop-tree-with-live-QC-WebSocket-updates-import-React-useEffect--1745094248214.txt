// SubmissionBuilder.tsx – drag‑drop tree with live QC WebSocket updates
import React, { useEffect, useState, useRef } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import update from 'immutability-helper';
import { CheckCircle, XCircle } from 'lucide-react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const REGION_FOLDERS: Record<string, string[]> = {
  FDA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  EMA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  PMDA: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp‑annex'],
};

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

export default function SubmissionBuilder({ region = 'FDA' }: { region?: string }) {
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);
  const [selected, setSelected] = useState<Set<number>>(new Set());
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    (async () => {
      const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
      buildTree(docs);
      setLoading(false);
    })();
  }, [region]);

  // establish WebSocket on mount
  useEffect(() => {
    wsRef.current = new WebSocket(`${location.protocol === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/qc`);
    wsRef.current.onmessage = (evt) => {
      const { id, status } = JSON.parse(evt.data);
      setTree(prev => prev.map(n => n.id === id ? { ...n, data: { ...n.data!, qc_json: { status } } } : n));
    };
    wsRef.current.onerror = () => toast.error('QC WebSocket error');
    return () => wsRef.current?.close();
  }, []);

  const buildTree = (docs: Doc[]) => {
    const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
    const folders = REGION_FOLDERS[region].map((m, idx) => ({ id: 10_000 + idx, parent: 0, text: m, droppable: true }));
    const items = docs.map(d => ({
      id: d.id,
      parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
      text: d.title,
      droppable: false,
      data: d,
    }));
    setTree([root, ...folders, ...items]);
  };

  const handleDrop = (newTree: Node[]) => setTree(newTree);
  const toggleSelect = (id: number) => setSelected(prev => {
    const ns = new Set(prev); ns.has(id) ? ns.delete(id) : ns.add(id); return ns; });

  const bulkApprove = async () => {
    try {
      await fetch('/api/documents/bulk-approve', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: Array.from(selected) })
      });
      toast.info('Bulk approval initiated');
      setSelected(new Set());
    } catch { toast.error('Bulk approve failed'); }
  };

  const saveOrder = async () => {
    const orderedDocs = tree.filter(n => !n.droppable && n.parent !== 0).map((n, i) => ({
      id: n.id, module: tree.find(f => f.id === n.parent)!.text, order: i }));
    await fetch('/api/documents/builder-order', {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ docs: orderedDocs })
    });
    toast.success('Order saved');
  };

  const renderNode = (node: Node, { depth, isOpen, onToggle }: any) => {
    if (node.droppable) return (
      <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-1 py-1">
        <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen ? '▾' : '▸'}</button>
        <strong>{node.text}</strong>
      </div>
    );
    const status = node.data?.qc_json?.status;
    return (
      <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-2 py-1">
        <input type="checkbox" checked={selected.has(node.id)} onChange={() => toggleSelect(node.id)} />
        {status === 'passed' ? <CheckCircle size={14} className="text-success"/> : <XCircle size={14} className="text-danger"/>}
        <span>{node.text}</span>
      </div>
    );
  };

  if (loading) return <p className="text-center mt-4">Loading…</p>;

  return (
    <div className="container py-4">
      <h2>Submission Builder <span className="badge bg-secondary ms-2">{region}</span></h2>
      <DndProvider backend={HTML5Backend}>
        <Tree tree={tree} rootId={0} render={renderNode} onDrop={handleDrop} />
      </DndProvider>

      <div className="d-flex gap-3 mt-3">
        <button className="btn btn-primary" onClick={saveOrder}>Save Order</button>
        <button className="btn btn-outline-success" disabled={selected.size === 0} onClick={bulkApprove}>Bulk Approve + QC</button>
      </div>
    </div>
  );
}

async function fetchJson(url: string) {
  const r = await fetch(url); if (!r.ok) throw new Error('fetch failed'); return r.json();
}
