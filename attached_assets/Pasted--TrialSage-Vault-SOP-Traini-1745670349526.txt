// ───────────────────────────────────────────────────────────────
// TrialSage Vault™ – SOP Training Workflow (Backend + Front‑end)
// Purpose: When an SOP document reaches Effective state, assign
//          Read‑&‑Understood tasks to relevant users and track completion.
// ───────────────────────────────────────────────────────────────
// 📂 server/routes/training.js – assign & complete training tasks
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
import { verifyJwt } from '../middleware/auth.js';
const router = Router();

// AUTO‑CREATE training tasks when SOP transitions to Effective
export async function createTrainingTasks(sopDocId, sopTitle, tenantId) {
  // fetch users needing training (simple: all users with role 'User')
  const { data: users } = await supabase
    .from('users')
    .select('id')
    .eq('tenant_id', tenantId);
  if (!users) return;
  const tasks = users.map(u => ({ tenant_id: tenantId, user_id: u.id, doc_id: sopDocId, title: sopTitle, status: 'Pending' }));
  await supabase.from('training_tasks').insert(tasks);
}

// GET /api/training – my tasks
router.get('/', verifyJwt, async (req, res) => {
  const { id: userId, tenantId } = req.user;
  const { data, error } = await supabase
    .from('training_tasks')
    .select('*')
    .eq('tenant_id', tenantId)
    .eq('user_id', userId)
    .order('created_at');
  if (error) return res.status(500).json({ message: error.message });
  res.json(data);
});

// POST /api/training/:taskId/complete – mark done ✔️
router.post('/:taskId/complete', verifyJwt, async (req, res) => {
  const { taskId } = req.params;
  const { id: userId, tenantId } = req.user;
  const { error } = await supabase
    .from('training_tasks')
    .update({ status: 'Completed', completed_at: new Date() })
    .eq('id', taskId)
    .eq('user_id', userId)
    .eq('tenant_id', tenantId);
  if (error) return res.status(400).json({ message: error.message });
  res.json({ ok: true });
});

export default router;

//----------------------------------------------------------------
// Modify lifecycle transition to trigger training
//----------------------------------------------------------------
// In server/routes/lifecycle.js, when status changes to 'Effective'
//   call createTrainingTasks(docId, filename, tenantId)
//----------------------------------------------------------------

//----------------------------------------------------------------
// 📂 client/pages/TrainingTasks.jsx – user view
//----------------------------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Button } from '@/components/ui/button';

export default function TrainingTasks() {
  const [tasks, setTasks] = useState([]);
  useEffect(() => { load(); }, []);
  async function load() {
    const { data } = await axios.get('/api/training');
    setTasks(data);
  }
  async function complete(id) {
    await axios.post(`/api/training/${id}/complete`);
    load();
  }
  return (
    <div className="p-8 space-y-4">
      <h1 className="text-2xl font-bold">My SOP Training</h1>
      {tasks.map(t => (
        <div key={t.id} className="border p-4 rounded flex justify-between items-center">
          <div>
            <p className="font-semibold">{t.title}</p>
            <p className="text-xs text-gray-500">Status: {t.status}</p>
          </div>
          {t.status === 'Pending' && <Button size="sm" onClick={() => complete(t.id)}>Mark Completed</Button>}
          {t.status === 'Completed' && <span className="text-green-600 text-sm">✔ Completed</span>}
        </div>
      ))}
      {tasks.length === 0 && <p>No training tasks assigned.</p>}
    </div>
  );
}

//----------------------------------------------------------------
// 🔗 Integration steps
//----------------------------------------------------------------
// 1. Supabase tables:
//    • training_tasks (id uuid pk, tenant_id uuid, user_id uuid, doc_id uuid, title text, status text, completed_at timestamp, created_at timestamp default now())
// 2. server/index.js →
//    import trainingRoutes from './routes/training.js';
//    app.use('/api/training', trainingRoutes);
// 3. Update lifecycle route: after moving to 'Effective', call createTrainingTasks()
// 4. client routing: add <TrainingTasks/> page in nav/dashboard.
// ───────────────────────────────────────────────────────────────
