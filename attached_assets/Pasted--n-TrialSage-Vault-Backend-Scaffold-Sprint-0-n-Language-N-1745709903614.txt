// ==============================\n// TrialSage Vault™ – Backend Scaffold (Sprint‑0)\n// Language: Node.js (ESM) + Express 5, PostgreSQL via Knex\n// Multi‑tenant: CRO → Client → Program → Study\n// ==============================\n\n/* ---------- package.json ---------- */\n{\n  "name": "trialsage-backend",\n  "version": "0.0.1",\n  "type": "module",\n  "scripts": {\n    "dev": "nodemon src/app.js",\n    "start": "node src/app.js"\n  },\n  "dependencies": {\n    "cors": "^2.8.5",\n    "dotenv": "^10.0.0",\n    "express": "^5.0.0-beta.1",\n    "jsonwebtoken": "^9.0.0",\n    "knex": "^3.1.0",\n    "pg": "^8.11.3",\n    "@supabase/supabase-js": "^2.39.5"\n  },\n  "devDependencies": {\n    "nodemon": "^3.0.2"\n  }\n}\n\n/* ---------- .env.example ---------- */\nPORT=5000\nDATABASE_URL=postgresql://user:pass@host:5432/db\nSUPABASE_URL=https://yourproj.supabase.co\nSUPABASE_SERVICE_KEY=service_role_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nJWT_SECRET=some_long_random_string\n\n/* ---------- src/app.js ---------- */\nimport express from 'express';\nimport cors from 'cors';\nimport 'dotenv/config';\nimport programsRouter from './routes/programs.js';\nimport { requireAuth } from './middleware/auth.js';\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// health‑check\napp.get('/api/health', (_req,res)=>res.json({status:'ok'}));\n\n// secured routes\napp.use('/api/programs', requireAuth, programsRouter);\n// (mount studies, orgs, vault etc. similarly)\n\n// global error handler\napp.use((err, _req, res, _next)=>{\n  console.error(err);\n  res.status(500).json({message:'Server error'});\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, ()=>console.log(`API listening on ${PORT}`));\n\n/* ---------- src/db.js ---------- */\nimport knex from 'knex';\nimport 'dotenv/config';\nconst db = knex({ client:'pg', connection: process.env.DATABASE_URL });\nexport default db;\n\n/* ---------- src/middleware/auth.js ---------- */\nimport { createClient } from '@supabase/supabase-js';\nimport 'dotenv/config';\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);\n\nexport async function requireAuth(req,res,next){\n  const token = req.headers.authorization?.split(' ')[1];\n  if(!token) return res.sendStatus(401);\n  try{\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    if(error||!user) throw error;\n    // TODO: fetch org & role mapping from DB (UserOrganization)\n    req.user = { id:user.id, email:user.email, orgId: user.user_metadata?.org_id, role: user.user_metadata?.role };\n    return next();\n  }catch(err){\n    return res.sendStatus(401);\n  }\n}\n\n/* ---------- src/routes/programs.js ---------- */\nimport { Router } from 'express';\nimport { listPrograms, createProgram } from '../controllers/programController.js';\nconst router = Router();\nrouter.get('/', listPrograms);          // GET /api/programs\nrouter.post('/', createProgram);        // POST /api/programs\nexport default router;\n\n/* ---------- src/controllers/programController.js ---------- */\nimport db from '../db.js';\nexport async function listPrograms(req,res){\n  try{\n    const progs = await db('programs').where({ organization_id: req.user.orgId }).select('*');\n    res.json(progs);\n  }catch(err){ res.status(500).json({message:'DB error'}); }\n}\nexport async function createProgram(req,res){\n  const { name, description } = req.body;\n  if(!name) return res.status(400).json({message:'Name required'});\n  try{\n    const [prog] = await db('programs').insert({ name, description, organization_id: req.user.orgId }).returning('*');\n    res.status(201).json(prog);\n  }catch(err){ res.status(500).json({message:'DB error'}); }\n}\n\n/* ---------- Knex migration (example)  ---------- */\n// migrations/001_create_core_tables.sql\nCREATE TABLE organizations (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  type TEXT NOT NULL, -- 'CRO' | 'CLIENT'\n  created_at TIMESTAMPTZ DEFAULT now()\n);\nCREATE TABLE users (\n  id UUID PRIMARY KEY, -- Supabase UID\n  email TEXT NOT NULL\n);\nCREATE TABLE user_organizations (\n  user_id UUID REFERENCES users(id),\n  org_id UUID REFERENCES organizations(id),\n  role TEXT NOT NULL,\n  PRIMARY KEY(user_id, org_id)\n);\nCREATE TABLE programs (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  description TEXT,\n  organization_id UUID REFERENCES organizations(id),\n  created_at TIMESTAMPTZ DEFAULT now()\n);\nCREATE TABLE studies (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  program_id UUID REFERENCES programs(id),\n  phase TEXT,\n  created_at TIMESTAMPTZ DEFAULT now()\n);\n/* add more tables as needed */\n\n// ==============================\n// END BACKEND SCAFFOLD
