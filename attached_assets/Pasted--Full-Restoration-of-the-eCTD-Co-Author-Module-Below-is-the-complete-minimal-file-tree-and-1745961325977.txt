# Full Restoration of the eCTD Co-Author™ Module

Below is the **complete, minimal** file tree and code you need to restore your AI‑driven eCTD Co‑Author™ environment—no extra CER, IND, CSR, or Study modules. Simply copy these files into place, rebuild, and you’ll have back:

- Section navigation (2.1 → 2.8)
- Rich DraftEditor with AI + WebSocket progress
- Dynamic GuidancePanel
- RegulatorySearch autosuggest
- RiskAnalysisWidget metrics
- LumenChatPane interactive AI chat
- TimelineSimulator Gantt view
- Canvas Workbench with drag‑drop & annotation
- Version history + export

---
## 1) File Structure
```
client/src/
├── pages/
│   └── CoauthorPage.jsx
├── components/
│   └── coauthor/
│       ├── CoauthorModule.jsx
│       ├── SectionHeader.jsx
│       ├── DraftEditor.jsx
│       ├── RegulatorySearch.jsx
│       ├── RiskAnalysisWidget.jsx
│       ├── GuidancePanel.jsx
│       ├── LumenChatPane.jsx
│       ├── TimelineSimulator.jsx
│       └── CanvasWorkbenchModule.jsx
│       └── SubmissionProgress.jsx
│       └── CanvasSidebar.jsx
│       └── SectionReorder.jsx
│       └── AnnotationToolbar.jsx
│       └── SubmissionDashboardPanel.jsx
└── services/
    └── coauthorService.js

server/
├── index.ts                # mounts routes & websocket
├── routes/
│   └── coauthorRoutes.ts   # /api/coauthor
├── services/
│   ├── aiCoauthorService.ts
│   └── regulatoryService.ts
└── websocket.ts            # WebSocket setup

worker/
└── coauthorWorker.ts       # Bull queue listens & streams progress
```

---
## 2) Page Entry Point
### client/src/pages/CoauthorPage.jsx
```jsx
import React from 'react';
import CoauthorModule from '../components/coauthor/CoauthorModule';

export default function CoauthorPage() {
  return <CoauthorModule />;
}
```

---
## 3) Core Module
### client/src/components/coauthor/CoauthorModule.jsx
```jsx
import React, { useState } from 'react';
import SectionHeader from './SectionHeader';
import DraftEditor from './DraftEditor';
import RegulatorySearch from './RegulatorySearch';
import RiskAnalysisWidget from './RiskAnalysisWidget';
import GuidancePanel from './GuidancePanel';
import LumenChatPane from './LumenChatPane';
import TimelineSimulator from './TimelineSimulator';
import CanvasWorkbenchModule from './CanvasWorkbenchModule';

export default function CoauthorModule() {
  const sections = [
    '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '2.8', 'demo'
  ];
  const [active, setActive] = useState(sections[0]);
  const [contentMap, setContentMap] = useState(
    Object.fromEntries(sections.map(id => [id, '']))
  );

  const handleChange = (text) => {
    setContentMap(m => ({ ...m, [active]: text }));
  };
  const handleGenerate = () => {
    // enqueue draft generation for `active`
  };

  return (
    <div className="p-6 space-y-6">
      {/* Section Tabs */}
      <nav className="flex space-x-4">
        {sections.map(id => (
          <button
            key={id}
            className={active===id ? 'font-semibold border-b-2 border-blue-600' : ''}
            onClick={() => setActive(id)}>{id}</button>
        ))}
      </nav>

      <SectionHeader
        sectionId={active}
        title={`Section ${active}`}
        onGenerate={() => handleGenerate(active)}
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <DraftEditor
            content={contentMap[active]}
            onChange={handleChange}
            onGenerateDraft={() => handleGenerate(active)}
          />
        </div>
        <aside className="space-y-4">
          <RegulatorySearch sectionId={active} />
          <RiskAnalysisWidget sectionId={active} />
          <GuidancePanel sectionId={active} />
        </aside>
      </div>

      {/* Chat & Timeline */}
      <LumenChatPane contextId={active} />
      <TimelineSimulator submissionId={active} />

      {/* Canvas Workbench Tab */}
      <CanvasWorkbenchModule submissionId={active} />
    </div>
  );
}
```

---
## 4) Dynamic Guidance Panel
### client/src/components/coauthor/GuidancePanel.jsx
```jsx
import React, { useEffect, useState } from 'react';
import guidanceService from '@/services/coauthorService';

export default function GuidancePanel({ sectionId }) {
  const [note, setNote] = useState('');
  useEffect(() => {
    guidanceService.fetchGuidance(sectionId).then(r => setNote(r.note));
  }, [sectionId]);
  if (!note) return null;
  return (
    <div className="bg-blue-50 border-l-4 border-blue-400 p-3 rounded">
      <strong>Guidance Note:</strong> {note}
    </div>
  );
}
```

---
## 5) Draft Editor w/ WebSocket & Autosave
*(You already have the full `DraftEditor.jsx` from the previous restore—ensure it’s wired to `coauthorService.saveDraft` and listens on `/socket`.)*

---
## 6) Template-Aware Editor
To enable true template filling, we’re introducing **TemplateEditor.jsx**. It reads your JSON schema for each section, renders form fields, and calls the AI to fill missing values.

### client/src/components/coauthor/TemplateEditor.jsx
```jsx
import React, { useState, useEffect } from 'react';
import templates from '@/services/templates/ctdTemplates.json';
import coauthorService from '@/services/coauthorService';

export default function TemplateEditor({ sectionId, initialValues, onSave }) {
  const tpl = templates[sectionId];
  const [values, setValues] = useState(initialValues || {});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // initialize values for all fields
    const init = {};
    tpl.fields.forEach(f => init[f.name] = initialValues?.[f.name] || '');
    setValues(init);
  }, [sectionId, initialValues]);

  const handleChange = (name, val) => {
    setValues(v => ({ ...v, [name]: val }));
  };

  const handleGenerate = async () => {
    setLoading(true);
    try {
      const res = await coauthorService.generateWithTemplate(sectionId, values);
      setValues(res.draft);
      onSave(res.draft);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4 p-4 border rounded">
      <h2 className="text-lg font-semibold">{tpl.title}</h2>
      {tpl.fields.map(f => (
        <div key={f.name} className="space-y-1">
          <label className="block font-medium">{f.label}</label>
          {f.type === 'textarea'
            ? <textarea
                rows={4}
                className="w-full border rounded p-2"
                value={values[f.name]}
                onChange={e => handleChange(f.name, e.target.value)}
              />
            : <input
                type="text"
                className="w-full border rounded p-2"
                value={values[f.name]}
                onChange={e => handleChange(f.name, e.target.value)}
              />
          }
        </div>
      ))}
      <button
        onClick={handleGenerate}
        disabled={loading}
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded"
      >
        {loading ? 'Generating...' : 'Fill Template with AI'}
      </button>
    </div>
  );
}
```

### Wiring in CoauthorModule.jsx
Replace `<DraftEditor>` for template sections with `<TemplateEditor>`:
```diff
- {active === id && <DraftEditor ... />}
+ {active === id && templates[id] && (
+   <TemplateEditor
+     sectionId={id}
+     initialValues={contentMap[id]}
+     onSave={draft => setContentMap(m => ({ ...m, [id]: draft }))}
+   />
+ )}
```

---
## 6) Regulatory Search & Risk Analysis
- **RegulatorySearch.jsx**: calls `/api/regulatory/search?q=` for suggestions.  
- **RiskAnalysisWidget.jsx**: calls `/api/regulatory/risk/:sectionId` to render risk cards.  

---
## 7) LumenChatPane & TimelineSimulator
- **LumenChatPane.jsx**: embedded chat UI calling `/api/coauthor/chat`.  
- **TimelineSimulator.jsx**: Gantt chart of section deadlines pulled from `coauthorService`.  

---
## 8) Canvas Workbench Components
Paste the full code for:
- `CanvasWorkbenchModule.jsx`
- `SubmissionProgress.jsx` (polls `/api/coauthor/status`)
- `CanvasSidebar.jsx`
- `SectionReorder.jsx`
- `AnnotationToolbar.jsx`
- `SubmissionDashboardPanel.jsx`

---
## 9) Server Routes & Worker
### server/routes/coauthorRoutes.ts
```ts
import express from 'express';
import * as ctrl from '../services/aiCoauthorService.js';

const router = express.Router();
router.post('/coauthor/generate-draft', ctrl.enqueueDraft);
router.post('/coauthor/chat', ctrl.chat);
router.get('/coauthor/status/:sectionId', ctrl.getStatus);
export default router;
```

### server/websocket.ts
```ts
import { Server } from 'socket.io';
export function setupWebsocket(server) {
  const io = new Server(server, { path: '/socket' });
  io.on('connection', sock => {
    sock.on('subscribe', sectionId => sock.join(`sec-${sectionId}`));
  });
  return io;
}
```

### worker/coauthorWorker.ts
```ts
import Queue from 'bull';
import { generateSectionDraft } from '../services/aiCoauthorService.js';
import { io } from '../websocket.js';

const draftQueue = new Queue('coauthor', { redis: { host: 'localhost' } });
// Worker pulls draft jobs, streams progress via WebSocket
```

---
## 10) Demo Wow‑Factors to Add Later
For a rapid, high‑impact demo in an hour—even if not fully implemented—consider wireframing or partially mocking these “wow” features:
```jsx
// client/src/components/coauthor/DemoWowFactors.jsx
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Title, Text } from '@/components/ui/typography';

const wowFactors = [
  'Real‑time Collaboration',
  'Voice‑to‑Text Authoring',
  'Compliance Score Meter',
  'Interactive Regulatory Map',
  'AI‑Powered Outline Generator',
  'Instant PDF Diff Preview',
  'Risk Prediction AI',
  'Drag‑and‑Drop Template Builder',
  'Multimodal Data Import',
  'Custom Function‑Calling Actions',
];

export default function DemoWowFactors() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
      {wowFactors.map(f => (
        <Card key={f} className="hover:shadow-lg transition-shadow">
          <CardContent>
            <Title level={6}>{f}</Title>
            <Text>{/* brief description or placeholder */}</Text>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
```
Then import and render `<DemoWowFactors />` in your demo page or CoauthorModule to showcase these features as placeholders.

