# backend/routes/metadata_repository.py

"""
backend/routes/metadata_repository.py

Enhanced FastAPI router for Clinical Metadata Repository (CMDR):
- CRUD operations on metadata assets: forms, terminologies, datasets, mappings, files
- Semantic and attribute-based search over repository assets
- Version history and audit trail for each asset
- Impact analysis for metadata changes
- Export of EDC blueprints and asset previews
- Enforces multitenant isolation via JWT dependency
"""

from fastapi import APIRouter, Depends, HTTPException, Query, Path, File, UploadFile
from typing import List, Optional, Union
from pydantic import BaseModel, Field
from datetime import datetime

from backend.dependencies import get_current_user
from backend.services.metadata_repository import (
    create_asset, update_asset, delete_asset, list_assets, get_asset_versions,
    get_asset_audit, semantic_search_assets, impact_analysis, export_edc_blueprint,
    preview_asset_file
)

router = APIRouter()

# Common asset fields
class AssetBase(BaseModel):
    id: str
    name: str
    module: str       # e.g., CSR, IND, CMC
    type: str         # forms | terminologies | datasets | mappings | files
    version: str
    status: str       # draft | in_progress | in_review | released
    created_at: datetime
    updated_at: datetime

# Create/update payloads
class AssetCreate(BaseModel):
    name: str
    module: str
    type: str
    version: str
    status: Optional[str] = "draft"

class AssetUpdate(BaseModel):
    name: Optional[str]
    version: Optional[str]
    status: Optional[str]

# Semantic search result
class SemanticSearchResult(BaseModel):
    id: str
    name: str
    snippet: str
    module: str
    type: str

# Impact analysis response
class ImpactResponse(BaseModel):
    asset_id: str
    impacted_assets: List[str]
    summary: str

# Routes

@router.get("/api/metadata/{asset_type}", response_model=List[AssetBase], summary="List metadata assets by type")
async def list_metadata(
    asset_type: str = Path(..., description="Asset type: forms, terminologies, datasets, mappings, files"),
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await list_assets(tenant_id, asset_type)

@router.post("/api/metadata/{asset_type}", response_model=AssetBase, summary="Create a metadata asset")
async def create_metadata(
    asset_type: str,
    payload: AssetCreate,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await create_asset(tenant_id, asset_type, payload)

@router.put("/api/metadata/{asset_type}/{asset_id}", response_model=AssetBase, summary="Update a metadata asset")
async def update_metadata(
    asset_type: str,
    asset_id: str,
    payload: AssetUpdate,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await update_asset(tenant_id, asset_type, asset_id, payload)

@router.delete("/api/metadata/{asset_type}/{asset_id}", summary="Delete a metadata asset")
async def delete_metadata(
    asset_type: str,
    asset_id: str,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    await delete_asset(tenant_id, asset_type, asset_id)
    return {"detail": "Deleted"}

@router.get("/api/metadata/{asset_type}/{asset_id}/versions", response_model=List[AssetBase], summary="Get version history of an asset")
async def asset_versions(
    asset_type: str,
    asset_id: str,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await get_asset_versions(tenant_id, asset_type, asset_id)

@router.get("/api/metadata/{asset_type}/{asset_id}/audit", summary="Get audit trail of an asset")
async def asset_audit(
    asset_type: str,
    asset_id: str,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await get_asset_audit(tenant_id, asset_type, asset_id)

@router.get("/api/metadata/search", response_model=List[SemanticSearchResult], summary="Semantic search across metadata assets")
async def metadata_search(
    q: str = Query(..., description="Search query"),
    module: Optional[str] = Query(None),
    type_filter: Optional[str] = Query(None),
    limit: int = Query(20, ge=1, le=100),
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await semantic_search_assets(tenant_id, q, module, type_filter, limit)

@router.get("/api/metadata/impact", response_model=ImpactResponse, summary="Impact analysis for metadata change")
async def metadata_impact(
    asset_id: str = Query(..., description="Asset ID for analysis"),
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    return await impact_analysis(tenant_id, asset_id)

@router.post("/api/metadata/export-edc", response_model=dict, summary="Export CRF blueprint for EDC build")
async def metadata_export_edc(
    form_id: str = Query(..., description="Form asset ID"),
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    package_url = await export_edc_blueprint(tenant_id, form_id)
    return {"packageUrl": package_url}

@router.get("/api/metadata/files/{asset_id}/preview", summary="Preview metadata file inline")
async def metadata_preview_file(
    asset_id: str,
    current_user=Depends(get_current_user)
):
    tenant_id = current_user.tenant_id
    file_stream, mime_type = await preview_asset_file(tenant_id, asset_id)
    return StreamingResponse(file_stream, media_type=mime_type)
