// SubmissionBuilder.tsx – drag‑drop tree with QC badges, bulk approve & live QC WebSocket
import React, { useEffect, useState, useCallback } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import { CheckCircle, XCircle } from 'lucide-react';
import { toast } from 'react-toastify';
import update from 'immutability-helper';
import 'react-toastify/dist/ReactToastify.css';

const REGION_FOLDERS: Record<string, string[]> = {
  FDA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  EMA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  PMDA: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp‑annex'],
};

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

export default function SubmissionBuilder({ region = 'FDA' }) {
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);
  const [selected, setSelected] = useState<Set<number>>(new Set());

  // live QC updates via WS
  useEffect(() => {
    const ws = new WebSocket(`${window.location.origin.replace('http','ws')}/ws/qc`);
    ws.onmessage = evt => {
      const { id, status } = JSON.parse(evt.data);
      setTree(prev => prev.map(n => n.id === id ? { ...n, data: { ...n.data!, qc_json: { status } } } : n));
    };
    return () => ws.close();
  }, []);

  useEffect(() => {
    (async () => {
      const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
      const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
      const folders = REGION_FOLDERS[region].map((m, idx) => ({ id: 10_000 + idx, parent: 0, text: m, droppable: true }));
      const items = docs.map(d => ({
        id: d.id,
        parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
        text: d.title,
        droppable: false,
        data: d,
      }));
      setTree([root, ...folders, ...items]);
      setLoading(false);
    })();
  }, [region]);
  ... // rest unchanged(url: string) {
  const r = await fetch(url);
  if (!r.ok) throw new Error('fetch failed');
  return r.json();
}
