# frontend/components/csr/CSRIngest.tsx

```tsx
import React, { useCallback } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useDropzone } from 'react-dropzone';
import axiosWithToken from '../../utils/axiosWithToken';
import { toast } from 'react-hot-toast';
import clsx from 'clsx';

export default function CSRIngest() {
  const queryClient = useQueryClient();
  const mutation = useMutation(
    (files: File[]) => {
      const form = new FormData();
      files.forEach((f) => form.append('files', f));
      return axiosWithToken.post<{ run_id: string }>('/api/csr/ingest', form, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
    },
    {
      onMutate: () => toast.loading('Uploading and processing CSRs…'),
      onSuccess: (data) => {
        toast.dismiss();
        toast.success(`Ingestion queued: run ${data.data.run_id}`);
        // refetch search / failmap if needed
        queryClient.invalidateQueries(['csrSearch']);
      },
      onError: (err: any) => {
        toast.dismiss();
        toast.error(`Ingestion failed: ${err.message}`);
      }
    }
  );

  const onDrop = useCallback((acceptedFiles: File[]) => {
    mutation.mutate(acceptedFiles);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop, accept: { 'application/pdf': ['.pdf'] }, multiple: true
  });

  return (
    <div
      {...getRootProps()}
      className={clsx(
        'p-8 border-2 border-dashed rounded-lg text-center transition',
        isDragActive ? 'border-green-400 bg-green-50' : 'border-gray-300'
      )}
    >
      <input {...getInputProps()} />
      {isDragActive
        ? <p className="text-green-700">Drop CSRs here…</p>
        : <p className="text-gray-600">Drag & drop CSR PDFs here, or click to select files</p>
      }
      <button
        onClick={() => {}}
        disabled={mutation.isLoading}
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 disabled:opacity-50"
      >
        {mutation.isLoading ? 'Processing…' : 'Start Ingestion'}
      </button>
    </div>
  );
}
frontend/components/csr/CSRSearchBar.tsx
tsx
Always show details

Copy
import React, { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { debounce } from 'lodash';
import clsx from 'clsx';

export default function CSRSearchBar() {
  const [q, setQ] = useState('');
  const { data, isFetching } = useQuery(
    ['csrSearch', q],
    () => axiosWithToken.get('/api/csr/search', { params: { q, limit: 10 } }).then(res => res.data),
    {
      enabled: q.length > 2,
      staleTime: 1000 * 60,
    }
  );

  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQ(e.target.value);
  };

  return (
    <div className="relative mb-4">
      <input
        type="search"
        value={q}
        onChange={onChange}
        placeholder="Search within CSRs…"
        className="w-full border rounded p-2 focus:ring focus:border-blue-300"
      />
      {isFetching && <div className="absolute top-2 right-3 animate-spin">⏳</div>}
      {data && (
        <ul className="absolute z-10 w-full bg-white border rounded mt-1 max-h-60 overflow-auto">
          {data.map((r: any) => (
            <li key={r.id} className="p-2 hover:bg-gray-100">
              <span className="font-semibold">{r.section}</span> – {r.snippet} <em className="text-xs text-gray-500">(pg {r.page})</em>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
frontend/components/csr/CSRChatPanel.tsx
tsx
Always show details

Copy
import React, { useState, useEffect, useRef } from 'react';
import { useMutation } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { toast } from 'react-hot-toast';

interface Props { fileId?: string; }

export default function CSRChatPanel({ fileId }: Props) {
  const [messages, setMessages] = useState<{from: 'user'|'ai', text: string}[]>([]);
  const [input, setInput] = useState('');
  const bottomRef = useRef<HTMLDivElement>(null);

  const mutation = useMutation(
    () => axiosWithToken.post('/api/csr/chat', { question: input, top_k: 5 }),
    {
      onMutate: () => setMessages(msgs => [...msgs, { from: 'user', text: input }]),
      onSuccess: (res) => {
        setMessages(msgs => [...msgs, { from: 'ai', text: res.data.answer }]);
        toast.success('Answer received');
      },
      onError: () => toast.error('AI failed'),
      onSettled: () => setInput('')
    }
  );

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const send = () => {
    if (input.trim()) mutation.mutate();
  };

  return (
    <div className="flex flex-col h-full border rounded">
      <div className="flex-1 p-4 overflow-auto space-y-3">
        {messages.map((m, idx) => (
          <div key={idx} className={clsx(
            'p-2 rounded',
            m.from === 'ai' ? 'bg-gray-100 text-gray-800 self-start' : 'bg-blue-100 text-blue-800 self-end'
          )}>
            {m.text}
          </div>
        ))}
        <div ref={bottomRef} />
      </div>
      <div className="p-3 border-t flex">
        <input
          className="flex-1 border rounded-l p-2 focus:ring"
          value={input}
          onChange={e => setInput(e.target.value)}
          placeholder="Ask about CSRs…"
        />
        <button
          onClick={send}
          disabled={mutation.isLoading}
          className="px-4 bg-green-500 text-white rounded-r hover:bg-green-600 disabled:opacity-50"
        >
          Send
        </button>
      </div>
    </div>
);
}
frontend/components/csr/FailureMapVisualizer.tsx
tsx
Always show details

Copy
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

export default function FailureMapVisualizer() {
  const [version, setVersion] = useState<string|undefined>(undefined);
  const { data, isLoading } = useQuery(
    ['csrFailmap', version],
    () => axiosWithToken.get('/api/csr/failmap', { params: { version } }).then(res => res.data),
    { enabled: true }
  );

  return (
    <div className="h-64">
      {isLoading ? (
        <div className="flex items-center justify-center h-full">Loading…</div>
      ) : (
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={data}>
            <XAxis dataKey="issue" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="frequency" fill="#f59e0b" />
          </BarChart>
        </ResponsiveContainer>
      )}
    </div>
);
}
frontend/components/metadata/MetadataList.tsx
tsx
Always show details

Copy
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { useTable } from 'react-table';

interface Props { assetType: string; onSelect: (id: string) => void; }

export default function MetadataList({ assetType, onSelect }: Props) {
  const { data, isLoading } = useQuery(
    ['metadataList', assetType],
    () => axiosWithToken.get(`/api/metadata/${assetType}`).then(res => res.data)
  );

  const columns = React.useMemo(() => [
    { Header: 'Name', accessor: 'name' },
    { Header: 'Version', accessor: 'version' },
    { Header: 'Status', accessor: 'status' },
    { Header: 'Updated', accessor: 'updated_at' },
  ], []);

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
    columns, data: data || []
  });

  if (isLoading) return <div>Loading…</div>;

  return (
    <table {...getTableProps()} className="w-full text-sm">
      <thead>
        {headerGroups.map(hg => (
          <tr {...hg.getHeaderGroupProps()}>
            {hg.headers.map(col => (
              <th {...col.getHeaderProps()} className="p-2 text-left">{col.render('Header')}</th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody {...getTableBodyProps()}>
        {rows.map(row => {
          prepareRow(row);
          return (
            <tr
              {...row.getRowProps()}
              className="cursor-pointer hover:bg-gray-100"
              onClick={() => onSelect(row.original.id)}
            >
              {row.cells.map(cell => (
                <td {...cell.getCellProps()} className="p-2">{cell.render('Cell')}</td>
              ))}
            </tr>
          );
        })}
      </tbody>
    </table>
  );
}
frontend/components/metadata/AssetDetail.tsx
tsx
Always show details

Copy
import React from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { Timeline, TimelineItem } from 'vertical-timeline-component-for-react';
import { toast } from 'react-hot-toast';

interface Props { assetType: string; assetId: string; }

export default function AssetDetail({ assetType, assetId }: Props) {
  const { data } = useQuery(
    ['assetDetail', assetType, assetId],
    () => axiosWithToken.get(`/api/metadata/${assetType}/${assetId}`).then(res => res.data)
  );

  const versionsQuery = useQuery(
    ['assetVersions', assetType, assetId],
    () => axiosWithToken.get(`/api/metadata/${assetType}/${assetId}/versions`).then(res => res.data)
  );

  const auditQuery = useQuery(
    ['assetAudit', assetType, assetId],
    () => axiosWithToken.get(`/api/metadata/${assetType}/${assetId}/audit`).then(res => res.data)
  );

  const exportMut = useMutation(
    () => axiosWithToken.post(`/api/metadata/export-edc?form_id=${assetId}`),
    {
      onSuccess: res => {
        toast.success('EDC package ready');
        window.open(res.data.packageUrl, '_blank');
      },
      onError: () => toast.error('Export failed')
    }
  );

  if (!data) return <div>Loading asset…</div>;

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">{data.name}</h2>
      <div className="flex space-x-4">
        <button
          onClick={() => exportMut.mutate()}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500"
        >
          Export EDC Blueprint
        </button>
      </div>

      <section>
        <h3 className="font-semibold mb-2">Version History</h3>
        {versionsQuery.data ? (
          <Timeline lineColor="#6b7280">
            {versionsQuery.data.map((v: any, idx: number) => (
              <TimelineItem
                key={v.id}
                dateText={v.version}
                style={{ color: '#6b7280' }}
              >
                <p>Status: {v.status}</p>
                <p>Updated: {new Date(v.updated_at).toLocaleString()}</p>
              </TimelineItem>
            ))}
          </Timeline>
        ) : <div>Loading versions…</div>}
      </section>

      <section>
        <h3 className="font-semibold mb-2">Audit Trail</h3>
        {auditQuery.data ? (
          <ul className="list-disc list-inside">
            {auditQuery.data.map((a: any) => (
              <li key={a.timestamp}>{a.user}: {a.action} on {new Date(a.timestamp).toLocaleString()}</li>
            ))}
          </ul>
        ) : <div>Loading audit…</div>}
      </section>
    </div>
  );
}
Replit Agent Setup

bash
Always show details

Copy
npm install @tanstack/react-query react-dropzone lodash react-table vertical-timeline-component-for-react
Always show details

Copy
  Cell In[7], line 54
    ? <p className="text-green-700">Drop CSRs here…</p>
                                                  ^
SyntaxError: invalid character '…' (U+2026)

Replit Agent Instructions

Install additional frontend libraries

bash
Copy
Edit
npm install @tanstack/react-query react-dropzone lodash react-table vertical-timeline-component-for-react
Ensure React Query setup

Wrap your app in <QueryClientProvider> in frontend/pages/_app.tsx.

Create/merge the enhanced CSR components under frontend/components/csr/:

CSRIngest.tsx

CSRSearchBar.tsx

CSRChatPanel.tsx

FailureMapVisualizer.tsx

Create/merge the CMDR metadata UI under frontend/components/metadata/:

MetadataList.tsx

AssetDetail.tsx

Wire pages:

frontend/pages/csr/index.tsx → import and compose the four CSR components.

frontend/pages/metadata/index.tsx → import and compose MetadataList + AssetDetail.

Verify API availability: /api/csr/... & /api/metadata/... must be live.

Test end-to-end: ingestion → search → chat → fail-map; and metadata list → detail → audit → export.

<details> <summary>Canvas: CSRIngest.tsx</summary>
tsx
Copy
Edit
// frontend/components/csr/CSRIngest.tsx
import React, { useCallback } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useDropzone } from 'react-dropzone';
import axiosWithToken from '../../utils/axiosWithToken';
import { toast } from 'react-hot-toast';
import clsx from 'clsx';

export default function CSRIngest() {
  const queryClient = useQueryClient();
  const mutation = useMutation(
    (files: File[]) => {
      const form = new FormData();
      files.forEach((f) => form.append('files', f));
      return axiosWithToken.post<{ run_id: string }>('/api/csr/ingest', form, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
    },
    {
      onMutate: () => toast.loading('Uploading and processing CSRs...'),
      onSuccess: (data) => {
        toast.dismiss();
        toast.success(`Ingestion queued: run ${data.data.run_id}`);
        queryClient.invalidateQueries(['csrSearch']);
      },
      onError: (err: any) => {
        toast.dismiss();
        toast.error(`Ingestion failed: ${err.message}`);
      }
    }
  );

  const onDrop = useCallback((acceptedFiles: File[]) => {
    mutation.mutate(acceptedFiles);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop, accept: { 'application/pdf': ['.pdf'] }, multiple: true
  });

  return (
    <div
      {...getRootProps()}
      className={clsx(
        'p-8 border-2 border-dashed rounded-lg text-center transition',
        isDragActive ? 'border-green-400 bg-green-50' : 'border-gray-300'
      )}
    >
      <input {...getInputProps()} />
      {isDragActive
        ? <p className="text-green-700">Drop CSRs here...</p>
        : <p className="text-gray-600">Drag & drop CSR PDFs here, or click to select files</p>
      }
      <button
        disabled={mutation.isLoading}
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 disabled:opacity-50"
      >
        {mutation.isLoading ? 'Processing...' : 'Start Ingestion'}
      </button>
    </div>
  );
}
</details> <details> <summary>Canvas: CSRSearchBar.tsx</summary>
tsx
Copy
Edit
// frontend/components/csr/CSRSearchBar.tsx
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import clsx from 'clsx';

export default function CSRSearchBar() {
  const [q, setQ] = useState('');
  const { data, isFetching } = useQuery(
    ['csrSearch', q],
    () => axiosWithToken.get('/api/csr/search', { params: { q, limit: 10 } }).then(res => res.data),
    {
      enabled: q.length > 2,
      staleTime: 60000,
    }
  );

  return (
    <div className="relative mb-4">
      <input
        type="search"
        value={q}
        onChange={e => setQ(e.target.value)}
        placeholder="Search within CSRs..."
        className="w-full border rounded p-2 focus:ring focus:border-blue-300"
      />
      {isFetching && <div className="absolute top-2 right-3 animate-spin">⏳</div>}
      {data && (
        <ul className="absolute z-10 w-full bg-white border rounded mt-1 max-h-60 overflow-auto">
          {data.map((r: any) => (
            <li key={r.id} className="p-2 hover:bg-gray-100">
              <span className="font-semibold">{r.section}</span> – {r.snippet}
              <em className="text-xs text-gray-500"> (pg {r.page})</em>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
</details> <details> <summary>Canvas: CSRChatPanel.tsx</summary>
tsx
Copy
Edit
// frontend/components/csr/CSRChatPanel.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useMutation } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { toast } from 'react-hot-toast';
import clsx from 'clsx';

export default function CSRChatPanel() {
  const [messages, setMessages] = useState<{from:'user'|'ai',text:string}[]>([]);
  const [input, setInput] = useState('');
  const bottomRef = useRef<HTMLDivElement>(null);

  const mutation = useMutation(
    () => axiosWithToken.post('/api/csr/chat', { question: input, top_k: 5 }),
    {
      onMutate: () => setMessages(m => [...m, { from:'user', text: input }]),
      onSuccess: res => {
        setMessages(m => [...m, { from:'ai', text: res.data.answer }]);
        toast.success('Answer received');
      },
      onError: () => toast.error('AI failed'),
      onSettled: () => setInput('')
    }
  );

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior:'smooth' });
  }, [messages]);

  return (
    <div className="flex flex-col h-full border rounded">
      <div className="flex-1 p-4 overflow-auto space-y-3">
        {messages.map((m, i) => (
          <div key={i} className={clsx(
            'p-2 rounded max-w-xs',
            m.from==='ai' ? 'bg-gray-100 self-start':'bg-blue-100 self-end'
          )}>{m.text}</div>
        ))}
        <div ref={bottomRef} />
      </div>
      <div className="p-3 border-t flex">
        <input
          className="flex-1 border rounded-l p-2 focus:ring"
          value={input}
          onChange={e=>setInput(e.target.value)}
          placeholder="Ask about CSRs..."
        />
        <button
          onClick={()=>mutation.mutate()}
          disabled={mutation.isLoading || !input.trim()}
          className="px-4 bg-green-500 text-white rounded-r hover:bg-green-600 disabled:opacity-50"
        >
          Send
        </button>
      </div>
    </div>
  );
}
</details> <details> <summary>Canvas: FailureMapVisualizer.tsx</summary>
tsx
Copy
Edit
// frontend/components/csr/FailureMapVisualizer.tsx
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer
} from 'recharts';

export default function FailureMapVisualizer() {
  const { data, isLoading } = useQuery(
    ['csrFailmap'], 
    () => axiosWithToken.get('/api/csr/failmap').then(res=>res.data)
  );

  if (isLoading) {
    return <div className="flex items-center justify-center h-full">Loading...</div>;
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data}>
        <XAxis dataKey="issue" />
        <YAxis />
        <Tooltip />
        <Bar dataKey="frequency" fill="#f59e0b" />
      </BarChart>
    </ResponsiveContainer>
  );
}
</details> <details> <summary>Canvas: MetadataList.tsx</summary>
tsx
Copy
Edit
// frontend/components/metadata/MetadataList.tsx
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { useTable } from 'react-table';

interface Props { assetType:string; onSelect:(id:string)=>void; }

export default function MetadataList({ assetType,onSelect }:Props) {
  const { data,isLoading } = useQuery(
    ['metadataList',assetType],
    ()=>axiosWithToken.get(`/api/metadata/${assetType}`).then(r=>r.data)
  );

  const columns = React.useMemo(() => [
    { Header:'Name', accessor:'name' },
    { Header:'Version', accessor:'version' },
    { Header:'Status', accessor:'status' },
    { Header:'Updated', accessor:'updated_at' },
  ], []);

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable({ columns, data: data||[] });

  if (isLoading) return <div>Loading...</div>;

  return (
    <table {...getTableProps()} className="w-full text-sm">
      <thead>
        {headerGroups.map(hg=>(
          <tr {...hg.getHeaderGroupProps()}>
            {hg.headers.map(col=>(
              <th {...col.getHeaderProps()} className="p-2 text-left">
                {col.render('Header')}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody {...getTableBodyProps()}>
        {rows.map(row=>{
          prepareRow(row);
          return (
            <tr
              {...row.getRowProps()}
              className="cursor-pointer hover:bg-gray-100"
              onClick={()=>onSelect((row.original as any).id)}
            >
              {row.cells.map(cell=>(
                <td {...cell.getCellProps()} className="p-2">{cell.render('Cell')}</td>
              ))}
            </tr>
          );
        })}
      </tbody>
    </table>
  );
}
</details> <details> <summary>Canvas: AssetDetail.tsx</summary>
tsx
Copy
Edit
// frontend/components/metadata/AssetDetail.tsx
import React from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import axiosWithToken from '../../utils/axiosWithToken';
import { Timeline, TimelineItem } from 'vertical-timeline-component-for-react';
import { toast } from 'react-hot-toast';

interface Props { assetType:string; assetId:string; }

export default function AssetDetail({ assetType,assetId }:Props) {
  const { data } = useQuery(
    ['assetDetail',assetType,assetId],
    ()=>axiosWithToken.get(`/api/metadata/${assetType}/${assetId}`).then(r=>r.data)
  );

  const versionsQ = useQuery(
    ['assetVersions',assetType,assetId],
    ()=>axiosWithToken.get(`/api/metadata/${assetType}/${assetId}/versions`).then(r=>r.data)
  );

  const auditQ = useQuery(
    ['assetAudit',assetType,assetId],
    ()=>axiosWithToken.get(`/api/metadata/${assetType}/${assetId}/audit`).then(r=>r.data)
  );

  const exportMut = useMutation(
    ()=>axiosWithToken.post(`/api/metadata/export-edc?form_id=${assetId}`),
    {
      onSuccess:res=>{
        toast.success('EDC package ready');
        window.open(res.data.packageUrl,'_blank');
      },
      onError:()=>toast.error('Export failed')
    }
  );

  if (!data) return <div>Loading asset...</div>;

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">{data.name}</h2>
      <button
        onClick={()=>exportMut.mutate()}
        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-500"
      >
        Export EDC Blueprint
      </button>

      <section>
        <h3 className="font-semibold mb-2">Version History</h3>
        {versionsQ.data ? (
          <Timeline lineColor="#6b7280">
            {versionsQ.data.map((v:any)=>
              <TimelineItem
                key={v.id}
                dateText={v.version}
                style={{ color:'#6b7280' }}
              >
                <p>Status: {v.status}</p>
                <p>Updated: {new Date(v.updated_at).toLocaleString()}</p>
              </TimelineItem>
            )}
          </Timeline>
        ) : <div>Loading versions...</div>}
      </section>

      <section>
        <h3 className="font-semibold mb-2">Audit Trail</h3>
        {auditQ.data ? (
          <ul className="list-disc list-inside">
            {auditQ.data.map((a:any)=>
              <li key={a.timestamp}>
                {a.user}: {a.action} on {new Date(a.timestamp).toLocaleString()}
              </li>
            )}
          </ul>
        ) : <div>Loading audit...</div>}
      </section>
    </div>
);
}
</details> &#8203;:contentReference[oaicite:0]{index=0}&#8203;









Search

Deep research

Create image



ChatGPT can make mistakes. Check important info.