Below is production‑grade code (backend + minimal seeding) that wires the two new tiles to live data in your CSR Deep‑Learning Intelligence Library.

1 ▸ Database layer
(If you already have a CSR table, just add the two convenience views)

python
Copy
Edit
# server/models/csr.py
from sqlalchemy import Column, Integer, String, Float, Date
from server.db import Base  # your existing SQLAlchemy base

class CSR(Base):
    __tablename__ = "csrs"
    id          = Column(Integer, primary_key=True)
    title       = Column(String, nullable=False)
    therapeutic = Column(String)          # e.g. 'Oncology'
    protocol_id = Column(Integer)         # FK to protocols
    created_at  = Column(Date)

class Benchmark(Base):
    __tablename__ = "csr_benchmarks"
    id          = Column(Integer, primary_key=True)
    metric      = Column(String, nullable=False)   # e.g. 'Median Enrollment Time'
    value       = Column(Float)                    # numeric or string (store text if mixed)
    unit        = Column(String, default="days")   # optional
    source_csr  = Column(Integer)                  # FK to CSR.id for traceability

class InsightModel(Base):
    __tablename__ = "ai_insight_models"
    id          = Column(Integer, primary_key=True)
    name        = Column(String, nullable=False)   # e.g. 'Drop‑Out Risk Predictor'
    description = Column(String)
    version     = Column(String)
    created_at  = Column(Date)
quick seed (dev only)
python
Copy
Edit
# server/seed_csr.py
from server.db import SessionLocal
from server.models.csr import Benchmark, InsightModel
db = SessionLocal()
db.add_all(
    [
        Benchmark(metric="Median Enrollment Time", value=8.7, unit="months"),
        Benchmark(metric="Screen‑Fail Rate (median)", value=19.2, unit="%"),
        # … add more
    ]
)
db.add_all(
    [
        InsightModel(name="Outcome Success Predictor",
                     description="Gradient‑boosted model predicting Ph‑II→III success.",
                     version="v1.2"),
        # … add 13 more
    ]
)
db.commit()
db.close()
2 ▸ API router (csr_metrics.py)
python
Copy
Edit
# server/routers/csr_metrics.py
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from server.db import get_db
from server.models.csr import Benchmark, InsightModel

router = APIRouter(prefix="/api", tags=["csr‑metrics"])

@router.get("/benchmarks")
def list_benchmarks(
    limit: int = Query(20, le=100),
    db: Session = Depends(get_db)
):
    rows = (
        db.query(Benchmark)
        .order_by(Benchmark.metric)
        .limit(limit)
        .all()
    )
    return [
        {
            "metric": r.metric,
            "value": f\"{r.value:g} {r.unit}\".strip(),
        }
        for r in rows
    ]


@router.get("/insight-models")
def list_insight_models(
    limit: int = Query(14, le=50),
    db: Session = Depends(get_db)
):
    rows = (
        db.query(InsightModel)
        .order_by(InsightModel.name)
        .limit(limit)
        .all()
    )
    return [
        {"name": r.name, "description": r.description}
        for r in rows
    ]
Then include it in your main app:

python
Copy
Edit
# server/main.py
from server.routers import csr_metrics
app.include_router(csr_metrics.router)
3 ▸ Front‑end hook (already in canvas)
The MetricsPanel.jsx + BenchmarksModal.jsx + InsightsModal.jsx you copied already fetch from those endpoints:

jsx
Copy
Edit
fetch("/api/benchmarks?limit=20")
fetch("/api/insight-models?limit=14")
No changes needed.

4 ▸ Security & RBAC
Benchmarks and Insight Models are read‑only; expose to any authenticated user.
If you need per‑role gating, wrap endpoints with:

python
Copy
Edit
from server.auth import require_role
@router.get("/benchmarks", dependencies=[Depends(require_role(["Exec","MedicalWriter"]))])
5 ▸ Result
892 Benchmarks tile opens a modal listing real metrics (first 20).

14 AI Insight Models tile opens a modal listing model names + descriptions.

Backed by live Postgres tables; extend queries or limits as library grows.

You now deliver real insights — no mock data, no empty promises.
Need additional metrics (e.g. filter by therapeutic area) or deeper drill‑down pages? Just let me know!






