// /client/components/ProtocolPlanningDashboard.jsx (now includes Summary Packet Generator)
import ProtocolUploadPanel from "@/components/ProtocolUploadPanel";
import SampleSizeCalculator from "@/components/SampleSizeCalculator";
import DropoutEstimator from "@/components/DropoutEstimator";
import TrialSuccessPredictor from "@/components/TrialSuccessPredictor";
import ProtocolValidator from "@/components/ProtocolValidator";
import FixedProtocolViewer from "@/components/FixedProtocolViewer";
import ProtocolEmailer from "@/components/ProtocolEmailer";
import SummaryPacketGenerator from "@/components/SummaryPacketGenerator";
import { Button } from "@/components/ui/button";

export default function ProtocolPlanningDashboard() {
  const handleEmailReport = async () => {
    await fetch("/api/intel/scheduled-report");
    alert("Your report has been emailed to your configured address.");
  };

  const handleGenerateInd = async (section) => {
    const protocolText = prompt("Paste the protocol you want to use for IND module generation:");
    if (!protocolText) return;
    const res = await fetch("/api/intel/continue-thread", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        thread_id: null,
        study_id: "Uploaded Protocol",
        section,
        context: protocolText
      })
    });
    const data = await res.json();
    alert(`${section.toUpperCase()} Generated:\n\n` + data.content);
  };

  const handleExportDocx = async () => {
    const content = prompt("Paste the final protocol text you'd like to export as .docx:");
    if (!content) return;
    await fetch("/api/export/protocol-docx", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text: content })
    });
    window.open("/static/protocol_final.docx", "_blank");
  };

  const handleReadinessScore = async () => {
    const protocolText = prompt("Paste protocol text to evaluate readiness:");
    if (!protocolText) return;
    const res = await fetch("/api/validate-protocol", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: protocolText })
    });
    const data = await res.json();
    alert(`Regulatory Readiness Score: ${data.score}/100\n\nIssues:\n${data.issues.join("\n")}`);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-6">
      <div className="space-y-4">
        <h2 className="text-xl font-bold text-gray-800">📄 Protocol Upload + Analysis</h2>
        <ProtocolUploadPanel />

        <h2 className="text-xl font-bold text-gray-800">📉 Dropout Estimator</h2>
        <DropoutEstimator />

        <h2 className="text-xl font-bold text-gray-800">🛡️ Protocol Validator</h2>
        <ProtocolValidator />

        <h2 className="text-xl font-bold text-gray-800">🧠 AI-Repaired Protocol</h2>
        <FixedProtocolViewer originalText="Paste or pull your latest protocol content here." />

        <div className="space-y-2 pt-2">
          <Button variant="outline" onClick={() => handleGenerateInd("2.5")}>📄 Generate IND Module 2.5</Button>
          <Button variant="outline" onClick={() => handleGenerateInd("2.7")}>📄 Generate IND Module 2.7</Button>
          <Button variant="outline" onClick={handleExportDocx}>📝 Export Final Protocol (.docx)</Button>
          <Button variant="outline" onClick={handleReadinessScore}>🧪 Regulatory Readiness Score</Button>
        </div>

        <h2 className="text-xl font-bold text-gray-800">📤 Send Final Protocol</h2>
        <ProtocolEmailer />

        <h2 className="text-xl font-bold text-gray-800">📦 Generate Clinical Summary Packet</h2>
        <SummaryPacketGenerator />

        <div className="flex gap-4 pt-4">
          <a
            href="/static/latest_report.pdf"
            className="text-sm text-blue-600 underline hover:text-blue-800"
            target="_blank"
            rel="noopener noreferrer"
          >
            📄 Download Planning Report (PDF)
          </a>
          <Button onClick={handleEmailReport} variant="outline">
            📤 Email Report to Stakeholders
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        <h2 className="text-xl font-bold text-gray-800">🔢 Sample Size Calculator</h2>
        <SampleSizeCalculator />

        <h2 className="text-xl font-bold text-gray-800">🔮 Trial Success Predictor</h2>
        <TrialSuccessPredictor />
      </div>
    </div>
  );
}
