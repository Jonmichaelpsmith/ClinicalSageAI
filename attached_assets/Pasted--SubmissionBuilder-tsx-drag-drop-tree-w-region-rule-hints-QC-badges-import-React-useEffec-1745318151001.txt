// SubmissionBuilder.tsx – drag‑drop tree w/ region rule hints & QC badges
import React, { useEffect, useState } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import { CheckCircle, XCircle, Info } from 'lucide-react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

const REGION_RULES: Record<string, { folders: string[]; mandatory: string[] }> = {
  FDA: {
    folders: ['m1', 'm2', 'm3', 'm4', 'm5'],
    mandatory: ['m1.1', 'm1.3', 'm1.15', 'm2.3', 'm2.4', 'm2.5', 'm3.2', 'm5.3.1'],
  },
  EMA: {
    folders: ['m1', 'm2', 'm3', 'm4', 'm5'],
    mandatory: ['m1.2', 'm1.3', 'm1.5', 'm2.3', 'm2.4', 'm2.5', 'm3.2', 'm5.3.1'],
  },
  PMDA: {
    folders: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp-annex'],
    mandatory: ['m1.2', 'jp-annex', 'm2.3', 'm3.2', 'm5.3.1'],
  },
};

export default function SubmissionBuilder({ region = 'FDA' }: { region?: string }) {
  const rules = REGION_RULES[region];
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
      const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
      const folders = rules.folders.map((m, idx) => ({ id: 10_000 + idx, parent: 0, text: m, droppable: true }));
      const items = docs.map(d => ({
        id: d.id,
        parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
        text: d.title,
        droppable: false,
        data: d,
      }));
      setTree([root, ...folders, ...items]);
      setLoading(false);
    })();
  }, [region]);

  const handleDrop = (newTree: Node[]) => setTree(newTree);

  // Rule‑check which mandatory sections are still missing
  const missingSections = rules.mandatory.filter(sec => !tree.some(n => !n.droppable && n.data?.module.startsWith(sec)));

  const renderNode = (node: Node, { depth, isOpen, onToggle }: any) => {
    if (node.droppable) {
      return (
        <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-1 py-1">
          <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen ? '▾' : '▸'}</button>
          <strong>{node.text}</strong>
        </div>
      );
    }
    const qcStatus = node.data?.qc_json?.status;
    return (
      <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-2 py-1">
        {qcStatus === 'passed' ? <CheckCircle size={14} className="text-success" /> : <XCircle size={14} className="text-danger" />}
        <span>{node.text}</span>
      </div>
    );
  };

  if (loading) return <p className="text-center mt-4">Loading…</p>;

  return (
    <div className="container py-4">
      <h2>Submission Builder <span className="badge bg-secondary ms-2">{region}</span></h2>

      {/* Rule hint banner */}
      {missingSections.length > 0 && (
        <div className="alert alert-info d-flex align-items-center gap-2"><Info size={16}/> Missing required sections: {missingSections.join(', ')}</div>
      )}

      <DndProvider backend={HTML5Backend}>
        <Tree rootId={0} tree={tree} render={renderNode} onDrop={handleDrop} />
      </DndProvider>
    </div>
  );
}

async function fetchJson(url: string) {
  const r = await fetch(url);
  if (!r.ok) throw new Error('fetch failed');
  return r.json();
}
