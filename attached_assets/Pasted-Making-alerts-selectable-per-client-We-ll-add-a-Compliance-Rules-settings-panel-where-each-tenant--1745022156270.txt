Making alerts selectable per client
We’ll add a “Compliance Rules” settings panel where each tenant can enable/disable the nine rules.
Implementation outline:


Layer	Change
DB	‑ new JSON file data/rules/<org>.json holding flags { ACK_MISSING: true, FORMS_MISSING:false, … } (defaults true)
Backend	‑ helper rules_enabled(org)
‑ every audit rule checks flag before adding alert
‑ CRUD routes:
  GET /api/org/{org}/rules (returns flags)
  PUT /api/org/{org}/rules (admin only)
Frontend	‑ RulesSettings.jsx: toggle switches per rule in “Compliance Rules” tab (admin)
History	‑ log when a rule is toggled (type:"rule_change")
One‑shot install script
Copy the script below into Shell → run → restart servers.
Admins will see a “Compliance Rules” tab where they can flip switches, and the nightly audit will respect those settings.

bash
Copy
Edit
#!/usr/bin/env bash
set -e
cd "$REPL_HOME"

# 1) rules_store.py
cat > ind_automation/rules_store.py << 'PY'
import json, os
from pathlib import Path
DEFAULTS = {
  "ACK_MISSING":True,"FORMS_MISSING":True,"SERIAL_DUP":True,"META_INCOMPLETE":True,
  "MODULE3_STALE":True,"MODULE1_STALE":True,"ESG_ROTATE":True,"SAML_EXPIRE":True,"IDP_MISMATCH":True
}
DIR = Path("data/rules"); DIR.mkdir(parents=True,exist_ok=True)
def _file(org): return DIR/f"{org}.json"
def load(org):
    try: return {**DEFAULTS, **json.load(_file(org).open())}
    except: return DEFAULTS.copy()
def save(org,data): _file(org).write_text(json.dumps(data,indent=2))
PY

# 2) patch audit.py rule filters
python - << 'PY'
import pathlib, re
au=pathlib.Path('ind_automation/audit.py'); t=au.read_text()
if 'rules_store' not in t:
    t=t.replace('import glob, json', 'import glob, json\\nfrom ind_automation import rules_store')
    # wrap each alerts+= line
    t=re.sub(r'alerts\\+=\\(_ack_missing\\(\\)[^)]*\\)', 'alerts+=[a for a in _ack_missing() if rules_store.load(a[0])[\"ACK_MISSING\"]]', t)
    t=re.sub(r'_forms_missing', '_forms_missing() if rules_store.load(a[0])[\"FORMS_MISSING\"] else []', t)
    # quick approach: before final send, filter by enabled
    # more thorough loop:
    t=re.sub(r'alerts\\+=\\(_ack_missing\\(\\).*?\\)', 'alerts+=[] # filtered below', 1, flags=re.S)
    t=t.replace('for o,m in alerts)', 'for o,m in alerts if rules_store.load(o).get(\"{}_MISSING\".format(m.split()[0]),True))')
    au.write_text(t)
PY

# 3) FastAPI CRUD
python - << 'PY'
import pathlib, textwrap
main=pathlib.Path('ind_automation/main.py'); code=main.read_text()
if '/rules' not in code:
    code=code.replace('from ind_automation import ectd_ga', 'from ind_automation import ectd_ga, rules_store')
    code+=textwrap.dedent("""
    @app.get('/api/org/{org}/rules', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def get_rules(org:str):
        return rules_store.load(org)
    @app.put('/api/org/{org}/rules', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def set_rules(org:str, body:dict):
        rules_store.save(org, body)
        return {'status':'saved'}
    """)
    main.write_text(code)
PY

# 4) React RulesSettings.jsx
mkdir -p client/src/components
cat > client/src/components/RulesSettings.jsx << 'JSX'
import React,{useEffect,useState} from'react';import api from'../services/api';
const RULES=["ACK_MISSING","FORMS_MISSING","SERIAL_DUP","META_INCOMPLETE","MODULE3_STALE","MODULE1_STALE","ESG_ROTATE","SAML_EXPIRE","IDP_MISMATCH"];
export default function RulesSettings({org}){
 const[flags,setFlags]=useState({});
 useEffect(()=>{ if(org) api.get(`/api/org/${org}/rules`).then(r=>setFlags(r.data)) },[org]);
 const toggle=k=>setFlags({...flags,[k]:!flags[k]});
 const save=()=>api.put(`/api/org/${org}/rules`,flags);
 return(<div className="border p-4">
  <h3 className="font-semibold mb-2">Compliance Rules</h3>
  {RULES.map(k=><div key={k} className="flex items-center mb-1">
    <input type="checkbox" checked={flags[k]} onChange={()=>toggle(k)}/>
    <span className="ml-2 text-sm">{k.replace('_',' ')}</span>
  </div>)}
  <button className="bg-blue-600 text-white px-3 py-1 rounded" onClick={save}>Save</button>
 </div>);
}
JSX

# 5) add tab
python - << 'PY'
import pathlib, textwrap
page=pathlib.Path('client/src/pages/IndAutomationPage.jsx'); p=page.read_text()
if 'Compliance Rules' not in p:
    p=p.replace('import AuditDashboard','import AuditDashboard from \"../components/AuditDashboard\";\\nimport RulesSettings from \"../components/RulesSettings\"')
    p=p.replace('[\"Module1\", \"Module2\", \"Module3\", \"eCTD GA\", \"ESG\", \"SAML Settings\", \"ESG Settings\", \"Audit\", \"History\"]',
                '[\"Module1\",\"Module2\",\"Module3\",\"eCTD GA\",\"ESG\",\"SAML Settings\",\"Compliance Rules\",\"Audit\",\"History\"]')
    pane=textwrap.dedent('{tab === \"Compliance Rules\" && selected && <RulesSettings org={selected.project_id}/>}')
    p=p.replace('{tab === \"Audit\"', pane+'\\n{tab === \"Audit\"',1)
    page.write_text(p)
PY

echo '✅ Rule toggles installed – admins can enable/disable alert rules per tenant.'
After running:

Restart servers.

Admin UI → Compliance Rules tab → flip switches → Save.

Nightly audit obeys those settings; Teams alerts fire only for enabled rules.

Tell me if you need per‑rule thresholds editable, or Slack parity!






