#!/usr/bin/env bash
set -e
pip install -q python3-saml==2.0.3

cd "$REPL_HOME"

# ---------------------------------------------------------------------------
# 1) saml_settings.json (OneLogin)
mkdir -p ind_automation/saml
cat > ind_automation/saml/settings.json << 'JSON'
{
  "strict": true,
  "debug": false,
  "sp": {
    "entityId": "%SP_ENTITY_ID%",
    "assertionConsumerService": { "url": "%SP_ACS%", "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" },
    "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
  },
  "idp": {
    "entityId": "%IDP_ENTITY_ID%",
    "singleSignOnService": { "url": "%IDP_SSO_URL%", "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" },
    "x509cert": "%IDP_X509%"
  }
}
JSON

# ---------------------------------------------------------------------------
# 2) saml.py – SP logic
cat > ind_automation/saml/sp.py << 'PY'
import os, json, base64, datetime
from pathlib import Path
from onelogin.saml2.auth import OneLogin_Saml2_Auth, OneLogin_Saml2_Settings
from fastapi import Request, HTTPException

SETTINGS_PATH = Path(__file__).with_name("settings.json")
settings_raw = SETTINGS_PATH.read_text()
# inject env vars
for k in ["SAML_SP_ENTITY_ID", "SAML_SP_ACS", "SAML_IDP_ENTITY_ID", "SAML_IDP_SSO_URL", "SAML_IDP_X509"]:
    settings_raw = settings_raw.replace(f"%{k.replace('SAML_','').upper()}%", os.getenv(k, ""))
settings = json.loads(settings_raw)
_saml_settings = OneLogin_Saml2_Settings(settings, validate_cert=False)

def _prep_request(request: Request):
    url = str(request.url)
    return { "https": "on" if request.url.scheme == "https" else "off", "http_host": request.client.host, "script_name": request.url.path, "server_port": request.url.port or 80, "get_data": request.query_params._dict, "post_data": await request.form() if request.method == "POST" else {} }

def saml_login(request: Request):
    auth = OneLogin_Saml2_Auth(_prep_request(request), old_settings=_saml_settings)
    return auth.login()

def saml_acs(request: Request):
    auth = OneLogin_Saml2_Auth(_prep_request(request), old_settings=_saml_settings)
    auth.process_response()
    if auth.get_errors():
        raise HTTPException(401, str(auth.get_errors()))
    return auth.get_attributes(), auth.get_nameid()
PY

# ---------------------------------------------------------------------------
# 3) rbac.py – permission decorator
cat > ind_automation/rbac.py << 'PY'
from fastapi import Depends, HTTPException
from ind_automation.auth import get_current_user
from ind_automation import users

def requires(perm: str):
    def wrapper(user: str = Depends(get_current_user)):
        perms = users.get_permissions(user)
        if perm not in perms:
            raise HTTPException(403, "Missing permission: " + perm)
        return user
    return wrapper
PY

# update users.py to store perms
python - << 'PY'
import pathlib, re, textwrap, json
users = pathlib.Path("ind_automation/users.py"); code = users.read_text()
if "def get_permissions" not in code:
    code = code.replace('def create(', 'def create(', 1)
    code = code.replace('data[username] = {', 'data[username] = {"perms": [], ', 1)
    code += textwrap.dedent("""
    def get_permissions(username):
        return _load().get(username, {}).get('perms', [])
    """)
    users.write_text(code)
PY

# ---------------------------------------------------------------------------
# 4) patch main.py – SAML routes & RBAC sample
python - << 'PY'
import pathlib, textwrap
main = pathlib.Path("ind_automation/main.py"); code = main.read_text()
if "saml_login" not in code:
    code = code.replace("from ind_automation import ectd_ga, tasks, credentials, auth, users",
                        "from ind_automation import ectd_ga, tasks, credentials, auth, users, rbac, saml")
    code += textwrap.dedent("""
    @app.get('/saml/login')
    async def saml_login_route(request: Request):
        return RedirectResponse(saml.saml_login(request))

    @app.post('/saml/acs')
    async def saml_acs_route(request: Request):
        attrs, nameid = saml.saml_acs(request)
        # simple mapping: everyone is role=user, perms from attr 'trialsage-perms'
        perms = attrs.get('trialsage-perms', [])
        users.create(nameid, 'saml', role='user')
        _data = users._load(); _data[nameid]['perms'] = perms; users._save(_data)
        token = auth.create_token(nameid)
        return RedirectResponse(f'/#/login-callback?token={token}')
    """)
    main.write_text(code)
PY

# ---------------------------------------------------------------------------
# 5) React SSO button + login callback
cat > client/src/components/SSOButton.jsx << 'JSX'
import React from "react";
export default function SSOButton() {
  return (
    <button className="bg-purple-700 text-white px-3 py-1 rounded" onClick={() => window.location.href='/saml/login'}>
      Login with SSO
    </button>
  );
}
JSX

python - << 'PY'
import pathlib, re, textwrap
login = pathlib.Path("client/src/components/Login.jsx"); code = login.read_text()
if "SSOButton" not in code:
    code = code.replace('import api', 'import api from "../services/api";\nimport SSOButton from "./SSOButton"')
    code = code.replace('</div>', '<SSOButton />\n</div>', 1)
    login.write_text(code)
PY

# login callback route in App.jsx
python - << 'PY'
import pathlib, textwrap
app = pathlib.Path("client/src/App.jsx"); code = app.read_text()
if "login-callback" not in code:
    code = code.replace('<Routes>', '<Routes>\n        <Route path="/login-callback" element={<LoginCallback setAuth={setAuth} />} />', 1)
    code = textwrap.dedent("import LoginCallback from './components/LoginCallback';\n" + code)
    app.write_text(code)
PY

cat > client/src/components/LoginCallback.jsx << 'JSX'
import React, { useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
export default function LoginCallback({ setAuth }) {
  const [params] = useSearchParams(); const nav = useNavigate();
  useEffect(() => {
    const tok = params.get('token'); if (tok) { localStorage.setItem('jwt', tok); setAuth(true); }
    nav('/');
  }, []);
  return <p>Signing in…</p>;
}
JSX

# ---------------------------------------------------------------------------

echo "✅ SAML SSO + fine‑grained RBAC installed – set SAML_* secrets, ACCESS_TOKEN_SECRET, restart servers."