# Enhance regulatory bundle endpoint with email + export log
@app.get("/api/export/regulatory-bundle/{session_id}")
def export_regulatory_bundle(session_id: str):
    archive_dir = f"/mnt/data/lumen_reports_backend/sessions/{session_id}"
    if not os.path.exists(archive_dir):
        return {"error": "Session data not found."}

    # Ensure summary_packet exists
    pdf_path = os.path.join(archive_dir, "summary_packet.pdf")
    if not os.path.exists(pdf_path):
        pdf = FPDF()
        add_cover_page(pdf, session_id=session_id, title="Regulatory Intelligence Report")
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, f"No content yet available for {session_id}.")
        pdf.output(pdf_path)

    # Rebuild IND DOCX if needed
    ind_text_path = os.path.join(archive_dir, "ind_summary.txt")
    docx_path = os.path.join(archive_dir, "ind_summary_branded.docx")
    if os.path.exists(ind_text_path) and not os.path.exists(docx_path):
        with open(ind_text_path, "r") as f:
            ind_text = f.read()
        export_branded_docx(session_id, ind_text)

    # Build ZIP
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"{session_id}_regulatory_ready_bundle_{timestamp}.zip"
    zip_path = f"/mnt/data/{zip_filename}"

    bundle_files = [
        "summary_packet.pdf",
        "dropout_forecast.json",
        "success_prediction.json",
        "ind_summary.txt",
        "ind_summary_branded.docx",
        "sap_summary_branded.docx",
        "wisdom_trace.json"
    ]

    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for file in bundle_files:
            file_path = os.path.join(archive_dir, file)
            if os.path.exists(file_path):
                zipf.write(file_path, arcname=file)

    # Simulate auto-email
    recipient_path = os.path.join("/mnt/data/lumen_reports_backend/static/session_emails.json")
    recipient_email = None
    if os.path.exists(recipient_path):
        with open(recipient_path, "r") as f:
            stored_emails = json.load(f)
            recipient_email = stored_emails.get(session_id)

    if recipient_email:
        print(f"ðŸ“¤ Auto-sending bundle to {recipient_email}...")

    # Log export
    export_log = {
        "last_exported": timestamp,
        "bundle_file": zip_filename,
        "recipient": recipient_email or "N/A"
    }
    with open(os.path.join(archive_dir, "export_log.json"), "w") as f:
        json.dump(export_log, f, indent=2)

    return FileResponse(zip_path, filename=zip_filename, media_type="application/zip")
