// ───────────────────────────────────────────────────────────────
// TrialSage Vault™ – GA Scaffold (Backend + Starter Front‑end)
// Directory: / (monorepo ‑ server & client)
// ───────────────────────────────────────────────────────────────
// 📁 1. server/index.js – Express entry point
//----------------------------------------------------------------
import express from 'express';
import cors from 'cors';
import authRoutes from './routes/auth.js';
import documentRoutes from './routes/documents.js';
import auditRoutes from './routes/audit.js';
import { verifyJwt } from './middleware/auth.js';

const app = express();
app.use(cors());
app.use(express.json({ limit: '50mb' }));

// Public routes
app.use('/api/auth', authRoutes);

// Protected routes
app.use('/api/documents', verifyJwt, documentRoutes);
app.use('/api/audit', verifyJwt, auditRoutes);

// Health check
app.get('/health', (_, res) => res.json({ status: 'ok' }));

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`TrialSage Vault API running on ${PORT}`));

//----------------------------------------------------------------
// 📁 2. server/lib/supabaseClient.js – DB + Auth helper
//----------------------------------------------------------------
import { createClient } from '@supabase/supabase-js';
export const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // service role for server‑side
);

//----------------------------------------------------------------
// 📁 3. server/middleware/auth.js – JWT verification
//----------------------------------------------------------------
import jwt from 'jsonwebtoken';
export const verifyJwt = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Missing token' });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // { id, role, tenantId }
    next();
  } catch (err) {
    return res.status(401).json({ message: 'Invalid or expired token' });
  }
};

//----------------------------------------------------------------
// 📁 4. server/routes/auth.js – Email+Google login via Supabase
//----------------------------------------------------------------
import { Router } from 'express';
import jwt from 'jsonwebtoken';
import { supabase } from '../lib/supabaseClient.js';

const router = Router();

// Email/password login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const { data, error } = await supabase.auth.signInWithPassword({ email, password });
  if (error) return res.status(401).json({ message: error.message });
  const { user } = data;
  const token = jwt.sign({ id: user.id, role: 'user', tenantId: user.user_metadata.tenant_id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Google OAuth callback handled client‑side → Exchange for JWT here if needed

export default router;

//----------------------------------------------------------------
// 📁 5. server/routes/documents.js – Upload + metadata + AI summaries
//----------------------------------------------------------------
import { Router } from 'express';
import multer from 'multer';
import { supabase } from '../lib/supabaseClient.js';
import { generateSummary, autoTag } from '../services/ai.js';

const upload = multer({ storage: multer.memoryStorage() });
const router = Router();

// POST /api/documents  (multipart/form‑data)
router.post('/', upload.single('file'), async (req, res) => {
  const { file } = req;
  const { tenantId, id: userId } = req.user;
  const path = `${tenantId}/${Date.now()}_${file.originalname}`;

  // 1️⃣ store file to Supabase Storage
  const { error: uploadErr } = await supabase.storage
    .from('vault-files')
    .upload(path, file.buffer, { contentType: file.mimetype, upsert: false });
  if (uploadErr) return res.status(500).json({ message: uploadErr.message });

  // 2️⃣ generate AI summary + tags
  const [summary, tags] = await Promise.all([
    generateSummary(file.buffer, file.mimetype),
    autoTag(file.buffer)
  ]);

  // 3️⃣ insert metadata row
  const { error: dbErr, data } = await supabase.from('documents').insert({
    tenant_id: tenantId,
    path,
    filename: file.originalname,
    content_type: file.mimetype,
    uploader_id: userId,
    summary,
    tags,
    status: 'Draft'
  }).select().single();

  if (dbErr) return res.status(500).json({ message: dbErr.message });

  res.json(data);
});

export default router;

//----------------------------------------------------------------
// 📁 6. server/routes/audit.js – Get audit trail for tenant
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
const routerAudit = Router();

routerAudit.get('/', async (req, res) => {
  const { tenantId } = req.user;
  const { data, error } = await supabase
    .from('audit_logs')
    .select('*')
    .eq('tenant_id', tenantId)
    .order('timestamp', { ascending: false });
  if (error) return res.status(500).json({ message: error.message });
  res.json(data);
});

export default routerAudit;

//----------------------------------------------------------------
// 📁 7. server/services/ai.js – OpenAI summarizer + auto‑tagging
//----------------------------------------------------------------
import OpenAI from 'openai';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function generateSummary(buffer, contentType) {
  // For POC we pass limited text; in prod use proper extraction pipeline
  const base64 = buffer.toString('base64').slice(0, 10000);
  const resp = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      { role: 'system', content: 'You are a regulatory medical writer. Provide a concise summary.' },
      { role: 'user', content: `Summarize this content: ${base64}` }
    ],
    max_tokens: 200
  });
  return resp.choices[0].message.content.trim();
}

export async function autoTag(buffer) {
  // simple POC – use keywords
  const resp = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      { role: 'system', content: 'List 5 relevant metadata tags (trial id, molecule, doc type, phase). Return as JSON array.' },
      { role: 'user', content: '<<document content omitted>>' }
    ],
    max_tokens: 60
  });
  try {
    return JSON.parse(resp.choices[0].message.content);
  } catch {
    return [];
  }
}

//----------------------------------------------------------------
// 📁 8. client/src/App.jsx – Simplified root (imports MarketingPage)
//----------------------------------------------------------------
import React from 'react';
import VaultMarketingPage from './pages/VaultMarketingPage.jsx';

export default function App() {
  return <VaultMarketingPage />;
}

//----------------------------------------------------------------
// 📁 9. .env.template – Copy → .env with real secrets
//----------------------------------------------------------------
# Supabase
SUPABASE_URL=https://YOUR_PROJECT.supabase.co
SUPABASE_SERVICE_ROLE_KEY=YOUR_SUPABASE_SERVICE_ROLE

# Auth
JWT_SECRET=super‑secret

# OpenAI
OPENAI_API_KEY=sk‑...

# Express
PORT=4000

//----------------------------------------------------------------
//  🔑  Quick Setup Steps (README)
//----------------------------------------------------------------
1.  Create a **Supabase** project → set **Row‑Level Security** ON.
    - Add buckets: `vault-files` (public = false).
    - Tables:
      • `documents` (id uuid, tenant_id uuid, path text, filename text, content_type text, uploader_id uuid, summary text, tags jsonb, status text, inserted_at timestamp default now())
      • `audit_logs` (id uuid, tenant_id uuid, user_id uuid, action text, details jsonb, timestamp timestamp default now())
    - Enable RLS with policies so tenant_id = auth.uid() / matching claims.

2.  Install packages:
```bash
npm install express cors multer jsonwebtoken @supabase/supabase-js openai
npm install react react-dom tailwindcss framer-motion axios
```

3.  Copy `.env.template` → `.env` and fill keys.
4.  Run dev:
```bash
node server/index.js   # backend
npm run dev            # frontend (Vite/Next as configured)
```

5.  Upload a file → metadata + AI summary auto‑populate.
6.  Verify audit log API works.

// ───────────────────────────────────────────────────────────────
// End of TrialSage Vault™ scaffold
