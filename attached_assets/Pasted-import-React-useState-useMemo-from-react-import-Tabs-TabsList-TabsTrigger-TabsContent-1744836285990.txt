import React, { useState, useMemo } from 'react';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { SegmentedControl } from '@/components/ui/segmented-control';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Spinner } from '@/components/ui/spinner';
import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';
import { motion } from 'framer-motion';

const tabItems = [
  { value: 'faers', label: 'Drug Safety (FAERS)' },
  { value: 'device', label: 'Device Complaints (MAUDE)' },
  { value: 'multi', label: 'Multi-Source CER' }
];
const viewModes = ['Chart', 'Table'];

export default function CERDashboard() {
  const [selectedTab, setSelectedTab] = useState('faers');

  return (
    <div className="p-8 max-w-7xl mx-auto">
      <h1 className="text-4xl font-extrabold mb-8">TrialSage Clinical Evaluation Reports</h1>
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="mb-6">
          {tabItems.map(tab => (
            <TabsTrigger key={tab.value} value={tab.value} className="px-6 py-2">
              {tab.label}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="faers">
          <EndpointPanel type="faers" placeholder="Enter NDC code, e.g. 0002-8215" />
        </TabsContent>
        <TabsContent value="device">
          <EndpointPanel type="device" placeholder="Enter Device code, e.g. K123456" />
        </TabsContent>
        <TabsContent value="multi">
          <MultiSourcePanel />
        </TabsContent>
      </Tabs>
    </div>
  );
}

function EndpointPanel({ type, placeholder }) {
  const [code, setCode] = useState('');
  const [periods, setPeriods] = useState(6);
  const [startDate, setStartDate] = useState(new Date(new Date().setFullYear(new Date().getFullYear() - 5)).toISOString().slice(0,10));
  const [endDate, setEndDate] = useState(new Date().toISOString().slice(0,10));
  const [viewMode, setViewMode] = useState(viewModes[0]);
  const [data, setData] = useState(null);
  const [narrative, setNarrative] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const apiBase = `/api/narrative/${type}/${code}`;

  const fetchData = async () => {
    setLoading(true); setError(null); setNarrative('');
    try {
      const params = new URLSearchParams({ periods, start_date: startDate, end_date: endDate });
      const res = await fetch(`${apiBase}?${params}`);
      if (!res.ok) throw new Error(await res.text());
      const json = await res.json();
      setData(json);
      setNarrative(json.narrative);
    } catch (e) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  const chartData = useMemo(() => {
    return data?.trend
      ? Object.entries(data.trend).map(([date, value]) => ({ date, value }))
      : [];
  }, [data]);

  return (
    <Card className="space-y-6">
      <CardHeader><h2 className="text-2xl font-semibold">{placeholder.split('(')[0].trim()}</h2></CardHeader>
      <CardContent>
        <div className="grid grid-cols-6 gap-4 items-end">
          <div className="col-span-2">
            <Input placeholder={placeholder} value={code} onChange={e => setCode(e.target.value)} />
          </div>
          <div><Input type="number" min={1} max={12} value={periods} onChange={e => setPeriods(+e.target.value)} /></div>
          <div><Input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} /></div>
          <div><Input type="date" value={endDate} onChange={e => setEndDate(e.target.value)} /></div>
          <div className="col-span-2 flex space-x-3">
            <Button onClick={fetchData} disabled={!code || loading}>{loading ? <Spinner /> : 'Generate'}</Button>
            <Button variant="outline" onClick={() => window.open(`${apiBase}/pdf?periods=${periods}`, '_blank')} disabled={!narrative}>Download PDF</Button>
          </div>
        </div>
        {error && <p className="text-red-600 font-medium">Error: {error}</p>}
        {data && (
          <div className="mt-4">
            <SegmentedControl value={viewMode} onChange={setViewMode} className="mb-4">
              {viewModes.map(mode => (
                <SegmentedControl.Item key={mode} value={mode}>{mode}</SegmentedControl.Item>
              ))}
            </SegmentedControl>
            {viewMode === 'Chart' ? (
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={chartData} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" /> <YAxis /> <Tooltip />
                  <Line type="monotone" dataKey="value" stroke="#4f46e5" strokeWidth={2} dot={false} />
                </LineChart>
              </ResponsiveContainer>
            ) : (
              <ScrollArea className="max-h-64 mt-2">
                <table className="w-full text-sm">
                  <thead className="bg-muted"><tr><th className="p-2">Date</th><th className="p-2">Count</th></tr></thead>
                  <tbody>{chartData.map((r,i) => <tr key={i} className={i%2?'bg-muted/20':''}><td className="p-2">{r.date}</td><td className="p-2">{r.value}</td></tr>)}</tbody>
                </table>
              </ScrollArea>
            )}
          </div>
        )}
        {narrative && (
          <motion.div initial={{ y: 20, opacity: 0 }} animate={{ y: 0, opacity: 1 }} className="mt-6">
            <h3 className="text-lg font-semibold mb-2">Narrative</h3>
            <ScrollArea className="h-48 p-4 bg-white rounded-lg shadow-inner"><pre className="whitespace-pre-wrap text-base leading-relaxed">{narrative}</pre></ScrollArea>
          </motion.div>
        )}
      </CardContent>
    </Card>
  );
}

function MultiSourcePanel() {
  const [ndc, setNdc] = useState('');
  const [device, setDevice] = useState('');
  const [periods, setPeriods] = useState(6);
  const [dataList, setDataList] = useState([]);
  const [narrative, setNarrative] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchMulti = async () => {
    setLoading(true); setError(null); setNarrative(''); setDataList([]);
    try {
      const body = { ndc_codes: ndc.split(',').map(s => s.trim()), device_codes: device.split(',').map(s => s.trim()), periods };
      const res = await fetch('/api/narrative/multi', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) });
      if (!res.ok) throw new Error(await res.text());
      const json = await res.json(); setDataList(json.analysis.analyses); setNarrative(json.narrative);
    } catch(e){ setError(e.message); } finally { setLoading(false); }
  };

  return (
    <Card className="space-y-6">
      <CardHeader><h2 className="text-2xl font-semibold">Multi-Source CER</h2></CardHeader>
      <CardContent>
        <div className="grid grid-cols-3 gap-4">
          <Input placeholder="NDC codes (comma-separated)" value={ndc} onChange={e=>setNdc(e.target.value)} />
          <Input placeholder="Device codes (comma