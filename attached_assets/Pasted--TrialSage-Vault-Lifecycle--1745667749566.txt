// ───────────────────────────────────────────────────────────────
// TrialSage Vault™ – Lifecycle Engine (Backend + Front‑end UI)
// 📂 server/routes/lifecycle.js – manage state transitions + approvals
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
import { verifyJwt } from '../middleware/auth.js';

const router = Router();

// Allowed state transitions
const ALLOWED = {
  Draft: ['Review'],
  Review: ['Approved', 'Rejected'],
  Approved: ['Effective'],
  Effective: ['Archived'],
  Rejected: ['Draft']
};

// POST /api/lifecycle/:docId/transition { targetState }
router.post('/:docId/transition', verifyJwt, async (req, res) => {
  const { docId } = req.params;
  const { targetState } = req.body;
  const { tenantId, id: userId } = req.user;

  // 1️⃣ fetch current status
  const { data: doc, error: fetchErr } = await supabase
    .from('documents')
    .select('status')
    .eq('id', docId)
    .eq('tenant_id', tenantId)
    .single();
  if (fetchErr) return res.status(400).json({ message: fetchErr.message });

  if (!ALLOWED[doc.status]?.includes(targetState)) {
    return res.status(400).json({ message: `Invalid transition from ${doc.status} → ${targetState}` });
  }

  // 2️⃣ update status + record audit
  const { error: updErr } = await supabase.from('documents')
    .update({ status: targetState })
    .eq('id', docId);
  if (updErr) return res.status(500).json({ message: updErr.message });

  // 3️⃣ audit log
  await supabase.from('audit_logs').insert({
    tenant_id: tenantId,
    user_id: userId,
    action: 'status_change',
    details: { docId, from: doc.status, to: targetState },
  });

  res.json({ ok: true, newStatus: targetState });
});

export default router;

//----------------------------------------------------------------
// 📂 client/components/StatusBadge.jsx – shows colored badge
//----------------------------------------------------------------
import React from 'react';
export default function StatusBadge({ status }) {
  const color = {
    Draft: 'bg-gray-300',
    Review: 'bg-yellow-300',
    Approved: 'bg-green-300',
    Effective: 'bg-blue-300',
    Archived: 'bg-purple-300',
    Rejected: 'bg-red-300'
  }[status] || 'bg-gray-200';
  return <span className={`px-2 py-1 rounded text-xs font-semibold ${color}`}>{status}</span>;
}

//----------------------------------------------------------------
// 📂 client/pages/DocumentsList.jsx – list + transition UI
//----------------------------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import StatusBadge from '../components/StatusBadge.jsx';
import { Button } from '@/components/ui/button';

export default function DocumentsList() {
  const [docs, setDocs] = useState([]);

  useEffect(() => { fetchDocs(); }, []);

  const fetchDocs = async () => {
    const { data } = await axios.get('/api/documents');
    setDocs(data);
  };

  const transition = async (id, to) => {
    await axios.post(`/api/lifecycle/${id}/transition`, { targetState: to });
    fetchDocs();
  };

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Vault Documents</h1>
      <table className="w-full text-left text-sm">
        <thead className="border-b font-semibold">
          <tr><th>File</th><th>Status</th><th>Actions</th></tr>
        </thead>
        <tbody>
          {docs.map(doc => (
            <tr key={doc.id} className="border-b hover:bg-gray-50">
              <td>{doc.filename}</td>
              <td><StatusBadge status={doc.status} /></td>
              <td className="space-x-2">
                {doc.status === 'Draft' && <Button size="xs" onClick={() => transition(doc.id,'Review')}>Submit Review</Button>}
                {doc.status === 'Review' && <>
                  <Button size="xs" onClick={() => transition(doc.id,'Approved')}>Approve</Button>
                  <Button size="xs" variant="destructive" onClick={() => transition(doc.id,'Rejected')}>Reject</Button></>}
                {doc.status === 'Approved' && <Button size="xs" onClick={() => transition(doc.id,'Effective')}>Make Effective</Button>}
                {doc.status === 'Effective' && <Button size="xs" variant="secondary" onClick={() => transition(doc.id,'Archived')}>Archive</Button>}
                {doc.status === 'Rejected' && <Button size="xs" onClick={() => transition(doc.id,'Draft')}>Revise</Button>}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

//----------------------------------------------------------------
//  🔑  Integration steps (add to scaffold)
//----------------------------------------------------------------
// server/index.js → add:  import lifecycleRoutes from './routes/lifecycle.js';
// after auth middleware:
//     app.use('/api/lifecycle', verifyJwt, lifecycleRoutes);

// client/src/App.jsx → import DocumentsList and add a route or replace Marketing page in dev.

// ───────────────────────────────────────────────────────────────
