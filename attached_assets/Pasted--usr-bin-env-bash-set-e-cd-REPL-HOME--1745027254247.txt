#!/usr/bin/env bash
set -e
cd "$REPL_HOME"

######################################################################
# 1) Extend users.py with CRUD helpers
######################################################################
python - << 'PY'
import pathlib, textwrap, json
up=pathlib.Path('ind_automation/users.py'); code=up.read_text()
if 'all_users' not in code:
    code+=textwrap.dedent("""
    def all_users():
        return _load()

    def set_permissions(username, perms):
        data=_load(); data[username]['perms']=perms; _save(data)
    """)
    up.write_text(code)
PY

######################################################################
# 2) FastAPI user management routes (admin‑only)
######################################################################
python - << 'PY'
import pathlib, textwrap
main=pathlib.Path('ind_automation/main.py'); code=main.read_text()
if '/users' not in code:
    code=code.replace('from ind_automation import', 'from ind_automation import')  # anchor
    code+=textwrap.dedent("""
    # ---------- User / Permission management ----------
    @app.get('/api/org/{org}/users', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def list_users(org:str):
        return users.all_users()

    @app.post('/api/org/{org}/users', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def invite_user(org:str, body:dict):
        users.create(body['username'], body.get('password','changeme'), role=body.get('role','user'))
        users.set_permissions(body['username'], body.get('perms',[]))
        return {'status':'created'}

    @app.put('/api/org/{org}/users/{username}', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def update_user(org:str, username:str, body:dict):
        if 'role' in body: # quick role update
            data=users.all_users(); data[username]['role']=body['role']; users._save(data)
        if 'perms' in body:
            users.set_permissions(username, body['perms'])
        return {'status':'updated'}

    @app.delete('/api/org/{org}/users/{username}', dependencies=[Depends(rbac.requires('admin.esg'))])
    async def delete_user(org:str, username:str):
        data=users.all_users(); data.pop(username, None); users._save(data)
        return {'status':'deleted'}
    """)
    main.write_text(code)
PY

######################################################################
# 3) React RoleManager component
######################################################################
mkdir -p client/src/components
cat > client/src/components/RoleManager.jsx << 'JSX'
import React,{useEffect,useState} from'react';
import api from'../services/api';
const ROLES=['admin','submitter','readonly'];
const PERMS=['ind.read','ind.write','esg.submit','compliance.manage','alerts.view'];
export default function RoleManager(){
 const[users,setUsers]=useState({});const[inv,setInv]=useState(false);const[nu,setNu]=useState({username:'',role:'user'});
 const load=()=>api.get('/api/org/tenant/users').then(r=>setUsers(r.data)); // tenant stub
 useEffect(load,[]);
 const setRole=(u,r)=>api.put(`/api/org/tenant/users/${u}`,{role:r}).then(load);
 const toggle=(u,p)=>{const perms=users[u].perms||[]; const has=perms.includes(p);
   const newP=has?perms.filter(x=>x!==p):[...perms,p]; api.put(`/api/org/tenant/users/${u}`,{perms:newP}).then(load)};
 const invite=()=>api.post('/api/org/tenant/users',nu).then(()=>{setInv(false);load();});
 return(<div className='p-4'>
  <button onClick={()=>setInv(true)} className='bg-green-700 text-white px-3 py-1 mb-2 rounded'>Invite User</button>
  <table className='text-sm w-full'><thead><tr><th>User</th><th>Role</th>{PERMS.map(p=><th key={p}>{p}</th>)}</tr></thead><tbody>
   {Object.entries(users).map(([u,d])=>(
     <tr key={u}><td>{u}</td>
       <td><select value={d.role} onChange={e=>setRole(u,e.target.value)}>{ROLES.map(r=><option key={r}>{r}</option>)}</select></td>
       {PERMS.map(p=><td key={p}><input type='checkbox' checked={d.perms?.includes(p)} onChange={()=>toggle(u,p)}/></td>)}
     </tr>))}
  </tbody></table>
  {inv&&<div className='fixed inset-0 bg-black/40 flex items-center justify-center'>
    <div className='bg-white p-4 rounded'><h3 className='font-semibold mb-2'>Invite User</h3>
      <input placeholder='Email' className='border p-1 mb-2 w-full' value={nu.username} onChange={e=>setNu({...nu,username:e.target.value})}/>
      <select value={nu.role} onChange={e=>setNu({...nu,role:e.target.value})} className='border p-1 mb-2 w-full'>{ROLES.map(r=><option key={r}>{r}</option>)}</select>
      <button className='bg-blue-600 text-white px-3 py-1 mr-2 rounded' onClick={invite}>Send Invite</button>
      <button className='px-3 py-1' onClick={()=>setInv(false)}>Cancel</button>
    </div></div>}
 </div>);
}
JSX

######################################################################
# 4) Add tab link for admins only
######################################################################
python - << 'PY'
import pathlib, textwrap, re
page=pathlib.Path('client/src/pages/IndAutomationPage.jsx'); p=page.read_text()
if 'User Management' not in p:
    p=p.replace('import ComplianceInsights','import ComplianceInsights from "../components/ComplianceInsights";\nimport RoleManager from "../components/RoleManager"')
    p=p.replace('"Compliance Insights"','"Compliance Insights","User Management"')
    pane=textwrap.dedent('{tab === "User Management" && <RoleManager/>}')
    p=p.replace('{tab === "Compliance Insights"', pane+'\n{tab === "Compliance Insights"',1)
    page.write_text(p)
PY

echo '✅ Tenant permission manager installed – sidebar tab appears for admins.'