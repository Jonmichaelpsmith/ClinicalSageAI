#!/usr/bin/env bash
set -e
echo "▶︎ Adding Phase 2 metadata + sequence tracking…"

cd "$REPL_HOME"

# 1) data dir for JSON project records
mkdir -p data/projects

# 2) ind_automation/db.py  ----------------------------------------
cat > ind_automation/db.py << 'PY'
import json, os
DATA_DIR = "data/projects"

def _path(pid: str): return f"{DATA_DIR}/{pid}.json"

def load(pid: str) -> dict | None:
    try:
        with open(_path(pid)) as f: return json.load(f)
    except FileNotFoundError:
        return None

def save(pid: str, record: dict):
    os.makedirs(DATA_DIR, exist_ok=True)
    with open(_path(pid), "w") as f: json.dump(record, f, indent=2)

def list_projects() -> list[dict]:
    os.makedirs(DATA_DIR, exist_ok=True)
    out=[]
    for fn in os.listdir(DATA_DIR):
        if fn.endswith(".json"):
            with open(f"{DATA_DIR}/{fn}") as f: out.append(json.load(f))
    return out
PY

# 3) Patch ind_automation/main.py  --------------------------------
cat > ind_automation/main.py << 'PY'
import io, datetime, uuid
from fastapi import FastAPI, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List

from ingestion.benchling_connector import fetch_benchling_cmc
from ind_automation.templates import render_form1571, render_form1572, render_form3674
from ind_automation import db

app = FastAPI(title="IND Automation Service v2")

# CORS (relax during dev)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------- Models ----------
class ProjectMeta(BaseModel):
    project_id: str
    sponsor: str
    drug_name: str
    protocol: str
    pi_name: str
    pi_address: str
    nct_number: str | None = None
    ind_number: str | None = None
    serial_number: int = 0                # auto‑increments per submission
    created: str = datetime.date.today().isoformat()
    updated: str | None = None

# ---------- REST: Projects ----------
@app.get("/api/projects", response_model=List[ProjectMeta])
async def list_projects():
    return db.list_projects()

@app.post("/api/projects", response_model=ProjectMeta)
async def create_project(p: ProjectMeta):
    if db.load(p.project_id):
        raise HTTPException(400, "Project already exists")
    db.save(p.project_id, p.dict())
    return p

@app.put("/api/projects/{pid}", response_model=ProjectMeta)
async def update_project(pid: str, p: ProjectMeta):
    record = p.dict()
    record["updated"] = datetime.date.today().isoformat()
    db.save(pid, record)
    return p

@app.get("/api/projects/{pid}", response_model=ProjectMeta)
async def get_project(pid: str):
    rec = db.load(pid)
    if not rec: raise HTTPException(404, "Not found")
    return rec

# ---------- Utils ----------
def _doc(buf: io.BytesIO, fname: str):
    return StreamingResponse(
        buf,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        headers={"Content-Disposition": f'attachment; filename=\"{fname}\"'}
    )

def _get_meta(pid: str) -> ProjectMeta:
    rec = db.load(pid)
    if not rec: raise HTTPException(404, "Project not found")
    return ProjectMeta(**rec)

# ---------- Forms ----------
@app.get("/api/ind/{pid}/forms/1571")
async def get_1571(pid: str):
    m = _get_meta(pid)
    context = m.dict()
    context["submission_date"] = datetime.date.today().isoformat()
    buf = render_form1571(context)
    return _doc(buf, f"Form1571_{pid}.docx")

@app.get("/api/ind/{pid}/forms/1572")
async def get_1572(pid: str):
    m = _get_meta(pid)
    buf = render_form1572(m.dict())
    return _doc(buf, f"Form1572_{pid}.docx")

@app.get("/api/ind/{pid}/forms/3674")
async def get_3674(pid: str):
    m = _get_meta(pid)
    buf = render_form3674(m.dict())
    return _doc(buf, f"Form3674_{pid}.docx")

# ---------- Serial Number increment endpoint ----------
@app.post("/api/ind/{pid}/sequence")
async def new_sequence(pid: str):
    m = _get_meta(pid)
    m.serial_number += 1
    db.save(pid, m.dict())
    return {"serial_number": f"{m.serial_number:04d}"}

# ---------- Health ----------
@app.get("/health")
async def health(): return {"status": "ok"}
PY

echo "✅  Metadata CRUD + sequence tracking added!"
echo "-------------------------------------------"
echo "▶ Restart server:"
echo "  uvicorn ind_automation.main:app --host 0.0.0.0 --port 8001"
echo
echo "▶ Quick test:"
echo "  curl -X POST http://localhost:8001/api/projects -H 'Content-Type: application/json' \\"
echo "       -d '{\"project_id\":\"demo\",\"sponsor\":\"Acme\",\"drug_name\":\"TestDrug\",\"protocol\":\"PROTO-123\",\"pi_name\":\"Dr Doe\",\"pi_address\":\"123 Lab\"}'"
echo
echo "  curl http://localhost:8001/api/ind/demo/forms/1571 --output demo1571.docx"
echo "  curl -X POST http://localhost:8001/api/ind/demo/sequence"
echo "-------------------------------------------"
