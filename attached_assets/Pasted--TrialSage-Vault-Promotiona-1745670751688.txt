// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// TrialSage Vaultâ„¢ â€“ Promotional Review (MLR) Workflow
// Includes AI claim checker to flag unsupported claims.
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// ðŸ“‚ server/routes/promo.js â€“ manage promo materials + MLR tasks
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
import { verifyJwt } from '../middleware/auth.js';
import { checkClaimsAI } from '../services/ai.js';

const router = Router();

// POST /api/promo/upload â€“ upload promotional piece + AI claims check
router.post('/upload', verifyJwt, async (req, res) => {
  const { tenantId, id: userId } = req.user;
  const { fileName, fileUrl, channels } = req.body; // assume file already uploaded via existing upload endpoint -> returns URL

  // AI claim analysis (returns array of claim objects {text, supported:boolean, referenceSuggestion})
  const claims = await checkClaimsAI(fileUrl);

  const { data: promo, error } = await supabase.from('promo_materials')
    .insert({ tenant_id: tenantId, file_url: fileUrl, file_name: fileName, uploader_id: userId, status: 'In Review', channels, claims })
    .select('*').single();
  if (error) return res.status(500).json({ message: error.message });

  // Create MLR review tasks (Med, Legal, Reg)
  const roles = ['Medical', 'Legal', 'Regulatory'];
  await supabase.from('promo_tasks').insert(roles.map(role => ({ tenant_id: tenantId, promo_id: promo.id, role, status: 'Pending' })));

  res.json(promo);
});

// GET /api/promo/:id â€“ details + tasks
router.get('/:id', verifyJwt, async (req, res) => {
  const { tenantId } = req.user;
  const { data: promo } = await supabase.from('promo_materials').select('*').eq('id', req.params.id).eq('tenant_id', tenantId).single();
  const { data: tasks } = await supabase.from('promo_tasks').select('*').eq('promo_id', promo.id);
  res.json({ promo, tasks });
});

// POST /api/promo/task/:taskId/approve â€“ reviewer approves
router.post('/task/:taskId/approve', verifyJwt, async (req, res) => {
  const { taskId } = req.params;
  const { tenantId } = req.user;
  await supabase.from('promo_tasks').update({ status: 'Approved', approved_at: new Date() }).eq('id', taskId).eq('tenant_id', tenantId);
  // if all tasks approved, set promo status
  const { data: task } = await supabase.from('promo_tasks').select('promo_id').eq('id', taskId).single();
  const { data: remaining } = await supabase.from('promo_tasks').select('*').eq('promo_id', task.promo_id).eq('status', 'Pending');
  if (remaining.length === 0) {
    await supabase.from('promo_materials').update({ status: 'Approved' }).eq('id', task.promo_id);
  }
  res.json({ ok: true });
});

export default router;

//----------------------------------------------------------------
// ðŸ“‚ client/pages/PromoReview.jsx â€“ reviewer UI
//----------------------------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Button } from '@/components/ui/button';

export default function PromoReview({ promoId }) {
  const [promo, setPromo] = useState(null);
  const [tasks, setTasks] = useState([]);
  useEffect(() => { load(); }, [promoId]);
  async function load() {
    const { data } = await axios.get(`/api/promo/${promoId}`);
    setPromo(data.promo);
    setTasks(data.tasks);
  }
  async function approve(taskId) {
    await axios.post(`/api/promo/task/${taskId}/approve`);
    load();
  }
  if (!promo) return <div className="p-6">Loading promoâ€¦</div>;
  return (
    <div className="p-8 space-y-6">
      <h1 className="text-2xl font-bold">Promo Review â€“ {promo.file_name}</h1>
      <iframe src={promo.file_url} className="w-full h-96 border" title="preview" />

      <h2 className="text-xl font-semibold mt-4">AI Claim Checks</h2>
      <ul className="list-disc ml-5 text-sm">
        {promo.claims.map((c, i) => (
          <li key={i} className={c.supported ? 'text-green-700' : 'text-red-600'}>
            {c.text} {c.supported ? 'âœ”' : 'âš  unsupported'} {c.referenceSuggestion && `(Suggest ref: ${c.referenceSuggestion})`}
          </li>
        ))}
      </ul>

      <h2 className="text-xl font-semibold mt-4">Review Tasks</h2>
      {tasks.map(t => (
        <div key={t.id} className="border p-3 flex justify-between items-center mb-2">
          <span>{t.role}</span>
          {t.status === 'Pending' ? <Button size="sm" onClick={() => approve(t.id)}>Approve</Button> : <span className="text-green-600 text-sm">Approved</span>}
        </div>
      ))}
      {promo.status === 'Approved' && <div className="p-4 bg-green-50 text-green-700 rounded">Promo piece Approved â€“ ready for distribution!</div>}
    </div>
  );
}

//----------------------------------------------------------------
// ðŸ“‚ server/services/ai.js â€“ add claim checker helper
//----------------------------------------------------------------
export async function checkClaimsAI(fileUrl) {
  const resp = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [
      { role: 'system', content: 'You review pharmaceutical promotional claims. For each claim, say if it needs reference or is unsupported.' },
      { role: 'user', content: `Analyze promo from url: ${fileUrl}. Return array JSON: [{text, supported, referenceSuggestion}].` }
    ],
    max_tokens: 300
  });
  try { return JSON.parse(resp.choices[0].message.content); } catch { return []; }
}

//----------------------------------------------------------------
// ðŸ”— Integration steps
//----------------------------------------------------------------
// 1. Supabase tables:
//    â€¢ promo_materials (id uuid pk, tenant_id uuid, file_url text, file_name text, uploader_id uuid, status text, channels jsonb, claims jsonb)
//    â€¢ promo_tasks (id uuid pk, tenant_id uuid, promo_id uuid, role text, status text, approved_at timestamp)
// 2. server/index.js â†’
//    import promoRoutes from './routes/promo.js';
//    app.use('/api/promo', promoRoutes);
// 3. In React router, include <PromoReview promoId={â€¦} /> when a reviewer opens a task.
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
