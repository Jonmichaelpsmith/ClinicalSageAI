// ===== TrialSage GA Code Pack — v6  (2025‑04‑22) =====
// DocuShare + DocuSign + Metabase + Semantic Search + Bulk Import + UX Polish
// NEW in v6  ➜  **Automated IND Assembly Module**
//   • Back‑end service to collect DocuShare docs → eCTD‑style folder tree
//   • Generates required index.xml (backbone file) + m1/us/regional.xml stub
//   • Zips package, stores in DocuShare "Submissions" folder and provides download
//   • Front‑end “Assemble IND” wizard with checklist + progress bar
//   • CLI for offline assembly (scripts/buildIND.js)
//   • Validation artefacts: IND-IQ, IND-OQ, IND-PQ (eCTD conformance)
// ───────────────────────────────────────────────

// 0.  ENVIRONMENT VARIABLES  (Replit → Secrets)
// ───────────────────────────────────────────────
DS_SUBMISSIONS_FOLDER = /Shared/TrialSage/Submissions
IND_TEMPLATE_PATH     = /templates/ectd
FDA_APP_NUMBER        = IND000123

// ───────────────────────────────────────────────
// 1.  Directory template (static files)
// ───────────────────────────────────────────────
// Place under /templates/ectd/
//   ├─ 0000 (sequence placeholder)
//   │   ├─ m1/us
//   │   ├─ m2
//   │   ├─ m3
//   │   ├─ index.xml  (token: {{SEQUENCE}})
//   │   └─ util/dtds …

// ───────────────────────────────────────────────
// 2.  scripts/buildIND.js  (CLI + reusable function)
// ───────────────────────────────────────────────
import fs from "fs-extra";
import path from "path";
import xml from "xmlbuilder2";
import * as ds from "../services/docushare.js";
import minimist from "minimist";

export async function assembleIND(sequence = "0000") {
  const tmpDir = path.join("/tmp", `ind_${sequence}`);
  await fs.copy(process.env.IND_TEMPLATE_PATH, tmpDir);
  const seqDir = path.join(tmpDir, sequence);

  // Map required docs → CTD module paths
  const map = {
    "Protocol.pdf":   "m5/53-stud-rep/535-clin/Protocol.pdf",
    "IB.pdf":         "m1/us/ib/IB.pdf",
    "DSUR.pdf":       "m2/24-clin-summ/DSUR.pdf",
    "CMC.pdf":        "m3/32-qual/CMC.pdf",
  };

  const docs = await ds.list();
  for (const [name, dest] of Object.entries(map)) {
    const doc = docs.find(d => d.displayName === name);
    if (!doc) throw new Error(`Missing required doc ${name}`);
    const fileBuf = await ds.download(doc.objectId);
    const outPath = path.join(seqDir, dest);
    await fs.ensureDir(path.dirname(outPath));
    await fs.writeFile(outPath, fileBuf);
  }

  // Build index.xml (simple backbone)
  const idx = xml.create().ele("ectd" )
    .ele("application", { id: process.env.FDA_APP_NUMBER })
      .ele("sequence", { number: sequence, date: new Date().toISOString().slice(0,10) })
      .up().up();
  await fs.writeFile(path.join(seqDir, "index.xml"), idx.end({ prettyPrint:true }));

  const zipPath = `/tmp/ind_${sequence}.zip`;
  await fs.remove(zipPath);
  await fs.exec(`cd ${tmpDir} && zip -r ${zipPath} ${sequence}`);

  // Upload zip back to DocuShare
  const zipBuf = await fs.readFile(zipPath);
  const zipObjectId = await ds.upload(zipBuf, `IND_${sequence}.zip`, process.env.DS_SUBMISSIONS_FOLDER);
  return { zipObjectId, zipPath };
}

if (require.main === module) {
  const { sequence = "0000" } = minimist(process.argv.slice(2));
  assembleIND(sequence).then(r => console.log("Done", r));
}

// ───────────────────────────────────────────────
// 3.  routes/ind.js  (mount under /api)
// ───────────────────────────────────────────────
import { Router } from "express";
import { assembleIND } from "../scripts/buildIND.js";
const ind = Router();

// POST /api/ind/assemble { sequence }
ind.post("/ind/assemble", async (req, res, next) => {
  try {
    const { sequence } = req.body;
    const out = await assembleIND(sequence ?? "0000");
    res.json(out);
  } catch (e) { next(e); }
});
export default ind;

// Update routes/api.js → api.use(indRoutes)

// ───────────────────────────────────────────────
// 4.  Front‑end  — src/components/INDAssembler.jsx
// ───────────────────────────────────────────────
import { useState } from "react";
import { DocsChecklist } from "./DocsChecklist";
import { toast } from "react-hot-toast";

const REQUIRED = ["Protocol.pdf", "IB.pdf", "DSUR.pdf", "CMC.pdf"];
export default function INDAssembler() {
  const [seq, setSeq] = useState("0000");
  const build = async () => {
    toast.promise(
      fetch("/api/ind/assemble", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ sequence: seq }) })
        .then(r => r.json()),
      {
        loading: "Assembling IND…",
        success: ({ zipObjectId }) => `IND ready! ObjectId ${zipObjectId}`,
        error: (e) => `Failed: ${e.message}`,
      }
    );
  };
  return (
    <div className="p-6 max-w-lg mx-auto space-y-4">
      <h2 className="text-xl font-bold">IND Assembly</h2>
      <DocsChecklist required={REQUIRED}/>
      <input value={seq} onChange={e=>setSeq(e.target.value)} className="border rounded px-3 py-1" placeholder="Sequence (0000)" />
      <button onClick={build} className="bg-indigo-600 text-white px-4 py-2 rounded-lg">Build & Upload</button>
    </div>
  );
}
// Add route: <Route path="/ind" element={<INDAssembler/>} />
// Add TopNavigation icon (lucide FilePlus) → “IND Builder”

// ───────────────────────────────────────────────
// 5.  Validation artefacts
// ───────────────────────────────────────────────
// • IND-IQ.docx  — template install, env vars, DocuShare folder perms
// • IND-OQ.xlsx  — assemble => zip hash, index.xml schema validation
// • IND-PQ.docx  — real protocol submission simulation

// ───────────────────────────────────────────────
// END v6 — Automated IND Assembly Module
// ───────────────────────────────────────────────
