#!/usr/bin/env bash
set -e

pip install -q cryptography==42.*

cd "$REPL_HOME"

# ---------------------------------------------------------------------------
# 1) credentials.py – encrypted store helpers
cat > ind_automation/credentials.py << 'PY'
import json, os, base64, hashlib
from pathlib import Path
from cryptography.fernet import Fernet, InvalidToken

ENC_KEY = os.getenv("ESG_ENC_KEY")
if not ENC_KEY:
    raise RuntimeError("Set ESG_ENC_KEY (32‑byte base64) in Secrets.")
try:
    fernet = Fernet(ENC_KEY)
except Exception as e:
    raise RuntimeError("Invalid ESG_ENC_KEY: %s" % e)

STORE = Path("data/esg_creds")
STORE.mkdir(parents=True, exist_ok=True)

# ---------- helpers ----------

def _path(org: str):
    return STORE / f"{org}.json"


def save(org: str, creds: dict):
    """Encrypt & persist creds dict (host, port, user, key_pem)."""
    token = fernet.encrypt(json.dumps(creds).encode())
    _path(org).write_bytes(token)


def load(org: str) -> dict | None:
    try:
        token = _path(org).read_bytes()
        return json.loads(fernet.decrypt(token))
    except (FileNotFoundError, InvalidToken):
        return None


def delete(org: str):
    try:
        _path(org).unlink()
    except FileNotFoundError:
        pass


def fingerprint(pem: str):
    """SHA‑256 fingerprint for display."""
    return hashlib.sha256(pem.encode()).hexdigest()[:16]
PY

# ---------------------------------------------------------------------------
# 2) Patch FastAPI – ESG creds CRUD routes (admin‑only stub auth)
python - << 'PY'
import pathlib, textwrap
main = pathlib.Path("ind_automation/main.py")
code = main.read_text()
if "esg credential CRUD" not in code:
    code = code.replace(
        "from ind_automation import ectd_ga, tasks",
        "from ind_automation import ectd_ga, tasks, credentials")

    code += textwrap.dedent("""
    # ---------- ESG credential CRUD ----------
    def _admin():
        # TODO wire to real auth; for now always OK
        return True

    @app.post("/api/org/{org}/esg/creds")
    async def save_creds(org: str, body: dict):
        if not _admin(): raise HTTPException(403)
        required = {"host", "port", "user", "key_pem"}
        if not required.issubset(body):
            raise HTTPException(400, "Missing fields: host port user key_pem")
        credentials.save(org, body)
        db.append_history(org, {
            "type": "esg_creds",
            "action": "save",
            "fingerprint": credentials.fingerprint(body["key_pem"]),
            "timestamp": datetime.datetime.utcnow().isoformat()
        })
        return {"status": "saved"}

    @app.get("/api/org/{org}/esg/creds")
    async def get_creds(org: str):
        if not _admin(): raise HTTPException(403)
        c = credentials.load(org)
        if not c: raise HTTPException(404, "No creds")
        return {k: ("***" if k=="key_pem" else v) for k, v in c.items()} | {
            "fingerprint": credentials.fingerprint(c["key_pem"])
        }

    @app.delete("/api/org/{org}/esg/creds")
    async def delete_creds(org: str):
        if not _admin(): raise HTTPException(403)
        credentials.delete(org)
        return {"status": "deleted"}
    """)
    main.write_text(code)
PY

# ---------------------------------------------------------------------------
# 3) Update tasks.submit_to_esg – fetch creds with decrypt
python - << 'PY'
import pathlib, re, textwrap
tasks = pathlib.Path("ind_automation/tasks.py"); code = tasks.read_text()
if "credentials.load" not in code:
    code = code.replace("from ind_automation import esg_client, db",
                         "from ind_automation import esg_client, db, credentials")
    code = code.replace(
        "zip_path = pathlib.Path",
        "creds = credentials.load(pid)\n    if creds:  # override env vars dynamically\n        os.environ.update({\n            'ESG_HOST': creds['host'],\n            'ESG_PORT': str(creds['port']),\n            'ESG_USER': creds['user'],\n            'ESG_KEY' : creds['key_pem'],\n        })\n    zip_path = pathlib.Path")
    tasks.write_text(code)
PY

# ---------------------------------------------------------------------------
# 4) React EsgSettings.jsx + route
mkdir -p client/src/components
cat > client/src/components/EsgSettings.jsx << 'JSX'
import React, { useState, useEffect } from "react";
import api from "../services/api";

export default function EsgSettings({ org }) {
  const blank = { host: "", port: "10022", user: "", key_pem: "" };
  const [form, setForm] = useState(blank);
  const [finger, setFinger] = useState(null);

  const load = () => {
    api.get(`/api/org/${org}/esg/creds`)
      .then(({ data }) => {
        setFinger(data.fingerprint);
        setForm({ ...blank, host: data.host, port: data.port, user: data.user });
      })
      .catch(() => {});
  };
  useEffect(load, [org]);

  const save = () => {
    api.post(`/api/org/${org}/esg/creds`, form).then(load);
  };
  const del = () => {
    if (window.confirm("Delete ESG credentials?"))
      api.delete(`/api/org/${org}/esg/creds`).then(() => { setForm(blank); setFinger(null); });
  };

  const h = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  return (
    <div className="space-y-2 border p-4 rounded">
      <h3 className="font-semibold">FDA ESG Credentials</h3>
      {[
        ["Host", "host"],
        ["Port", "port"],
        ["User", "user"],
      ].map(([label, key]) => (
        <div key={key}>
          <label className="text-sm">{label}</label>
          <input className="border p-1 w-full" name={key} value={form[key]} onChange={h} />
        </div>
      ))}
      <label className="text-sm">Private Key (PEM)</label>
      <textarea
        name="key_pem"
        className="border p-1 w-full text-xs h-32"
        value={form.key_pem}
        onChange={h}
      />
      {finger && <p className="text-xs text-gray-600">Fingerprint: {finger}</p>}
      <div className="space-x-2">
        <button className="bg-blue-600 text-white px-3 py-1 rounded" onClick={save}>Save</button>
        {finger && <button className="bg-red-600 text-white px-3 py-1 rounded" onClick={del}>Delete</button>}
      </div>
    </div>
  );
}
JSX

# 5) Add route in sidebar/page (simple link)
python - << 'PY'
import pathlib, re, textwrap
page = pathlib.Path("client/src/pages/IndAutomationPage.jsx"); code = page.read_text()
if "EsgSettings" not in code:
    code = code.replace(
        'import HistoryTable',
        'import HistoryTable from "../components/HistoryTable";\nimport EsgSettings from "../components/EsgSettings"'
    )
    # add settings tab
    code = code.replace('["Module1", "Module2", "Module3", "eCTD GA", "ESG", "History"]',
                        '["Module1", "Module2", "Module3", "eCTD GA", "ESG", "ESG Settings", "History"]')
    pane = textwrap.dedent("""
      {tab === "ESG Settings" && <EsgSettings org={selected.project_id} />}
    """)
    code = code.replace('{tab === "ESG"', pane + '\n{tab === "ESG"', 1)
    page.write_text(code)
PY

# ---------------------------------------------------------------------------

echo "✅ ESG credential management installed – remember to set ESG_ENC_KEY secret (base64 Fernet key)"