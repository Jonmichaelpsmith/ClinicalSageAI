#!/usr/bin/env bash
set -e
cd "$REPL_HOME"

python - << 'PY'
import pathlib, textwrap
tasks = pathlib.Path('ind_automation/tasks.py'); code = tasks.read_text()
if 'generate_and_notify_pdf' not in code:
    code = code.replace('from ind_automation import esg_client, db, credentials',
                        'from ind_automation import esg_client, db, credentials, insights_pdf, branded_pdf')
    code = textwrap.dedent(code) + textwrap.dedent("""
    import os, io, datetime, asyncio, json, requests, pytz
    from celery.schedules import crontab

    TEAMS_WEBHOOK_URL = os.getenv('TEAMS_WEBHOOK_URL')
    PUBLIC_DIR = pathlib.Path('public/insights_reports'); PUBLIC_DIR.mkdir(parents=True, exist_ok=True)
    BASE_URL = os.getenv('BASE_URL', 'http://localhost:3000')

    @celery_app.task
    def generate_and_notify_pdf(org):
        # 1) Generate snapshot bytes
        pdf_bytes = asyncio.run(insights_pdf.render_pdf(f"{BASE_URL}/#/insights?org={org}&print=1"))
        branded = branded_pdf.brand_pdf(pdf_bytes, org)
        # 2) save to public folder
        fname = f"Insights_{org}_{datetime.date.today()}.pdf"
        path = PUBLIC_DIR / fname; path.write_bytes(branded.read())
        url = f"{BASE_URL}/files/insights_reports/{fname}"

        # 3) log history
        db.append_history(org, {"type": "insights_pdf", "url": url, "timestamp": datetime.datetime.utcnow().isoformat()})

        # 4) Teams card
        if TEAMS_WEBHOOK_URL:
            payload = {
                "@type": "MessageCard", "@context": "https://schema.org/extensions",
                "summary": "Weekly Insights Report",
                "themeColor": "0076D7",
                "title": f"Weekly Compliance Insights – {org}",
                "text": f"[Download PDF]({url}) – generated {datetime.date.today()}."
            }
            try:
                requests.post(TEAMS_WEBHOOK_URL, json=payload, timeout=5)
            except Exception as e:
                print('Teams send error', e)

    # 5) schedule for each org
    @celery_app.on_after_finalize.connect
    def setup_weekly(sender, **_):
        sender.add_periodic_task(
            crontab(hour=15, minute=0, day_of_week='mon'),  # 15:00 UTC ≈ 08:00 PT
            generate_all_pdfs.s(),
            name='weekly pdf'
        )

    @celery_app.task
    def generate_all_pdfs():
        for f in pathlib.Path('data/projects').glob('*.json'):
            org = f.stem
            generate_and_notify_pdf.delay(org)
    """)
    tasks.write_text(code)
PY

# ensure /files route exists (simple Sanic static)
python - << 'PY'
import pathlib, textwrap
main = pathlib.Path('ind_automation/main.py'); code = main.read_text()
if 'StaticFiles' not in code:
    code = code.replace('from fastapi import', 'from fastapi import')
    code = code.replace('from fastapi.responses import', 'from fastapi.responses import')
    code += textwrap.dedent("""
    from fastapi.staticfiles import StaticFiles
    app.mount('/files', StaticFiles(directory='public'), name='files')
    """)
    main.write_text(code)
PY

echo '✅ Weekly Insights PDF scheduler installed – restart Celery beat/worker.'