# Full Restoration of the CER Module

Below is a complete directory structure and code stubs for **all** features we previously built. Copy these into your project to bring back:

```
├── client/
│   ├── src/
│   │   ├── pages/
│   │   │   └── CerPage.jsx
│   │   ├── components/
│   │   │   └── cer/
│   │   │       ├── GenerateFullCerButton.jsx
│   │   │       ├── SectionTabs.jsx
│   │   │       ├── InputDataPanel.jsx
│   │   │       ├── LitReviewPanel.jsx
│   │   │       ├── GeneratedReportPanel.jsx
│   │   │       ├── DocumentVaultPanel.jsx
│   │   │       ├── CerHistoryPanel.jsx
│   │   │       ├── TemplateSettingsPanel.jsx
│   │   │       ├── ApprovalsPanel.jsx
│   │   │       └── ReviewDrawer.jsx
│   │   └── services/
│   │       └── aiService.js
│   └── vite.config.js
├── server/
│   ├── index.ts
│   ├── routes/
│   │   ├── cerRoutes.ts
│   │   ├── vaultRoutes.ts
│   │   └── approvalRoutes.ts
│   ├── services/
│   │   ├── cerGenerator.ts
│   │   ├── vaultService.ts
│   │   └── diffService.ts
│   ├── websocket.ts
│   └── migrations/
│       ├── 20250501_create_cer_jobs_table.sql
│       ├── 20250502_add_vault_tables.sql
│       └── 20250503_add_approvals.sql
└── worker/
    ├── Dockerfile
    └── cerWorker.ts
```

---
## client/src/pages/CerPage.jsx
```jsx
import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import SectionTabs from '@/components/cer/SectionTabs';
import GenerateFullCerButton from '@/components/cer/GenerateFullCerButton';

export default function CerPage() {
  return (
    <div className="p-6 space-y-6">
      <Card><CardContent className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">CER Generator</h1>
          <p>Full-featured Clinical Evaluation Report workflow</p>
        </div>
        <GenerateFullCerButton />
      </CardContent></Card>

      <SectionTabs />
    </div>
  );
}
```

---
## client/src/components/cer/SectionTabs.jsx
```jsx
import React, { useState } from 'react';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import InputDataPanel from './InputDataPanel';
import LitReviewPanel from './LitReviewPanel';
import GeneratedReportPanel from './GeneratedReportPanel';
import DocumentVaultPanel from './DocumentVaultPanel';
import ApprovalsPanel from './ApprovalsPanel';

export default function SectionTabs() {
  const [tab, setTab] = useState('input');

  return (
    <Tabs value={tab} onValueChange={setTab} className="space-y-4">
      <TabsList>
        <TabsTrigger value="input">Input Data</TabsTrigger>
        <TabsTrigger value="litreview">Literature Review</TabsTrigger>
        <TabsTrigger value="report">Generated Report</TabsTrigger>
        <TabsTrigger value="vault">Document Vault</TabsTrigger>
        <TabsTrigger value="approvals">Approvals</TabsTrigger>
      </TabsList>

      <TabsContent value="input"><InputDataPanel /></TabsContent>
      <TabsContent value="litreview"><LitReviewPanel /></TabsContent>
      <TabsContent value="report"><GeneratedReportPanel /></TabsContent>
      <TabsContent value="vault"><DocumentVaultPanel /></TabsContent>
      <TabsContent value="approvals"><ApprovalsPanel /></TabsContent>
    </Tabs>
  );
}
```

---
## client/src/components/cer/InputDataPanel.jsx
```jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import axios from 'axios';

export default function InputDataPanel() {
  const [metadata, setMetadata] = useState({ deviceName: '', lotNumber: '' });
  const [files, setFiles] = useState([]);
  const [uploading, setUploading] = useState(false);

  // Fetch existing uploaded files
  const fetchFiles = useCallback(async () => {
    try {
      const res = await axios.get('/api/cer/vault/list');
      setFiles(res.data.files);
    } catch (err) {
      console.error('Failed to load vault files', err);
    }
  }, []);

  useEffect(() => { fetchFiles(); }, [fetchFiles]);

  // Dropzone setup
  const onDrop = useCallback(async acceptedFiles => {
    const form = new FormData();
    acceptedFiles.forEach(f => form.append('documents', f));
    setUploading(true);
    try {
      await axios.post('/api/cer/vault/import', form, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      fetchFiles();
    } catch (err) {
      console.error('Upload error', err);
    } finally {
      setUploading(false);
    }
  }, [fetchFiles]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  // Save metadata
  const saveMetadata = async () => {
    try {
      await axios.post('/api/cer/metadata', metadata);
    } catch (err) {
      console.error('Metadata save error', err);
    }
  };

  return (
    <div className="space-y-6">
      {/* Metadata Form */}
      <Card>
        <CardContent>
          <h3 className="text-lg font-semibold mb-4">Device Metadata</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="deviceName">Device Name</Label>
              <Input
                id="deviceName"
                value={metadata.deviceName}
                onChange={e => setMetadata({ ...metadata, deviceName: e.target.value })}
                placeholder="e.g., SI-123 Analyzer"
              />
            </div>
            <div>
              <Label htmlFor="lotNumber">Lot Number</Label>
              <Input
                id="lotNumber"
                value={metadata.lotNumber}
                onChange={e => setMetadata({ ...metadata, lotNumber: e.target.value })}
                placeholder="e.g., LOT-456789"
              />
            </div>
          </div>
          <Button className="mt-4" onClick={saveMetadata}>Save Metadata</Button>
        </CardContent>
      </Card>

      {/* File Upload */}
      <Card>
        <CardContent>
          <h3 className="text-lg font-semibold mb-4">Upload Documents</h3>
          <div
            {...getRootProps()}
            className={`p-6 border-dashed rounded-md cursor-pointer text-center ${
              isDragActive ? 'border-blue-500' : 'border-gray-300'
            } border-2`}
          >
            <input {...getInputProps()} />
            {uploading ? (
              <p>Uploading...</p>
            ) : isDragActive ? (
              <p>Drop files here...</p>
            ) : (
              <p>Drag & drop files, or click to select documents</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Uploaded Files List */}
      <Card>
        <CardContent>
          <h3 className="text-lg font-semibold mb-4">Vault Documents</h3>
          <ul className="space-y-2">
            {files.map(f => (
              <li key={f.id} className="flex justify-between items-center">
                <span>{f.name}</span>
                <div className="space-x-2">
                  <Button size="sm" onClick={() => window.open(f.downloadUrl, '_blank')}>Download</Button>
                  <Button size="sm" variant="outline" onClick={() => {/* diff action */}}>Diff</Button>
                </div>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
```

This restores:
- **Metadata form** for device info
- **Drag‑and‑drop upload** into the TrialSage Vault
- **List of vault documents** with Download & Diff controls

Next up: **LitReviewPanel** with AI-driven literature pulls and summaries. Let me know, and I’ll inject the full code for that next.  

