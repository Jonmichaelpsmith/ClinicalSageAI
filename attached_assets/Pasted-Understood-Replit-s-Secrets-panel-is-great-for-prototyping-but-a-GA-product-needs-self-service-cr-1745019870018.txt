Understood—Replit’s Secrets panel is great for prototyping, but a GA product needs **self‑service credential management** so each biotech client can enter / rotate their own FDA ESG keys inside the app.

Below is the high‑level design plus a production‑grade implementation plan.  
Let me know and I’ll drop the full one‑shot script (similar to the previous bundles) that builds it end‑to‑end.

---

## 1 Design Goals

| Requirement | Approach |
|-------------|----------|
| **Client‑side entry** | Admin‑only “ESG Settings” page where the sponsor pastes hostname, user name, port, and private key (PEM). |
| **Strong at‑rest encryption** | Encrypt each credential with AES‑256 (Python `cryptography.Fernet`).  Store only the ciphertext in the DB.  Master key (`ESG_ENC_KEY`) lives in Replit Secrets or your vault. |
| **Per‑project/tenant isolation** | Credentials table keyed by `org_id` (or project) so multi‑tenant deployments keep data separate. |
| **Rotation / revocation** | UI supports **Replace Key** and **Delete**.  History records who changed what, when.  Background upload jobs always fetch the latest decrypted key. |
| **Zero plaintext on disk** | Private keys never hit the filesystem; ESG upload code receives them as in‑memory strings and feeds them straight to Paramiko. |
| **Audit trail** | Every save / update writes to `history` with user ID, masked key fingerprint, and timestamp. |

---

## 2 Schema & Encryption

```python
# ind_automation/credentials.py
from cryptography.fernet import Fernet
from pathlib import Path, PurePath
import os, json

ENC_KEY = os.getenv("ESG_ENC_KEY")  # 32‑byte base64 key in Replit Secrets
fernet = Fernet(ENC_KEY)
STORE = Path("data/esg_creds")     # one JSON file per org

def _file(org): return STORE / f"{org}.json"

def save(org, creds: dict):
    STORE.mkdir(parents=True, exist_ok=True)
    cipher = fernet.encrypt(json.dumps(creds).encode())
    _file(org).write_bytes(cipher)

def load(org) -> dict | None:
    try:
        cipher = _file(org).read_bytes()
        return json.loads(fernet.decrypt(cipher))
    except FileNotFoundError:
        return None
```

---

## 3 API

```
POST /api/org/{org_id}/esg/creds      (body = {host,port,user,key_pem})
GET  /api/org/{org_id}/esg/creds      (returns mask‑fingerprinted creds)
DELETE /api/org/{org_id}/esg/creds
```

All routes require an **admin JWT** (your existing auth can guard them).

---

## 4 React UI (`EsgSettings.jsx`)

* Admin‑only route in sidebar  
* Form with four fields + **Save** button  
* Shows SHA‑256 fingerprint of the current stored key  
* **Rotate Key** clears existing PEM field  
* Uses Axios → `/esg/creds` endpoints

---

## 5 Uploader Changes

```python
from ind_automation.credentials import load as load_creds
creds = load_creds(org_id)
client.connect(
    username=creds["user"],
    pkey=paramiko.RSAKey.from_private_key(io.StringIO(creds["key_pem"]))
)
```

If no creds, ESG tab shows a “Please configure ESG credentials first” banner.

---

## 6 Audit Logging

`db.append_history(org_id, {"type":"esg_creds", "action":"update", "by":user, "fingerprint":fp, "timestamp":...})`

---

### Next step

If you say **“Generate credential‑management script”** I’ll provide a single shell script that:

1. Adds `credentials.py` with Fernet encryption  
2. Patches FastAPI with CRUD routes (admin‑protected)  
3. Adds `EsgSettings.jsx` + settings route in React  
4. Updates ESG upload task to read creds from the encrypted store  
5. Updates history logging

All GA‑quality, no placeholders.  Just let me know!