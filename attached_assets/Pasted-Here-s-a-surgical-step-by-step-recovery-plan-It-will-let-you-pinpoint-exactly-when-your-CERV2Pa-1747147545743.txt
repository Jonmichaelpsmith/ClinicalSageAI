Here’s a surgical, step-by-step recovery plan.  It will let you pinpoint exactly *when* your CERV2Page (and related files) got broken, roll back to the last good state, and then remove all the stray components the agent added outside of your CER2V workflow.

---

## 1. Find the last good commit

```bash
# Show your recent history, including when CERV2Page.jsx was touched
git log --pretty=oneline -- client/src/pages/CERV2Page.jsx
```

Scan for the last commit SHA before the very large refactor the agent did (look for the commit message that matches “Revamp the CER page…” etc.).  Let’s call that `<GOOD_SHA>`.

---

## 2. Recover your stable CERV2Page.jsx

```bash
# Restore that file to its state at <GOOD_SHA>
git checkout <GOOD_SHA> -- client/src/pages/CERV2Page.jsx

# Stage & commit that restoration
git add client/src/pages/CERV2Page.jsx
git commit -m "Restore CERV2Page.jsx to last known good state"
```

---

## 3. Remove all stray standalone 510(k)/eSTAR pages

The agent spun up extra pages under `client/src/pages/` and components under `client/src/components/510k` and `…/cer/KAutomationPanel.jsx.bak` etc.  Remove any files you didn’t author:

```bash
# Examples — adjust to match what you see in your tree
git rm client/src/pages/510kPage.jsx
git rm client/src/pages/ESTARPackagePage.jsx
git rm client/src/components/510k/**/*.jsx
git rm client/src/components/cer/KAutomationPanel.jsx.bak
git rm client/src/components/510k/WorkflowPanel.jsx
# …and any other “.bak” or new 510k or eSTAR files you never originally wrote…
```

Commit:

```bash
git commit -m "Prune all standalone 510(k)/eSTAR artifacts — keep everything in CERV2Page.jsx"
```

---

## 4. Verify that only your original CER2V workflow remains

1. Open `client/src/pages/ClientPortalLanding.jsx` and confirm the “Medical Device & Diagnostics” card still points at `/cerv2`.
2. Open `client/src/App.jsx` and confirm there is only one route for your CER2V page (`<Route path="/cerv2" … CERV2Page />`).
3. Open `client/src/pages/CERV2Page.jsx` — it should be exactly the file you restored at step 2, with no references to any 510(k)/eSTAR pages outside of the tab structure you originally designed.

---

## 5. Smoke-test

In your Replit shell:

```bash
# Fresh build
npm run build
npm run start
```

* Hit “Client Portal” → “Medical Device & Diagnostics”
* Confirm your CERV2 interface loads as before, with **only** your original CER and 510(k) tabs inside that one page
* No 404s, no empty screens, and no references to standalone “PackagePreview” or “WorkflowPanel” pages

---

## 6. Lock down your code

1. **Branch protection**: Push these changes to a branch and merge only after you’ve verified.
2. **Remove agent write**: If possible, disable any auto-commit privileges for the Replit agent so it can’t push huge refactors without review.
3. **Add tests**: Create a quick smoke test (e.g. with Cypress or Playwright) that simply navigates to `/cerv2` and checks that your 5 tabs render.  Automate it on every commit to catch wholesale rewrites early.

That will get you back to exactly what you had, with a clear audit of **when** things went wrong (the SHA you rolled back from), and remove every unwanted file the agent dropped.  Let me know once you’ve verified this, and we can re-inject any of those AI enhancements *inside* your CERV2Page.jsx in small, controlled PRs.
