// src/components/ind-wizard/steps/NonclinicalStep.tsx
import React, { useState, useMemo, useEffect } from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useQueryClient, useMutation, useQuery } from '@tanstack/react-query';
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
  Row,
} from '@tanstack/react-table';

// UI Components from shadcn/ui
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from '@/components/ui/use-toast';
import { Separator } from '@/components/ui/separator';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
  ContextMenuSeparator,
} from '@/components/ui/context-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"; // Added Select

// Icons from lucide-react
import { Bot, HelpCircle, Loader2, Sparkles, FileText, Microscope, AlertTriangle, Edit, Trash2, CheckCircle, UploadCloud, FileCheck2 } from 'lucide-react';

// Utilities and Context
import { useWizard } from '../IndWizardLayout';
import { cn } from "@/lib/utils";

// --- API Simulation/Types ---

// Simulate parsing study details from text using AI (e.g., OpenAI Function Calling)
const apiParseStudyText = async (text: string): Promise<Partial<NonclinicalStudy>> => {
    console.log("API CALL: Parsing study text with AI...", text);
    await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate AI processing
    // In a real scenario, this would call backend -> OpenAI Function Calling
    // to extract structured data based on the nonclinicalStudySchema
    // Simulate extracted data:
    let extracted: Partial<NonclinicalStudy> = { id: crypto.randomUUID() };
    if (text.toLowerCase().includes("toxicology")) extracted.studyType = "Toxicology";
    if (text.toLowerCase().includes("pharmacology")) extracted.studyType = "Pharmacology";
    if (text.toLowerCase().includes("rat")) extracted.species = "Rat";
    if (text.toLowerCase().includes("dog")) extracted.species = "Dog";
    extracted.keyFindingsSummary = `AI Parsed Summary: ${text.substring(0, 50)}...`;
    extracted.studyIdentifier = `AI-Parsed-${Date.now() % 1000}`;
    return extracted;
};

// Other API simulations (apiSaveNonclinicalData, apiTriggerAiAnalysis) remain as before...
const apiSaveNonclinicalData = async (data: NonclinicalStepFormData): Promise<{ success: boolean; message: string }> => { /* ... */ return { success: true, message: "Nonclinical data saved." }; };
const apiTriggerAiAnalysis = async (type: 'validation' | 'gap_analysis' | 'summary', contextData: any): Promise<{ result: string; details?: any }> => { /* ... */ return { result: `AI ${type} analysis done.` }; };

// --- Zod Schema Definition ---
// (nonclinicalStudySchema and nonclinicalStepSchema remain the same)
const nonclinicalStudySchema = z.object({
  id: z.string().uuid().or(z.string().min(1)),
  studyIdentifier: z.string().min(3, "Identifier required"),
  studyType: z.string().min(3, "Type required (e.g., Toxicology, Pharmacology)"),
  species: z.string().min(3, "Species required"),
  keyFindingsSummary: z.string().optional(),
  documentLink: z.string().url("Must be a valid URL").optional(),
  // NEW: Add a field for AI validation status (example)
  aiValidationStatus: z.enum(['Pending', 'Reviewed', 'Needs Attention']).default('Pending'),
});

const nonclinicalStepSchema = z.object({
  overallNonclinicalSummary: z.string().optional(),
  studies: z.array(nonclinicalStudySchema).optional().default([]),
});

export type NonclinicalStudy = z.infer<typeof nonclinicalStudySchema>;
type NonclinicalStepFormData = z.infer<typeof nonclinicalStepSchema>;


// --- NonclinicalStudy Editor Form Component (for Dialog) ---
// (Similar structure to MilestoneEditorForm, adapted for NonclinicalStudy schema)
interface StudyEditorFormProps {
  study: Partial<NonclinicalStudy>;
  onSave: (data: NonclinicalStudy) => void;
  onCancel: () => void;
}

function StudyEditorForm({ study, onSave, onCancel }: StudyEditorFormProps) {
  const form = useForm<NonclinicalStudy>({
    resolver: zodResolver(nonclinicalStudySchema),
    defaultValues: {
      id: study.id || crypto.randomUUID(),
      studyIdentifier: study.studyIdentifier || '',
      studyType: study.studyType || '',
      species: study.species || '',
      keyFindingsSummary: study.keyFindingsSummary || '',
      documentLink: study.documentLink || '',
      aiValidationStatus: study.aiValidationStatus || 'Pending',
    },
  });

  const onSubmit = (data: NonclinicalStudy) => { onSave(data); };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {/* Form Fields for studyIdentifier, studyType, species, keyFindingsSummary, documentLink */}
        <FormField control={form.control} name="studyIdentifier" render={({ field }) => (<FormItem><FormLabel>Study Identifier</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
        <FormField control={form.control} name="studyType" render={({ field }) => (<FormItem><FormLabel>Study Type</FormLabel><FormControl><Input placeholder="e.g., Toxicology, PK/PD" {...field} /></FormControl><FormMessage /></FormItem>)} />
        <FormField control={form.control} name="species" render={({ field }) => (<FormItem><FormLabel>Species</FormLabel><FormControl><Input placeholder="e.g., Rat, Dog, Monkey" {...field} /></FormControl><FormMessage /></FormItem>)} />
        <FormField control={form.control} name="keyFindingsSummary" render={({ field }) => (<FormItem><FormLabel>Key Findings Summary</FormLabel><FormControl><Textarea rows={4} {...field} /></FormControl><FormMessage /></FormItem>)} />
        <FormField control={form.control} name="documentLink" render={({ field }) => (<FormItem><FormLabel>Link to Report/Data</FormLabel><FormControl><Input type="url" placeholder="https://..." {...field} /></FormControl><FormMessage /></FormItem>)} />
         {/* Optionally display/edit AI status */}
         <FormField control={form.control} name="aiValidationStatus" render={({ field }) => (<FormItem><FormLabel>AI Validation Status</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue /></SelectTrigger></FormControl><SelectContent><SelectItem value="Pending">Pending</SelectItem><SelectItem value="Reviewed">Reviewed</SelectItem><SelectItem value="Needs Attention">Needs Attention</SelectItem></SelectContent></Select><FormMessage /></FormItem>)} />
        <DialogFooter>
          <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
          <Button type="submit">Save Study</Button>
        </DialogFooter>
      </form>
    </Form>
  );
}


// --- NonclinicalStudy Tracker Component ---
// (Manages the table, context menus, dialogs for studies)
interface NonclinicalStudyTrackerProps {
  studies: NonclinicalStudy[];
  onStudiesChange: (studies: NonclinicalStudy[]) => void;
  triggerAiAssistance: (context: string, study?: NonclinicalStudy) => void; // For AI actions per study
  onEditStudy: (study: NonclinicalStudy) => void; // Callback to open editor dialog
  onDeleteStudy: (id: string) => void; // Callback to delete study
}

function NonclinicalStudyTracker({
    studies,
    onStudiesChange,
    triggerAiAssistance,
    onEditStudy,
    onDeleteStudy
}: NonclinicalStudyTrackerProps) {
    const [sorting, setSorting] = useState<SortingState>([]);

    // Function to simulate AI validation for a single study
    const handleAiValidateStudy = async (study: NonclinicalStudy) => {
        toast({ title: "AI Validation", description: `Requesting AI validation for study: ${study.studyIdentifier}...` });
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        // Update the status locally (in real app, backend might update this)
        const newStatus: NonclinicalStudy['aiValidationStatus'] = Math.random() > 0.3 ? 'Reviewed' : 'Needs Attention';
        const updatedStudies = studies.map(s => s.id === study.id ? { ...s, aiValidationStatus: newStatus } : s);
        onStudiesChange(updatedStudies); // Update parent state
        toast({ title: "AI Validation Complete", description: `Study ${study.studyIdentifier} marked as ${newStatus}.` });
    };

    const columns = useMemo<ColumnDef<NonclinicalStudy>[]>(
        () => [
            { accessorKey: 'studyIdentifier', header: 'Identifier' },
            { accessorKey: 'studyType', header: 'Type' },
            { accessorKey: 'species', header: 'Species' },
            {
                accessorKey: 'aiValidationStatus',
                header: 'AI Status',
                cell: ({ row }) => {
                    const status = row.original.aiValidationStatus;
                    let icon = <HelpCircle className="h-4 w-4 text-gray-400" />;
                    if (status === 'Reviewed') icon = <FileCheck2 className="h-4 w-4 text-green-500" />;
                    if (status === 'Needs Attention') icon = <AlertTriangle className="h-4 w-4 text-orange-500" />;
                    return <Tooltip><TooltipTrigger>{icon}</TooltipTrigger><TooltipContent>{status}</TooltipContent></Tooltip>;
                }
            },
            { accessorKey: 'keyFindingsSummary', header: 'Summary', cell: ({ row }) => <p className="truncate w-40">{row.original.keyFindingsSummary || '-'}</p> },
            {
                id: 'actions', header: 'Actions', cell: ({ row }) => (
                    <Button variant="ghost" size="sm" onClick={() => onEditStudy(row.original)}><Edit className="h-4 w-4" /></Button>
                ),
            },
        ], [onEditStudy] // Add dependencies if needed
    );

    const table = useReactTable({
        data: studies,
        columns,
        state: { sorting },
        onSortingChange: setSorting,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(),
    });

    return (
         <div className="rounded-md border">
          <Table>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => ( <TableRow key={headerGroup.id}> {headerGroup.headers.map((header) => ( <TableHead key={header.id}>{header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}</TableHead> ))} </TableRow> ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <ContextMenu key={row.id}>
                    <ContextMenuTrigger asChild>
                      <TableRow data-state={row.getIsSelected() && 'selected'}>
                        {row.getVisibleCells().map((cell) => ( <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell> ))}
                      </TableRow>
                    </ContextMenuTrigger>
                    <ContextMenuContent className="w-64">
                      <ContextMenuItem inset onClick={() => onEditStudy(row.original)}><Edit className="mr-2 h-4 w-4" />Edit Study Details...</ContextMenuItem>
                      <ContextMenuItem inset onClick={() => handleAiValidateStudy(row.original)}><Bot className="mr-2 h-4 w-4" />AI Validate This Study</ContextMenuItem>
                      {/* Add more AI actions if needed, e.g., summarize findings */}
                      <ContextMenuSeparator />
                      <ContextMenuItem inset onClick={() => onDeleteStudy(row.original.id)} className="text-red-600"><Trash2 className="mr-2 h-4 w-4" />Delete Study</ContextMenuItem>
                    </ContextMenuContent>
                  </ContextMenu>
                ))
              ) : ( <TableRow><TableCell colSpan={columns.length} className="h-24 text-center">No nonclinical studies added yet.</TableCell></TableRow> )}
            </TableBody>
          </Table>
        </div>
    );
}


// --- Main Nonclinical Step Component ---

export default function NonclinicalStep() {
  const { indData, updateIndDataSection, goToNextStep } = useWizard();
  const queryClient = useQueryClient();

  // State for AI analysis, study editor dialog, text parsing
  const [aiAnalysisResult, setAiAnalysisResult] = useState<string | null>(null);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [aiAnalysisType, setAiAnalysisType] = useState<'validation' | 'gap_analysis' | 'summary' | null>(null);
  const [isStudyEditorOpen, setIsStudyEditorOpen] = useState(false);
  const [editingStudy, setEditingStudy] = useState<Partial<NonclinicalStudy> | null>(null);
  const [studyTextToParse, setStudyTextToParse] = useState('');
  const [isParsingText, setIsParsingText] = useState(false);

  // --- Data Fetching (Example) ---
  // (useQuery setup remains the same)
   const { data: initialData, isLoading: isLoadingInitialData } = useQuery({ /* ... */ });

  // --- Form Setup ---
  const form = useForm<NonclinicalStepFormData>({
    resolver: zodResolver(nonclinicalStepSchema),
    defaultValues: initialData?.nonclinicalData || { overallNonclinicalSummary: '', studies: [] },
  });

  // --- Data Mutation (Saving) ---
  // (useMutation setup remains the same)
   const mutation = useMutation({ mutationFn: apiSaveNonclinicalData, /* ... */ });
   function onSubmit(values: NonclinicalStepFormData) { mutation.mutate(values); }

  // --- AI Interaction ---
  // (handleAiAnalysis remains the same)
  const handleAiAnalysis = async (type: 'validation' | 'gap_analysis' | 'summary') => { /* ... */ };

  // --- Study Management Callbacks ---
  const handleStudiesChange = (updatedStudies: NonclinicalStudy[]) => {
      form.setValue('studies', updatedStudies, { shouldValidate: true });
  };

  const handleEditStudy = (study: NonclinicalStudy) => {
      setEditingStudy(study);
      setIsStudyEditorOpen(true);
  };

  const handleDeleteStudy = (id: string) => {
      if (window.confirm('Are you sure you want to delete this study?')) {
          const currentStudies = form.getValues('studies');
          form.setValue('studies', currentStudies.filter(s => s.id !== id), { shouldValidate: true });
          toast({ title: "Study Deleted" });
      }
  };

  const handleSaveStudy = (data: NonclinicalStudy) => {
      const currentStudies = form.getValues('studies');
      const exists = currentStudies.some(s => s.id === data.id);
      let updatedStudies: NonclinicalStudy[];
      if (exists) {
          updatedStudies = currentStudies.map(s => s.id === data.id ? data : s); // Update
      } else {
          updatedStudies = [...currentStudies, data]; // Add new
      }
      form.setValue('studies', updatedStudies, { shouldValidate: true });
      setIsStudyEditorOpen(false);
      setEditingStudy(null);
      toast({ title: "Study Saved" });
  };

  const handleOpenNewStudyDialog = () => {
      setEditingStudy({}); // Empty object for new study
      setIsStudyEditorOpen(true);
  };

  // --- AI Text Parsing ---
  const handleParseStudyText = async () => {
      if (!studyTextToParse.trim()) {
          toast({ title: "Input Needed", description: "Please paste study description text first.", variant: "destructive" });
          return;
      }
      setIsParsingText(true);
      try {
          const parsedData = await apiParseStudyText(studyTextToParse);
          setEditingStudy(parsedData); // Pre-fill editor with parsed data
          setIsStudyEditorOpen(true); // Open editor
          setStudyTextToParse(''); // Clear textarea
          toast({ title: "AI Parsing Complete", description: "Review the extracted details and save." });
      } catch (error: any) {
          toast({ title: "AI Parsing Failed", description: error.message || "Could not parse text.", variant: "destructive" });
      } finally {
          setIsParsingText(false);
      }
  };


  // --- Render Logic ---
  if (isLoadingInitialData) { /* ... Skeleton loading ... */ }

  return (
    <TooltipProvider>
      <Form {...form}>
        <div className="space-y-8">

          {/* Section 1: Overall Summary & AI Analysis */}
          {/* (Card content remains largely the same as previous version) */}
           <Card>
                <CardHeader>
                    <CardTitle>Nonclinical Data Overview</CardTitle>
                    <CardDescription>Summarize findings and utilize AI for analysis.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    {/* Overall Summary Textarea + AI Trigger */}
                    <FormField control={form.control} name="overallNonclinicalSummary" render={/* ... Textarea ... */ ({ field }) => <FormItem><FormLabel>Overall Nonclinical Summary</FormLabel><FormControl><Textarea rows={6} {...field} /></FormControl><FormMessage /></FormItem>} />
                    <Separator />
                    {/* AI Analysis Buttons */}
                    <div className="flex flex-wrap gap-2">
                        <Button type="button" variant="outline" onClick={() => handleAiAnalysis('validation')} disabled={isAiLoading}> {isAiLoading && aiAnalysisType === 'validation' ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <FileText className="mr-2 h-4 w-4" />} AI: Check Requirements </Button>
                        <Button type="button" variant="outline" onClick={() => handleAiAnalysis('gap_analysis')} disabled={isAiLoading}> {isAiLoading && aiAnalysisType === 'gap_analysis' ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <AlertTriangle className="mr-2 h-4 w-4" />} AI: Identify Data Gaps </Button>
                    </div>
                    {/* AI Analysis Result Display */}
                    {aiAnalysisResult && ( <div className="mt-4 p-3 border rounded bg-muted"><p className="text-sm font-medium">AI Analysis Result:</p><p className="text-sm text-muted-foreground">{aiAnalysisResult}</p></div> )}
                     {/* NEW: Placeholder for AI Gap Analysis Visualization */}
                    <div className="mt-4 p-4 border rounded border-dashed text-center text-gray-500">
                        <AlertTriangle className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                        <p className="font-semibold">AI Gap Analysis Visualization Area</p>
                        <p className="text-xs">Results from "Identify Data Gaps" could be visualized here (e.g., checklist, chart).</p>
                    </div>
                </CardContent>
            </Card>


          {/* Section 2: Study Data Organization (Now with Implemented Tracker) */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
                <div>
                    <CardTitle>Nonclinical Study Inventory</CardTitle>
                    <CardDescription>Manage individual nonclinical studies.</CardDescription>
                </div>
                 <div className="flex space-x-2">
                     {/* AI Parse Text Feature */}
                     <Dialog>
                         <DialogTrigger asChild>
                             <Button variant="outline"> <UploadCloud className="mr-2 h-4 w-4" /> Add via Text (AI)</Button>
                         </DialogTrigger>
                         <DialogContent className="sm:max-w-[600px]">
                             <DialogHeader>
                                 <DialogTitle>Add Study from Text Description</DialogTitle>
                                 <DialogDescription>Paste the study description below. AI will attempt to extract key details.</DialogDescription>
                             </DialogHeader>
                             <div className="py-4 space-y-2">
                                 <Label htmlFor="study-text-parser">Paste Study Text:</Label>
                                 <Textarea
                                     id="study-text-parser"
                                     rows={10}
                                     placeholder="Example: A 28-day repeat-dose toxicology study was conducted in Sprague-Dawley rats..."
                                     value={studyTextToParse}
                                     onChange={(e) => setStudyTextToParse(e.target.value)}
                                 />
                             </div>
                             <DialogFooter>
                                <DialogClose asChild><Button type="button" variant="outline">Cancel</Button></DialogClose>
                                <Button type="button" onClick={handleParseStudyText} disabled={isParsingText || !studyTextToParse.trim()}>
                                    {isParsingText ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                                    Parse with AI & Add
                                 </Button>
                             </DialogFooter>
                         </DialogContent>
                     </Dialog>

                     {/* Manual Add Button */}
                     <Button onClick={handleOpenNewStudyDialog}>+ Add Study Manually</Button>
                 </div>
            </CardHeader>
            <CardContent>
              {/* Implemented Nonclinical Study Tracker */}
              <NonclinicalStudyTracker
                  studies={form.watch('studies')} // Watch for changes to update table
                  onStudiesChange={handleStudiesChange}
                  triggerAiAssistance={handleAiTrigger} // Placeholder for now
                  onEditStudy={handleEditStudy}
                  onDeleteStudy={handleDeleteStudy}
              />
            </CardContent>
          </Card>

           {/* Study Editor Dialog */}
           <Dialog open={isStudyEditorOpen} onOpenChange={setIsStudyEditorOpen}>
                <DialogContent className="sm:max-w-[500px]">
                    <DialogHeader>
                        <DialogTitle>{editingStudy?.id && form.getValues('studies').some(s=>s.id === editingStudy.id) ? 'Edit Study' : 'Add New Study'}</DialogTitle>
                        <DialogDescription>
                            {editingStudy?.id ? 'Update the study details below.' : 'Fill in the details for the new study.'}
                        </DialogDescription>
                    </DialogHeader>
                    {/* Render form only when dialog is open */}
                    {editingStudy !== null && (
                        <StudyEditorForm
                            study={editingStudy}
                            onSave={handleSaveStudy}
                            onCancel={() => { setIsStudyEditorOpen(false); setEditingStudy(null); }}
                        />
                    )}
                </DialogContent>
           </Dialog>


           {/* Footer Info & Mutation Status */}
           {/* (Same as previous version) */}
           <div className="text-center text-sm text-muted-foreground mt-4"> Use the layout buttons to navigate or save. </div>
           {mutation.isLoading && ( <div className="flex items-center justify-center text-sm text-blue-600"><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Saving...</div> )}
           {mutation.isError && ( <div className="text-center text-sm text-red-600">Error saving. Please try again.</div> )}

        </div>
      </Form>
    </TooltipProvider>
  );
}
