// ───────────────────────────────────────────────────────────────
// TrialSage Vault – Sprint‑8  ✦ Drag‑and‑Drop Section Re‑order + Smart Folder Pane
// ---------------------------------------------------------------------
//  Objective
//  • Give authors a visual tree of CTD sections with drag‑drop reorder (within same level)
//  • Persist order to DB; PDF & XML adopt custom ordering
//  • Add Smart Folder pane (auto‑group Blocks by subtype: Tables, Figures, References)
// ---------------------------------------------------------------------
//  Deliverables
//  • sql/section_order.sql           – table storing custom sort order per submission
//  • server/routes/sectionOrder.js   – GET / PUT API (bulk update array)
//  • client/components/SectionTree.jsx – drag‑drop tree using @dnd-kit
//  • client/components/SmartFolderPane.jsx – filter tabs (Tables, Figures…)
//  • client/pages/SectionEditorShell.jsx – combines SectionTree + BlockEditor area
//  • PDF / XML builders: read custom order
//  • Integration checklist
// ---------------------------------------------------------------------

// ---------------- sql/section_order.sql ----------------
create table if not exists ind_section_order (
  submission_id uuid references ind_wizards(id),
  section_code text,
  sort_index int,
  primary key(submission_id, section_code)
);

// ---------------- server/routes/sectionOrder.js ----------------
import { Router } from 'express';
import { verifyJwt } from '../middleware/auth.js';
import { supabase } from '../lib/supabaseClient.js';
const r=Router();
// Fetch ordered list
r.get('/:submissionId', verifyJwt, async (req,res)=>{
  const { data } = await supabase.from('ind_section_order').select('*').eq('submission_id',req.params.submissionId).order('sort_index');
  res.json(data);
});
// Save new order (array of section codes)
r.put('/:submissionId', verifyJwt, async (req,res)=>{
  const arr=req.body.order; const sub=req.params.submissionId;
  const upserts = arr.map((code,i)=>({ submission_id:sub, section_code:code, sort_index:i }));
  await supabase.from('ind_section_order').delete().eq('submission_id',sub);
  await supabase.from('ind_section_order').insert(upserts);
  res.json({ ok:true });
});
export default r;

// ---------------- client/components/SectionTree.jsx ----------------
import React, { useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { DndContext, useSortable, arrayMove, closestCenter } from '@dnd-kit/core';
import { sortableKeyboardCoordinates } from '@dnd-kit/sortable';
import { supabase } from '@/lib/supa';
import { GripVertical } from 'lucide-react';

function Item({ id, attributes, listeners, isDragging }){
  return (<div {...attributes} {...listeners} className={`flex items-center gap-2 px-2 py-1 rounded ${isDragging?'bg-blue-100':'hover:bg-gray-100 dark:hover:bg-gray-700'}`}> <GripVertical className="h-3 w-3 text-gray-400"/> <span>{id}</span></div>);
}
export default function SectionTree({ submissionId, onSelect }){
  const qc=useQueryClient();
  const { data:order=[] } = useQuery(['sectionOrder',submissionId], async()=> (await supabase.from('ind_section_order').select('*').eq('submission_id',submissionId).order('sort_index')).data?.map(r=>r.section_code));
  const { mutate:save } = useMutation(async(arr)=>{ await supabase.from('ind_section_order').delete().eq('submission_id',submissionId); await supabase.from('ind_section_order').insert(arr.map((s,i)=>({ submission_id:submissionId, section_code:s, sort_index:i }))); },{ onSuccess:()=>qc.invalidateQueries(['sectionOrder',submissionId])});

  return (<DndContext collisionDetection={closestCenter} onDragEnd={e=>{
    const {active, over}=e; if(active.id!==over.id){ const idx1=order.indexOf(active.id), idx2=order.indexOf(over.id); const arr=arrayMove(order,idx1,idx2); save(arr); }
  }}>
    {order.map(id=>{
      const { attributes, listeners, setNodeRef, isDragging } = useSortable({id});
      return (<div ref={setNodeRef} key={id} onClick={()=>onSelect(id)}><Item id={id} attributes={attributes} listeners={listeners} isDragging={isDragging}/></div>);
    })}
  </DndContext>);
}

// ---------------- client/components/SmartFolderPane.jsx ----------------
import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supa';
const tabs=['All','Tables','Figures','References'];
export default function SmartFolderPane({ submissionId, onSelect }){
  const [tab,setTab]=useState('All'); const [docs,set]=useState([]);
  useEffect(()=>{ load(); },[tab]);
  const load=async()=>{
    const { data }=await supabase.from('ind_blocks').select('id,block_type,section_code').eq('submission_id',submissionId);
    const f=tab==='All'? data : data.filter(d=> (tab==='Tables'&&d.block_type==='table')||(tab==='Figures'&&d.block_type==='figure')||(tab==='References'&&d.block_type==='markdown'&&/(\[\d+\])/g.test(d.content.markdown)) );
    set(f);
  };
  return (<div className="border-r h-full p-2 space-y-2 bg-gray-50 dark:bg-gray-800">
    <div className="flex gap-1 text-xs">
      {tabs.map(t=><button key={t} onClick={()=>setTab(t)} className={`${t===tab?'bg-blue-600 text-white':'bg-gray-200 dark:bg-gray-700 dark:text-gray-300'} px-2 py-0.5 rounded`}>{t}</button>)}
    </div>
    <div className="text-xs overflow-auto max-h-[calc(100vh-150px)]">
      {docs.map(d=><div key={d.id} className="hover:bg-blue-100 dark:hover:bg-gray-700 cursor-pointer px-2 py-1 rounded" onClick={()=>onSelect(d.section_code)}>{d.section_code} – {d.block_type}</div>)}
    </div>
  </div>);
}

// ---------------- client/pages/SectionEditorShell.jsx ----------------
import React, { useState } from 'react';
import SectionTree from '../components/SectionTree.jsx';
import SmartFolderPane from '../components/SmartFolderPane.jsx';
import BlockEditor from '../components/BlockEditor.jsx';
export default function SectionEditorShell({ submissionId }){
  const [active,setActive]=useState('2.7.1');
  return (
    <div className="flex h-[calc(100vh-80px)]">
      <SectionTree submissionId={submissionId} onSelect={setActive}/>
      <SmartFolderPane submissionId={submissionId} onSelect={setActive}/>
      <div className="flex-1 overflow-auto p-4"><h2 className="text-lg font-semibold mb-2">Section {active}</h2><BlockEditor submissionId={submissionId} section={active}/></div>
    </div>);
}

// ---------------- PDF & XML builders (snippet) ----------------
// when iterating sections, fetch order array first:
// const orderArr = (await supabase.from('ind_section_order').select('section_code').eq('submission_id',id).order('sort_index')).data.map(r=>r.section_code);
// then sort blocks accordingly before rendering.

// ---------------- Integration Checklist ----------------
1. `supabase db query < sql/section_order.sql`.
2. Backend: `app.use('/api/sections/order', verifyJwt, sectionOrderRoutes);`.
3. Add `SectionEditorShell` as the editor tab in SubmissionHome.
4. Install deps: `npm i @dnd-kit/core @dnd-kit/sortable lucide-react classnames`.
5. Update PDF/XML builder to respect custom order as shown above.
// ───────────────────────────────────────────────────────────────
