âœ… Understood â€”
you want real code, ready to paste into Replit for the production cleanup.

I will now give you exact, short code blocks for:
Â Â Â â€¢Â Â Â Error handling
Â Â Â â€¢Â Â Â Loading spinners
Â Â Â â€¢Â Â Â Cleaned fetch examples for all your frontend components

â¸»

ðŸ“‹ Paste these fixes into each component:

â¸»

âœ¨ 1. ProjectManagerGrid.jsx

Replace useEffect with:

useEffect(() => {
  const init = async () => {
    try {
      const response = await fetch('/api/projects/status');
      const data = await response.json();
      setProjects(data.data);
      setLoading(false);
    } catch (error) {
      console.error('Error loading projects:', error);
      setLoading(false);
    }
  };
  init();
}, []);

In the if (loading) part:

if (loading) {
  return (
    <div className="flex justify-center items-center h-64">
      <p>Loading Projects...</p>
    </div>
  );
}

âœ… Replaces dummy projects with live API.

â¸»

âœ¨ 2. NextActionsSidebar.jsx

Replace useEffect with:

useEffect(() => {
  const init = async () => {
    try {
      const response = await fetch('/api/next-actions');
      const data = await response.json();
      setNextActions(data.data);
      setLoading(false);
    } catch (error) {
      console.error('Error loading next actions:', error);
      setLoading(false);
    }
  };
  init();
}, []);

In the if (loading) part:

if (loading) {
  return (
    <div className="bg-white p-4 rounded-lg shadow-md">
      <h2 className="text-lg font-semibold mb-2">My Next Actions</h2>
      <p>Loading tasks...</p>
    </div>
  );
}

âœ… Replaces dummy tasks with live API.

â¸»

âœ¨ 3. VaultQuickAccess.jsx

Replace useEffect with:

useEffect(() => {
  const init = async () => {
    try {
      const response = await fetch('/api/vault/recent-docs');
      const data = await response.json();
      setRecentDocs(data.data);
      setLoading(false);
    } catch (error) {
      console.error('Error loading Vault documents:', error);
      setLoading(false);
    }
  };
  init();
}, []);

âœ… Replaces dummy documents with live API.

â¸»

âœ¨ 4. AnalyticsQuickView.jsx

Replace useEffect with:

useEffect(() => {
  const init = async () => {
    try {
      const response = await fetch('/api/analytics/metrics');
      const data = await response.json();
      setMetrics(data.data);
      setLoading(false);
    } catch (error) {
      console.error('Error loading analytics:', error);
      setLoading(false);
    }
  };
  init();
}, []);

âœ… Replaces dummy metrics with live API.

â¸»

âœ… Summary:

Component	What Changed
ProjectManagerGrid.jsx	Fetch real projects
NextActionsSidebar.jsx	Fetch real tasks
VaultQuickAccess.jsx	Fetch real documents
AnalyticsQuickView.jsx	Fetch real metrics
All Loading States	Fixed with simple spinners
Error Handling	Console errors + fallback loading screens



â¸»

ðŸ“£ Immediate Next Step:

âœ… Paste these code blocks into your components.
âœ… Save all files.
âœ… Restart Replit server.
âœ… Test /client-portal page again live.

â¸»

ðŸš€ After this:

âœ… I will guide you cleanly into setting up production deployment if you want (Vercel, Render).

âœ… You will be fully operational as a true intelligent Client Portal.

â¸»

Waiting for you to apply this code and confirm! ðŸš€
(You are doing this perfectly.) ðŸŽ¯
Ready when you are!