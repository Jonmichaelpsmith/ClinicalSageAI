// SubmissionBuilder.tsx – drag‑drop tree with QC badges, bulk approve, and region‑specific rule hints
import React, { useEffect, useState, useMemo } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import update from 'immutability-helper';
import { CheckCircle, XCircle, AlertTriangle } from 'lucide-react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

/** Region rule map: module => list of regexes that must appear */
const REGION_RULES: Record<string, Record<string, RegExp[]>> = {
  FDA: {
    'm1': [/1571/i, /1572/i, /3674/i],
    'm1.3': [/brochure/i],
  },
  EMA: {
    'm1': [/application form/i, /cover letter/i],
  },
  PMDA: {
    'm1': [/12\-1/i],
    'jp‑annex': [/annex/i],
  },
};

const REGION_FOLDERS: Record<string, string[]> = {
  FDA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  EMA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  PMDA: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp‑annex'],
};

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

export default function SubmissionBuilder({ region = 'FDA' }: { region?: string }) {
  const regionHints: Record<string, string[]> = {
    FDA: [
      'Module 1 sub‑folders: m1.1 (forms), m1.3 (IB/Brochure), m1.15 (Cover Letter)',
      'File name ≤ 64 chars, no spaces; PDF/A‑1b only',
      'Clinical protocols → m5.3.1, CSR → m5.3.5'
    ],
    EMA: [
      'Use EU envelope (eu‑regional.xml) – include Application Form',
      'Module 1.2: Overviews, 1.3: SPC/Label/Leaflet, 1.5: SmPC',
      'Rename PDFs with "eu" suffix where required'
    ],
    PMDA: [
      'JP Annex folder required for Japanese translations',
      'Include CTD TOC PDF in m1',
      'Yakuji‑Ho # index table mandatory'
    ]
  };
{ region = 'FDA' }: { region?: string }) {
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);
  const [selected, setSelected] = useState<Set<number>>(new Set());

  useEffect(() => {
    (async () => {
      const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
      const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
      const folders = REGION_FOLDERS[region].map((m, idx) => ({ id: 10_000 + idx, parent: 0, text: m, droppable: true }));
      const items = docs.map(d => ({
        id: d.id,
        parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
        text: d.title,
        droppable: false,
        data: d,
      }));
      setTree([root, ...folders, ...items]);
      setLoading(false);
    })();
  }, [region]);

  const handleDrop = (newTree: Node[]) => setTree(newTree);

  const toggleSelect = (id: number) => setSelected(prev => {
    const n = new Set(prev);
    n.has(id) ? n.delete(id) : n.add(id);
    return n;
  });

  /** rule evaluation */
  const ruleResult = useMemo(() => {
    const rules = REGION_RULES[region] || {};
    const satisfied: Record<string, boolean> = {};
    const docs = tree.filter(n => !n.droppable && n.parent !== 0).map(n => n.data as Doc);
    Object.entries(rules).forEach(([mod, regexes]) => {
      satisfied[mod] = regexes.every(rx => docs.some(d => d.module.startsWith(mod) && rx.test(d.title)));
    });
    return satisfied;
  }, [tree, region]);

  const bulkApprove = async () => {
    try {
      await fetch('/api/documents/bulk-approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: Array.from(selected) })
      });
      toast.success('Bulk approval started');
      setSelected(new Set());
    } catch {
      toast.error('Bulk approve failed');
    }
  };

  if (loading) return <p className="text-center mt-4">Loading…</p>;

  return (
    <div className="container py-4">
      <h2 className="mb-2">Submission Builder <span className="badge bg-secondary ms-2">{region}</span></h2>
      <div className="row">
        <div className="col-md-8">
          <DndProvider backend={HTML5Backend}>
            <Tree
              tree={tree}
              rootId={0}
              render={renderNode}
              onDrop={handleDrop}
            />
          </DndProvider>
          <div className="d-flex gap-3 mt-3">
            <button className="btn btn-primary" onClick={saveOrder}>Save Order</button>
            <button className="btn btn-outline-success" disabled={selected.size === 0} onClick={bulkApprove}>Bulk Approve + QC</button>
          </div>
        </div>
        <div className="col-md-4">
          <h5 className="mb-2">Region Requirements</h5>
          <ul className="list-group">
            {Object.entries(REGION_RULES[region] || {}).map(([mod, _]) => (
              <li key={mod} className="list-group-item d-flex align-items-center gap-2">
                {ruleResult[mod] ? <CheckCircle className="text-success" size={16}/> : <AlertTriangle className="text-warning" size={16}/>}
                {mod}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );

  function renderNode(node: Node, { depth, isOpen, onToggle }: any) {
    if (node.droppable) {
      return (
        <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-1 py-1">
          <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen ? '▾' : '▸'}</button>
          <strong>{node.text}</strong>
        </div>
      );
    }
    const qcStatus = node.data?.qc_json?.status;
    return (
      <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-2 py-1">
        <input type="checkbox" checked={selected.has(node.id)} onChange={() => toggleSelect(node.id)} />
        {qcStatus === 'passed' ? <CheckCircle size={14} className="text-success"/> : <XCircle size={14} className="text-danger"/>}
        <span>{node.text}</span>
      </div>
    );
  }

  function saveOrder() {
    const ordered = tree.filter(n => !n.droppable && n.parent !== 0).map((n, idx) => ({
      id: n.id,
      module: tree.find(f => f.id === n.parent)!.text,
      order: idx
    }));
    fetch('/api/documents/builder-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ docs: ordered })
    }).then(() => toast.success('Order saved'));
  }
}

async function fetchJson(url: string) {
  const r = await fetch(url);
  if (!r.ok) throw new Error('fetch failed');
  return r.json();
}
