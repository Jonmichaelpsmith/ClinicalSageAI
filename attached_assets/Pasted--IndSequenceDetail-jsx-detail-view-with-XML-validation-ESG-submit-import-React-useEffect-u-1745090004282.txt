// IndSequenceDetail.jsx â€“ detail view with XML validation & ESG submit
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Spinner } from 'reactstrap';
import { FileText, UploadCloud, ShieldCheck, ShieldOff } from 'lucide-react';

export default function IndSequenceDetail() {
  const { sequenceId } = useParams();
  const [sequence, setSequence] = useState(null);
  const [docs, setDocs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [validating, setValidating] = useState(false);
  const [validation, setValidation] = useState(null); // {status, errors}
  const [error, setError] = useState('');

  useEffect(() => {
    (async () => {
      try {
        const seq = await (await fetch(`/api/ind/sequence/${sequenceId}`)).json();
        const d = await (await fetch(`/api/ind/sequence/${sequenceId}/docs`)).json();
        setSequence(seq);
        setDocs(d);
      } catch (e) {
        setError(String(e));
      } finally {
        setLoading(false);
      }
    })();
  }, [sequenceId]);

  const runValidate = async () => {
    setValidating(true);
    setError('');
    try {
      const res = await fetch(`/api/ind/sequence/${sequenceId}/validate`);
      if (!res.ok) throw new Error((await res.json()).detail || 'Validation failed');
      setValidation(await res.json());
    } catch (e) {
      setError(String(e));
    } finally {
      setValidating(false);
    }
  };

  const handleSubmit = async () => {
    setSubmitting(true);
    setError('');
    try {
      const res = await fetch(`/api/ind/sequence/${sequenceId}/submit`, { method: 'POST' });
      if (!res.ok) throw new Error((await res.json()).detail || 'Submit failed');
      const json = await res.json();
      setSequence({ ...sequence, status: json.status, submitted_at: new Date().toISOString() });
    } catch (e) {
      setError(String(e));
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return <div className="text-center mt-5"><Spinner /></div>;
  if (error) return <div className="alert alert-danger mt-3">{error}</div>;

  return (
    <div className="container py-4">
      <div className="d-flex align-items-center mb-3 gap-2">
        <FileText size={24}/> <h2 className="mb-0">Sequence {sequence.sequence}</h2>
        {sequence.status === 'Submitted' ? <span className="badge bg-success">Submitted</span> : <span className="badge bg-secondary">Draft</span>}
        {validation && (
          validation.status === 'passed'
            ? <span className="badge bg-success d-flex align-items-center gap-1"><ShieldCheck size={14}/> XML Valid</span>
            : <span className="badge bg-danger d-flex align-items-center gap-1"><ShieldOff size={14}/> XML Errors</span>
        )}
      </div>

      <p><strong>Created:</strong> {new Date(sequence.created).toLocaleString()}</p>
      {sequence.submitted_at && <p><strong>Submitted:</strong> {new Date(sequence.submitted_at).toLocaleString()}</p>}

      <h4 className="mt-4">Documents ({docs.length})</h4>
      <ul className="list-group mb-4">
        {docs.map(d => (
          <li key={d.id} className="list-group-item d-flex justify-content-between align-items-center">
            {d.title}
            <span className="badge bg-info text-dark">{d.module}</span>
          </li>
        ))}
      </ul>

      <h5>XML Backbone</h5>
      <ul>
        <li><a href={`/mnt/data/ectd/${sequence.sequence}/index.xml`} target="_blank" rel="noopener noreferrer">index.xml</a></li>
        <li><a href={`/mnt/data/ectd/${sequence.sequence}/us-regional.xml`} target="_blank" rel="noopener noreferrer">us-regional.xml</a></li>
      </ul>

      {validation && validation.status === 'failed' && (
        <div className="alert alert-warning mt-3">
          <h6 className="mb-2">Validation Errors:</h6>
          {Object.entries(validation.errors).map(([file, errs]) => (
            errs.length > 0 && (
              <div key={file} className="mb-2">
                <strong>{file}</strong>
                <ul className="mb-0">
                  {errs.map((e,i)=>(<li key={i}>{e}</li>))}
                </ul>
              </div>
            )
          ))}
        </div>
      )}

      <div className="d-flex gap-3 mt-4">
        <button className="btn btn-outline-secondary" onClick={runValidate} disabled={validating}>
          {validating ? <Spinner size="sm" /> : 'Validate XML'}
        </button>
        <button className="btn btn-primary" onClick={handleSubmit} disabled={submitting || (validation && validation.status !== 'passed') || sequence.status === 'Submitted'}>
          {submitting ? <Spinner size="sm" /> : <><UploadCloud size={16}/> Submit to FDA</>}
        </button>
      </div>
    </div>
  );
}
