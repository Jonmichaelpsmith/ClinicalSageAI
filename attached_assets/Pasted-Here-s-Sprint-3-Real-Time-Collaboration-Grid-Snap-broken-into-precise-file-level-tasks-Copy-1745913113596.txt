Here’s Sprint 3 (“Real-Time Collaboration + Grid & Snap”) broken into precise file-level tasks. Copy–paste each into your Replit workspace, then restart.

⸻

1. Install Socket.IO

In your client shell:

npm install socket.io-client

In your server shell:

npm install socket.io



⸻

2. Server: Wire up WebSocket Gateway

File: server/server.js
Replace your app.listen(...) block with this pattern (or merge it into your existing server startup):

import express from 'express';
import http from 'http';
import { Server as IOServer } from 'socket.io';
import coauthorRoutes from './routes/coauthor.js';
import coauthorCanvasRoutes from './routes/coauthorCanvas.js';
import timelineRoutes from './routes/timeline.js';

const app = express();
app.use(express.json());
app.use('/api/coauthor', coauthorRoutes);
app.use('/api/coauthor', coauthorCanvasRoutes);
app.use('/api/timeline', timelineRoutes);
// … any other routes …

// Serve React build … (if you have it)

const server = http.createServer(app);
const io = new IOServer(server, { cors: { origin: '*' } });

io.on('connection', socket => {
  console.log(`Socket connected: ${socket.id}`);

  // Layout updates
  socket.on('layout:update', payload => {
    socket.broadcast.emit('layout:update', payload);
  });

  // Cursor movements
  socket.on('cursor:move', cursor => {
    socket.broadcast.emit('cursor:move', cursor);
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Server running on ${PORT}`));



⸻

3. Client: Enhance CanvasWorkbenchV2 for Real-Time & Snap

File: client/src/components/canvas/CanvasWorkbenchV2.jsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
-import ReactFlow, {
+import ReactFlow, {
   MiniMap,
   Controls,
   Background,
   addEdge,
   useNodesState,
   useEdgesState
} from 'reactflow';
import 'reactflow/dist/style.css';
-import NodeDetailPanel from './NodeDetailPanel';
-import { fetchCTDSections, fetchRiskConnections } from '../../api/coauthor';
+import NodeDetailPanel from './NodeDetailPanel';
+import { fetchCTDSections, fetchRiskConnections } from '../../api/coauthor';
+import { io } from 'socket.io-client';

export default function CanvasWorkbenchV2({ onNodeClick }) {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [selectedSection, setSelectedSection] = useState(null);
- const [rfInstance, setRfInstance] = useState(null);
+ const [rfInstance, setRfInstance] = useState(null);
  const [remoteCursors, setRemoteCursors] = useState({});
  const socketRef = useRef(null);
  const containerRef = useRef(null);

  // 1) Load sections & connections once
  useEffect(() => {
    fetchCTDSections()
      .then(data => setNodes(data.map(sec => ({
        id: sec.id,
        type: 'default',
        position: { x: sec.x, y: sec.y },
        data: { label: sec.title, status: sec.status }
      }))))
      .catch(console.error);

    fetchRiskConnections()
      .then(data => setEdges(data.map(c => ({
        id: `e${c.from}-${c.to}`,
        source: c.from,
        target: c.to,
        animated: c.critical,
        style: { stroke: c.critical ? '#dc3545' : '#888', strokeWidth: 2 }
      }))))
      .catch(console.error);
  }, [setNodes, setEdges]);

  // 2) WebSocket setup
  useEffect(() => {
    socketRef.current = io.connect(window.location.origin);
    socketRef.current.on('layout:update', payload => {
      setNodes(ns => ns.map(n =>
        n.id === payload.id
          ? { ...n, position: { x: payload.x, y: payload.y } }
          : n
      ));
    });
    socketRef.current.on('cursor:move', cursor => {
      setRemoteCursors(rc => ({ ...rc, [cursor.userId]: cursor }));
    });
    return () => socketRef.current.disconnect();
  }, [setNodes]);

  // 3) Handle new edges
  const onConnect = useCallback(params => {
    setEdges(es =>
      addEdge({ ...params, animated:true, style:{stroke:'#555', strokeWidth:2} }, es)
    );
  }, [setEdges]);

  // 4) Broadcast layout on drag end
  const handleNodeDragStop = useCallback((event, node) => {
    const { x, y } = node.position;
    socketRef.current.emit('layout:update', { id: node.id, x, y });
  }, []);

  // 5) Capture & broadcast cursor movement
  const handleMouseMove = useCallback(e => {
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    socketRef.current.emit('cursor:move', {
      userId: socketRef.current.id,
      x, y,
      color: '#' + socketRef.current.id.slice(-6),
      label: socketRef.current.id.slice(-4)
    });
  }, []);

  // 6) Export SVG (unchanged)
  const exportSvg = useCallback(() => {
    if (!rfInstance) return;
    const svg = rfInstance.toSVG();
    const blob = new Blob([svg], { type: 'image/svg+xml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'ctd-workbench.svg'; a.click();
  }, [rfInstance]);

  return (
    <div
      ref={containerRef}
      onMouseMove={handleMouseMove}
      style={{ width:'100%', height:'100%', position:'relative', cursor:'grab' }}
    >
      {/* Export button */}
      <button
        onClick={exportSvg}
        style={{
          position:'absolute', top:16, right:16, zIndex:10,
          background:'var(--color-primary)', color:'#fff',
          border:'none', padding:'6px 12px', borderRadius:4,
          cursor:'pointer'
        }}
      >Export SVG</button>

      <ReactFlow
        nodes={nodes}
        edges={edges}
        onInit={setRfInstance}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onNodeDragStop={handleNodeDragStop}
        snapToGrid={true}
        snapGrid={[50, 50]}
        onNodeClick={(e, node) => {
          setSelectedSection(node.id);
          onNodeClick?.(node);
        }}
        fitView
      >
        <MiniMap
          nodeStrokeColor={n =>
            n.data.status==='complete' ? '#28a745' :
            n.data.status==='warning'  ? '#ffc107' : '#dc3545'
          }
          nodeColor={() => '#fff'}
          maskColor="rgba(0,0,0,0.1)"
        />
        <Controls />
        <Background gap={50} color="#eee" />
      </ReactFlow>

      {/* Real-time cursors */}
      {Object.entries(remoteCursors).map(([uid, cur]) => (
        <div key={uid} style={{
          position: 'absolute',
          left: cur.x,
          top:  cur.y,
          pointerEvents: 'none',
          transform: 'translate(-50%,-50%)'
        }}>
          <div style={{
            width: 10, height: 10,
            background: cur.color,
            borderRadius: '50%',
            boxShadow: '0 0 4px rgba(0,0,0,0.2)'
          }} />
          <div style={{
            fontSize: 10,
            color: cur.color,
            textShadow: '0 0 2px #fff',
            marginTop: 2,
            textAlign: 'center'
          }}>{cur.label}</div>
        </div>
      ))}

      <NodeDetailPanel
        sectionId={selectedSection}
        onClose={() => setSelectedSection(null)}
      />
    </div>
  );
}



⸻

4. Styles: Make grid cursor look good

You already have grid via <Background gap={50} color="#eee" />. You can add this for the grab cursor:

.konvajs-content {
  cursor: grab !important;
}
.konvajs-content:active {
  cursor: grabbing !important;
}



⸻

5. Verification
	1.	Restart your server & client.
	2.	Open two browser windows to /canvas.
	3.	Drag nodes—they’ll sync positions in both windows.
	4.	Move your mouse—tiny colored cursors appear in the other window.
	5.	Nodes snap to a 50 × 50 grid as you drag.

That completes Sprint 3! Next up: Sprint 4 (Timeline presets, Actions tab, export enhancements). Let me know when you’re set.