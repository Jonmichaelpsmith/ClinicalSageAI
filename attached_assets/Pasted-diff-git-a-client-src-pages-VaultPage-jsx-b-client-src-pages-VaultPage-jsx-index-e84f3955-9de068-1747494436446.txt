diff --git a/client/src/pages/VaultPage.jsx b/client/src/pages/VaultPage.jsx
index e84f3955..9de0680e 100644
--- a/client/src/pages/VaultPage.jsx
+++ b/client/src/pages/VaultPage.jsx
@@ -1,103 +1,120 @@
 // /client/src/pages/VaultPage.jsx
 
 import { useState, useEffect } from 'react';
 import VaultUploader from '../components/vault/VaultUploader';
 import VaultDocumentViewer from '../components/vault/VaultDocumentViewer';
+import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
+import { Button } from '@/components/ui/button';
+import { Spinner } from '@/components/ui/spinner';
+import { AlertTriangle } from 'lucide-react';
 
 export default function VaultPage() {
   const [refreshTrigger, setRefreshTrigger] = useState(0);
   const [documentStats, setDocumentStats] = useState({
     total: 0,
     byModule: {},
     byType: {},
     byProject: {}
   });
   const [loading, setLoading] = useState(true);
+  const [statsError, setStatsError] = useState(false);
+
+  const fetchStats = async () => {
+    try {
+      setStatsError(false);
+      setLoading(true);
+      const res = await fetch('/api/vault/list');
+      const data = await res.json();
+
+      if (data.success) {
+        const stats = {
+          total: data.metadata.totalCount || 0,
+          byModule: {},
+          byType: {},
+          byProject: {}
+        };
+
+        data.documents.forEach(doc => {
+          const module = doc.moduleLinked || 'Unknown';
+          stats.byModule[module] = (stats.byModule[module] || 0) + 1;
+
+          const type = doc.documentType || 'Unspecified';
+          stats.byType[type] = (stats.byType[type] || 0) + 1;
+
+          const project = doc.projectId || 'Unassigned';
+          stats.byProject[project] = (stats.byProject[project] || 0) + 1;
+        });
+
+        setDocumentStats(stats);
+      } else {
+        setStatsError(true);
+      }
+    } catch (error) {
+      console.error('Error fetching vault statistics:', error);
+      setStatsError(true);
+    } finally {
+      setLoading(false);
+    }
+  };
 
   // Load document statistics on mount and when documents are updated
   useEffect(() => {
-    const fetchStats = async () => {
-      try {
-        setLoading(true);
-        const res = await fetch('/api/vault/list');
-        const data = await res.json();
-        
-        if (data.success) {
-          // Calculate statistics
-          const stats = {
-            total: data.metadata.totalCount || 0,
-            byModule: {},
-            byType: {},
-            byProject: {}
-          };
-          
-          // Count documents by module
-          data.documents.forEach(doc => {
-            // By module
-            const module = doc.moduleLinked || 'Unknown';
-            stats.byModule[module] = (stats.byModule[module] || 0) + 1;
-            
-            // By document type
-            const type = doc.documentType || 'Unspecified';
-            stats.byType[type] = (stats.byType[type] || 0) + 1;
-            
-            // By project
-            const project = doc.projectId || 'Unassigned';
-            stats.byProject[project] = (stats.byProject[project] || 0) + 1;
-          });
-          
-          setDocumentStats(stats);
-        }
-      } catch (error) {
-        console.error('Error fetching vault statistics:', error);
-      } finally {
-        setLoading(false);
-      }
-    };
-    
     fetchStats();
   }, [refreshTrigger]);
 
   // Function to trigger document list refresh after upload
   const handleUploadComplete = () => {
     setRefreshTrigger(prev => prev + 1);
   };
 
   return (
     <div className="container mx-auto py-8 space-y-8">
       <header className="text-center mb-8">
         <h1 className="text-3xl font-bold">TrialSage Vaultâ„¢</h1>
         <p className="text-gray-600 mt-2">Secure Document Repository for Regulatory Submissions</p>
       </header>
 
       {/* Dashboard Stats */}
       <div className="bg-white rounded-lg shadow-sm p-4 mb-8">
         <h2 className="text-lg font-semibold mb-3">Vault Statistics</h2>
         
         {loading ? (
-          <p className="text-sm text-gray-500">Loading statistics...</p>
+          <div className="flex justify-center py-4">
+            <Spinner />
+          </div>
+        ) : statsError ? (
+          <div className="space-y-2">
+            <Alert variant="destructive">
+              <AlertTriangle className="h-4 w-4" />
+              <AlertTitle>Error loading statistics</AlertTitle>
+              <AlertDescription>
+                Unable to load vault statistics.
+              </AlertDescription>
+            </Alert>
+            <Button variant="outline" onClick={fetchStats}>Retry</Button>
+          </div>
         ) : (
           <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
             <div className="bg-indigo-50 rounded-lg p-4 text-center">
               <p className="text-sm text-gray-500">Total Documents</p>
               <p className="text-2xl font-bold text-indigo-600">{documentStats.total}</p>
             </div>
             
             <div className="bg-green-50 rounded-lg p-4">
               <p className="text-sm text-gray-500">Top Modules</p>
               <ul className="text-sm mt-1">
                 {Object.entries(documentStats.byModule)
                   .sort(([, countA], [, countB]) => countB - countA)
                   .slice(0, 3)
                   .map(([module, count]) => (
                     <li key={module} className="flex justify-between">
                       <span>{module}</span>
                       <span className="font-medium">{count}</span>
                     </li>
                   ))}
               </ul>
             </div>
             
             <div className="bg-amber-50 rounded-lg p-4">
               <p className="text-sm text-gray-500">Top Document Types</p>
               <ul className="text-sm mt-1">
