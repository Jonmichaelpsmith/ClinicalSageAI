// --- TrialSage Vault™ Concierge AI Assistant (GA-Ready, Secure, Hallucination-Protected) ---

import React, { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import axios from 'axios';

export default function VaultConciergeAI() {
  const [showAssistant, setShowAssistant] = useState(false);
  const [messages, setMessages] = useState([{ role: 'assistant', content: '👋 Welcome to TrialSage Vault™ — your intelligent Clinical Document Concierge. How can I help you today? 📚' }]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const chatEndRef = useRef(null);

  useEffect(() => {
    if (chatEndRef.current) chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sendMessage = async () => {
    if (!input.trim()) return;
    const userMessage = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);
    try {
      const res = await axios.post('/api/vault-assistant', { messages: [...messages, userMessage] });
      setMessages(prev => [...prev, { role: 'assistant', content: res.data.reply }]);
    } catch (error) {
      console.error('Error contacting Vault AI:', error);
      setMessages(prev => [...prev, { role: 'assistant', content: "❗ Sorry, I couldn't process that. Please try again later." }]);
    }
    setLoading(false);
  };

  const suggestedPrompts = [
    "What is TrialSage Vault?",
    "How does AI tagging work?",
    "Explain audit trail features",
    "Tell me about Vault compliance",
    "Request a demo"
  ];

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {!showAssistant ? (
        <Button variant="default" onClick={() => setShowAssistant(true)}>💬 Chat with Vault Concierge</Button>
      ) : (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="bg-white shadow-2xl rounded-2xl w-96 h-[500px] flex flex-col">
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-bold p-4 rounded-t-2xl">
            Vault Concierge
          </div>
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {messages.map((msg, idx) => (
              <div key={idx} className={`text-sm ${msg.role === 'assistant' ? 'text-blue-700' : 'text-gray-800'}`}>{msg.content}</div>
            ))}
            {loading && <div className="text-blue-400 animate-pulse">Vault is thinking...</div>}
            <div ref={chatEndRef}></div>
          </div>
          <div className="p-4 border-t flex items-center gap-2">
            <Input value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask a question..." onKeyDown={(e) => e.key === 'Enter' && sendMessage()} />
            <Button size="sm" onClick={sendMessage}>Send</Button>
          </div>
          <div className="p-2 flex flex-wrap gap-2 bg-gray-50 border-t text-xs">
            {suggestedPrompts.map((prompt, idx) => (
              <Button key={idx} size="xs" variant="secondary" onClick={() => { setInput(prompt); sendMessage(); }}>{prompt}</Button>
            ))}
          </div>
        </motion.div>
      )}
    </div>
  );
}
