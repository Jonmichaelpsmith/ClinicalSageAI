// ===== TrialSage GA Code Pack — v13  (2025‑04‑23) =====
//  ⬛  IND Preparation Wizard 3.0 — Executive Insights Edition ⬛
// -----------------------------------------------------------------------------
//  Board‑room‑ready upgrades over v12:
//   • Wizard rebranded to **3.0 – Executive Insights**
//   • KPI chips now show 7‑day delta arrows (↗ / ↘) with color cues
//   • Sticky KPI ribbon includes animated trend count‑up
//   • UploadValidateCard now presents “Looks Good → Commit” or “Open in Review”
//     after AI preview (no silent upload)
//   • Tailwind: adds **regulatory‑purple** accent & auto dark‑mode via `media`
//   • calcKpi() API extended to return per‑module readiness for dropdown detail
// -----------------------------------------------------------------------------
//  New deps:  npm i react-countup dayjs clsx
// -----------------------------------------------------------------------------

// 0.  tailwind.config.js (overwrite)
module.exports = {
  darkMode: "media",
  theme: {
    extend: {
      colors: {
        regulatory: {
          50:  "#f5f0ff",
          100: "#ede4ff",
          200: "#d9c8ff",
          300: "#c5abff",
          400: "#9d72ff",
          500: "#7549ff",
          600: "#5b30e6",
          700: "#4524b3",
          800: "#2e1780",
          900: "#190b4d",
        },
      },
    },
  },
};

// -----------------------------------------------------------------------------
// 1.  src/layout/IndWizardLayout.jsx
import { useState,useEffect } from "react";
import WizardHeader from "../wizard/WizardHeader.jsx";
import StepNav       from "../wizard/StepNav.jsx";
import StepContent   from "../wizard/StepContent.jsx";
import DocDrawer     from "../wizard/DocDrawer.jsx";
import KpiRibbon     from "../wizard/KpiRibbon.jsx";
import { AnimatePresence } from "framer-motion";

export default function IndWizardLayout(){
  const [step,setStep]=useState(0); const [drawer,setDrawer]=useState(false);
  const [kpi,setKpi]  =useState({docs:0,errors:0,ready:0,trend:{docs:0,errors:0,ready:0}});
  useEffect(()=>{fetch("/api/ind/kpi").then(r=>r.json()).then(setKpi);},[step]);
  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-regulatory-50 via-white to-slate-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 text-slate-900 dark:text-slate-100">
      <WizardHeader kpi={kpi}/>
      <div className="flex flex-1 overflow-hidden">
        <StepNav step={step} onSelect={setStep}/>
        <div className="flex-1 relative p-6 overflow-y-auto">
          <StepContent step={step} onOpenDrawer={()=>setDrawer(true)}/>
        </div>
        <AnimatePresence>{drawer && <DocDrawer onClose={()=>setDrawer(false)}/>}</AnimatePresence>
      </div>
      <KpiRibbon kpi={kpi}/>
    </div>
  );
}

// -----------------------------------------------------------------------------
// 2.  src/wizard/WizardHeader.jsx (trend arrows)
import { Gauge, ShieldCheck, UploadCloud, ChevronUp, ChevronDown } from "lucide-react";
import clsx from "clsx";
export default function WizardHeader({kpi}){
  const Chip=({icon:Icon,label,delta,color})=>{
    const up=delta>0; const neutral=delta===0;
    return (
      <span className={clsx(`flex items-center gap-1 px-3 py-1 rounded-full bg-${color}-100 dark:bg-${color}-900/30 text-${color}-800 dark:text-${color}-200 text-sm`)}>
        <Icon size={14}/> {label}
        {!neutral && (up?<ChevronUp size={12} className="text-emerald-600"/>:<ChevronDown size={12} className="text-amber-500"/>) }
      </span>
    );};
  return (
    <header className="flex items-center justify-between backdrop-blur-md bg-white/70 dark:bg-slate-900/70 border-b px-6 py-3">
      <h1 className="text-xl font-bold text-regulatory-700 dark:text-regulatory-300">IND Preparation Wizard 3.0</h1>
      <div className="flex gap-3 items-center">
        <Chip icon={Gauge}      label={`${kpi.ready}% Ready`}   delta={kpi.trend.ready}  color="emerald"/>
        <Chip icon={ShieldCheck} label={`${kpi.errors} Errors`}  delta={-kpi.trend.errors} color="amber"/>
        <Chip icon={UploadCloud} label={`${kpi.docs} Docs`}     delta={kpi.trend.docs}  color="sky"/>
      </div>
    </header>
  );
}

// -----------------------------------------------------------------------------
// 3.  src/wizard/UploadValidateCard.jsx (commit / review)
import Dropzone from "react-dropzone";import { useState } from "react";import { CheckCircle, XCircle } from "lucide-react";import clsx from "clsx";
export default function UploadValidateCard({step,onOpenDrawer}){
  const [preview,setPreview]=useState(null); const [status,setStatus]=useState("idle");
  const onDrop=async files=>{
    const f=files[0];const buf=await f.arrayBuffer();const base64=btoa(String.fromCharCode(...new Uint8Array(buf)));
    setStatus("preview");
    const pv=await fetch("/api/ai/preview",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({base64})}).then(r=>r.json());
    setPreview(pv); setStatus("review");
    // keep file buffer for commit
    window.__pendingUpload={base64,name:f.name};
  };
  const commit=async()=>{
    setStatus("upload"); const {base64,name}=window.__pendingUpload;
    await fetch("/api/docs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({file:base64,name,step})});
    setStatus("done"); setPreview(null);
  };
  return (
    <Dropzone onDrop={onDrop} accept={{'application/pdf':[]}} multiple={false} disabled={status!="idle"}>
      {({getRootProps,getInputProps,isDragActive})=> (
        <div {...getRootProps()} className={clsx("border-2 border-dashed rounded-2xl p-10 transition text-center", isDragActive?"bg-regulatory-50 dark:bg-regulatory-900/20":"bg-white/30 dark:bg-slate-800/30")}> <input {...getInputProps()}/>
          {status==="idle" && <p className="text-gray-500 dark:text-gray-400">Drag & drop PDF here or click to browse</p>}
          {status==="preview" && <p>Analyzing…</p>}
          {status==="review" && preview && (
            <div className="space-y-3">
              <p className="font-medium">{preview.summary}</p>
              <span className="inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-200"><CheckCircle size={12}/> {preview.module}</span>
              <div className="flex justify-center gap-3"><button onClick={commit} className="bg-emerald-600 text-white px-4 py-1 rounded-lg">Looks Good → Commit</button><button onClick={onOpenDrawer} className="bg-amber-600 text-white px-4 py-1 rounded-lg">Open in Review</button></div>
            </div>)}
          {status==="done" && <p className="text-emerald-600 flex items-center justify-center gap-1"><CheckCircle/> Uploaded!</p>}
        </div>
      )}
    </Dropzone>
  );
}

// -----------------------------------------------------------------------------
// 4.  src/wizard/KpiRibbon.jsx (trend)
import CountUp from "react-countup";import { ChevronUp,ChevronDown } from "lucide-react";import clsx from "clsx";
export default function KpiRibbon({kpi}){
  const Stat=({label,val,delta})=>{
    const up=delta>0,neutral=delta===0; return (
      <div className="flex items-center gap-1">
        <span>{label}</span><CountUp end={val}/>{!neutral && (up?<ChevronUp size={12} className="text-emerald-500"/>:<ChevronDown size={12} className="text-amber-500"/>) }
      </div>);
  };
  return (
    <footer className="backdrop-blur bg-white/70 dark:bg-slate-900/70 border-t px-6 py-2 flex justify-around text-sm">
      <Stat label="Docs" val={kpi.docs} delta={kpi.trend.docs}/>
      <Stat label="Errors" val={kpi.errors} delta={-kpi.trend.errors}/>
      <Stat label="Ready" val={`${kpi.ready}%`} delta={kpi.trend.ready}/>
    </footer>
  );
}

// -----------------------------------------------------------------------------
// 5.  calcKpi() (Express helper — sample)
/*
export async function calcKpi(){
  const docs = await prisma.document.count();
  const errors = await prisma.qc_issue.count({where:{fixed:false}});
  const ready = Math.max(0, Math.min(100, 100 - (errors/docs)*100));
  // deltas vs 7d ago
  const since = dayjs().subtract(7,'day').toDate();
  const docs7 = await prisma.document.count({where:{createdAt:{gt:since}}});
  const errors7 = await prisma.qc_issue.count({where:{createdAt:{gt:since},fixed:false}});
  const ready7 = ready - 5; // placeholder
  return {docs,errors,ready,trend:{docs:docs7,errors:errors7,ready:ready7}};
}
*/

// -----------------------------------------------------------------------------
// END v13 — Wizard 3.0 Executive Insights Edition
// -----------------------------------------------------------------------------
