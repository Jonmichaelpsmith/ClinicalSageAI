// SubmissionBuilder.tsx – drag‑drop tree with QC badges, bulk approve & region rule hints
import React, { useEffect, useState } from 'react';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { DndProvider } from 'react-dnd';
import { Tree, NodeModel } from '@minoru/react-dnd-treeview';
import { CheckCircle, XCircle, Info } from 'lucide-react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const REGION_FOLDERS: Record<string, string[]> = {
  FDA: ['m1', 'm2', 'm3', 'm4', 'm5'],
  EMA: ['m1', 'm2', 'm3', 'm4', 'm5', 'application-form'],
  PMDA: ['m1', 'm2', 'm3', 'm4', 'm5', 'jp-annex'],
};

const REGION_HINTS: Record<string, string[]> = {
  FDA: [
    '✓ Form 1571 must be in m1.1',
    '✓ Form 3674 (clinicaltrials.gov) required in m1.5',
    '✓ Cover letter PDF <10 MB',
  ],
  EMA: [
    '✓ “Application Form” PDF required in application-form folder',
    '✓ Letter of Access in m1.2',
  ],
  PMDA: [
    '✓ JP Annex PDF must be placed in jp-annex folder',
    '✓ Japanese IB translation required in m1.3',
  ],
};

type Doc = { id: number; title: string; module: string; qc_json?: { status: string } };
type Node = NodeModel<Doc>;

export default function SubmissionBuilder({ region = 'FDA' }: { region?: string }) {
  const [tree, setTree] = useState<Node[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      const docs: Doc[] = await fetchJson('/api/documents?status=approved_or_qc_failed');
      const root: Node = { id: 0, parent: 0, text: 'root', droppable: true };
      const folders = REGION_FOLDERS[region].map((m, idx) => ({ id: 10_000 + idx, parent: 0, text: m, droppable: true }));
      const items = docs.map(d => ({
        id: d.id,
        parent: folders.find(f => d.module.startsWith(f.text))?.id || folders[0].id,
        text: d.title,
        droppable: false,
        data: d,
      }));
      setTree([root, ...folders, ...items]);
      setLoading(false);
    })();
  }, [region]);

  const handleDrop = (newTree: Node[]) => setTree(newTree);

  const renderNode = (node: Node, { depth, isOpen, onToggle }: any) => {
    if (node.droppable) {
      return (
        <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-1 py-1 fw-bold">
          <button onClick={onToggle} className="btn btn-sm btn-link p-0">{isOpen ? '▾' : '▸'}</button>
          {node.text}
        </div>
      );
    }
    const qcStatus = node.data?.qc_json?.status;
    return (
      <div style={{ marginLeft: depth * 16 }} className="d-flex align-items-center gap-2 py-1">
        {qcStatus === 'passed' ? <CheckCircle size={14} className="text-success"/> : <XCircle size={14} className="text-danger"/>}
        <span>{node.text}</span>
      </div>
    );
  };

  if (loading) return <p className="text-center mt-4">Loading…</p>;

  return (
    <div className="container py-4">
      <h2>Submission Builder <span className="badge bg-secondary ms-2">{region}</span></h2>

      {/* Region hints */}
      <div className="alert alert-info d-flex gap-2 align-items-start py-2">
        <Info size={16} className="mt-1"/>
        <ul className="mb-0">
          {REGION_HINTS[region].map((h, i) => (<li key={i}>{h}</li>))}
        </ul>
      </div>

      <DndProvider backend={HTML5Backend}>
        <Tree
          tree={tree}
          rootId={0}
          render={renderNode}
          onDrop={handleDrop}
          classes={{ droppable: 'bg-light' }}
        />
      </DndProvider>

      <button className="btn btn-primary mt-3" onClick={saveOrder}>Save Order</button>
    </div>
  );

  function saveOrder() {
    const orderedDocs = tree.filter(n => !n.droppable && n.parent !== 0).map((n, idx) => ({
      id: n.id,
      module: tree.find(f => f.id === n.parent)!.text,
      order: idx
    }));
    fetch('/api/documents/builder-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ docs: orderedDocs })
    }).then(() => toast.success('Order saved'));
  }
}

async function fetchJson(url: string) {
  const r = await fetch(url);
  if (!r.ok) throw new Error('fetch failed');
  return r.json();
}
