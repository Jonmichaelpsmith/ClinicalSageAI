// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// TrialSage Vaultâ„¢ â€“ Quality Events Module (Deviation & CAPA Engine)
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// ðŸ“‚ server/routes/quality.js â€“ create + manage deviations & CAPAs
//----------------------------------------------------------------
import { Router } from 'express';
import { supabase } from '../lib/supabaseClient.js';
import { verifyJwt } from '../middleware/auth.js';

const router = Router();

// POST /api/quality/deviation â€“ log new deviation
router.post('/deviation', verifyJwt, async (req, res) => {
  const { tenantId, id: userId } = req.user;
  const { title, description, docIds } = req.body; // docIds optional array
  const { data: dev, error } = await supabase.from('deviations')
    .insert({ tenant_id: tenantId, title, description, status: 'Open', owner_id: userId, doc_ids: docIds || [] })
    .select('*').single();
  if (error) return res.status(500).json({ message: error.message });
  res.json(dev);
});

// POST /api/quality/deviation/:id/close â€“ close deviation (optionally escalate)
router.post('/deviation/:id/close', verifyJwt, async (req, res) => {
  const { tenantId, id: userId } = req.user;
  const { escalate, capaTitle } = req.body; // escalate boolean
  const { error } = await supabase.from('deviations')
    .update({ status: 'Closed', closed_at: new Date(), closer_id: userId })
    .eq('id', req.params.id).eq('tenant_id', tenantId);
  if (error) return res.status(400).json({ message: error.message });
  let capa = null;
  if (escalate) {
    const { data, error: cErr } = await supabase.from('capas')
      .insert({ tenant_id: tenantId, deviation_id: req.params.id, title: capaTitle || 'CAPA from deviation', status: 'Open', owner_id: userId })
      .select('*').single();
    if (cErr) return res.status(500).json({ message: cErr.message });
    capa = data;
  }
  res.json({ ok: true, capa });
});

// POST /api/quality/capa/:id/action â€“ add action / mark complete
router.post('/capa/:id/action', verifyJwt, async (req, res) => {
  const { tenantId } = req.user;
  const { action, completed } = req.body;
  if (action) await supabase.from('capa_actions').insert({ tenant_id: tenantId, capa_id: req.params.id, description: action, status: 'Pending' });
  if (completed) await supabase.from('capa_actions').update({ status: 'Done', completed_at: new Date() }).eq('id', completed);
  res.json({ ok: true });
});

router.get('/dashboard', verifyJwt, async (req, res) => {
  const { tenantId } = req.user;
  const [{ data: devOpen }, { data: capOpen }] = await Promise.all([
    supabase.from('deviations').select('id', { count: 'exact', head: true }).eq('tenant_id', tenantId).eq('status', 'Open'),
    supabase.from('capas').select('id', { count: 'exact', head: true }).eq('tenant_id', tenantId).eq('status', 'Open')
  ]);
  res.json({ deviationsOpen: devOpen?.length || 0, capasOpen: capOpen?.length || 0 });
});

export default router;

//----------------------------------------------------------------
// ðŸ“‚ client/pages/QualityDashboard.jsx â€“ QA view
//----------------------------------------------------------------
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

function Stat({ label, value }) {
  return (
    <Card className="shadow-sm"><CardContent className="p-4 text-center"><p className="text-3xl font-bold text-blue-700">{value}</p><p className="text-sm text-gray-600">{label}</p></CardContent></Card>
  );
}
export default function QualityDashboard() {
  const [stats, setStats] = useState({});
  useEffect(() => { axios.get('/api/quality/dashboard').then(r => setStats(r.data)); }, []);
  return (
    <div className="p-8 space-y-6">
      <h1 className="text-2xl font-bold">Quality Events</h1>
      <div className="grid grid-cols-2 gap-4 max-w-md">
        <Stat label="Open Deviations" value={stats.deviationsOpen ?? 0} />
        <Stat label="Open CAPAs" value={stats.capasOpen ?? 0} />
      </div>
      <Button className="mt-6" onClick={() => alert('Open Deviation Form')}>Log New Deviation</Button>
    </div>
  );
}

//----------------------------------------------------------------
// ðŸ“‚ Supabase schema (create via SQL editor)
//----------------------------------------------------------------
-- deviations
create table deviations (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  title text,
  description text,
  status text,
  owner_id uuid,
  doc_ids uuid[],
  closed_at timestamp,
  closer_id uuid,
  created_at timestamp default now()
);
-- capas
create table capas (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  deviation_id uuid references deviations(id),
  title text,
  status text,
  owner_id uuid,
  closed_at timestamp,
  created_at timestamp default now()
);
-- capa actions
create table capa_actions (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  capa_id uuid references capas(id),
  description text,
  status text,
  completed_at timestamp,
  created_at timestamp default now()
);

//----------------------------------------------------------------
// ðŸ”— Integration steps
//----------------------------------------------------------------
// server/index.js:
//   import qualityRoutes from './routes/quality.js';
//   app.use('/api/quality', qualityRoutes);
// client: add <QualityDashboard/> to QA role dashboard or main nav.
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
