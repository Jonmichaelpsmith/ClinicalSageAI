from fpdf import FPDF
import os
import sys
import json
import time
import re
from datetime import datetime

# Font paths
FONT_REGULAR = os.path.join(os.getcwd(), 'fonts', 'DejaVuSans.ttf')
FONT_BOLD = os.path.join(os.getcwd(), 'fonts', 'DejaVuSans-Bold.ttf')
FONT_ITALIC = os.path.join(os.getcwd(), 'fonts', 'DejaVuSans-Oblique.ttf')

# Create fonts directory if it doesn't exist
FONTS_DIR = os.path.join(os.getcwd(), 'fonts')
if not os.path.exists(FONTS_DIR):
    os.makedirs(FONTS_DIR, exist_ok=True)

# Check if fonts exist, if not use fallback
if not os.path.exists(FONT_REGULAR) or not os.path.exists(FONT_BOLD) or not os.path.exists(FONT_ITALIC):
    # Using built-in fonts as fallback
    FONT_REGULAR = 'Arial'
    FONT_BOLD = 'Arial'
    FONT_ITALIC = 'Arial'
    USE_BUILT_IN_FONTS = True
else:
    USE_BUILT_IN_FONTS = False

class ProtocolPDF(FPDF):
    def __init__(self, title="Smart Protocol Draft"):
        super().__init__()
        self.title = title
        self.is_first_page = True
        if not USE_BUILT_IN_FONTS:
            self.add_font('DejaVu', '', FONT_REGULAR, uni=True)
            self.add_font('DejaVu', 'B', FONT_BOLD, uni=True)
            self.add_font('DejaVu', 'I', FONT_ITALIC, uni=True)

    def header(self):
        # Skip header on first page as it will have the title
        if self.is_first_page:
            self.is_first_page = False
            return

        # Header - 10mm height
        self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 10)
        self.cell(0, 10, self.title, 0, 0, 'L')
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'R')
        self.ln(15)

    def footer(self):
        # Footer - 15mm from bottom
        self.set_y(-15)
        self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'I', 8)
        self.cell(0, 10, f'Generated by TrialSage - {datetime.now().strftime("%Y-%m-%d")}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 14)
        self.set_fill_color(230, 230, 230)
        self.cell(0, 10, title, 0, 1, 'L', 1)
        self.ln(5)

    def chapter_body(self, text):
        self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 11)
        
        # Process markdown-like formatting
        lines = text.split('\n')
        for line in lines:
            # Check for headers
            if line.startswith('# '):
                self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 16)
                self.cell(0, 10, line[2:], 0, 1)
                self.ln(5)
            elif line.startswith('## '):
                self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 14)
                self.cell(0, 10, line[3:], 0, 1)
                self.ln(5)
            elif line.startswith('### '):
                self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 12)
                self.cell(0, 10, line[4:], 0, 1)
                self.ln(3)
            # Check for bullet points
            elif line.strip().startswith('* '):
                self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 11)
                self.cell(5, 6, '', 0, 0)
                self.cell(5, 6, 'â€¢', 0, 0)
                self.multi_cell(0, 6, line[2:])
            # Check for numbered list
            elif re.match(r'^\d+\.\s', line.strip()):
                self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 11)
                self.cell(5, 6, '', 0, 0)
                self.multi_cell(0, 6, line)
            # Regular text with bold and italic support
            else:
                # Replace bold and italic markdown with PDF formatting
                text_parts = []
                current_text = ""
                is_bold = False
                is_italic = False
                
                i = 0
                while i < len(line):
                    if line[i:i+2] == '**' and not is_italic:
                        if is_bold:
                            # End bold
                            if current_text:
                                text_parts.append((current_text, 'B' if is_bold else ''))
                                current_text = ""
                            is_bold = False
                        else:
                            # Start bold
                            if current_text:
                                text_parts.append((current_text, ''))
                                current_text = ""
                            is_bold = True
                        i += 2
                    elif line[i:i+1] == '*' and not is_bold:
                        if is_italic:
                            # End italic
                            if current_text:
                                text_parts.append((current_text, 'I'))
                                current_text = ""
                            is_italic = False
                        else:
                            # Start italic
                            if current_text:
                                text_parts.append((current_text, ''))
                                current_text = ""
                            is_italic = True
                        i += 1
                    else:
                        current_text += line[i]
                        i += 1
                
                # Add any remaining text
                if current_text:
                    text_parts.append((current_text, 'B' if is_bold else 'I' if is_italic else ''))
                
                # Write all text parts with appropriate formatting
                if text_parts:
                    line_height = 6
                    current_x = self.get_x()
                    current_y = self.get_y()
                    max_width = self.w - self.r_margin - current_x
                    line_width = 0
                    
                    for text, style in text_parts:
                        self.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', style, 11)
                        text_width = self.get_string_width(text)
                        
                        if line_width + text_width > max_width:
                            # Move to next line
                            current_y += line_height
                            current_x = self.l_margin
                            line_width = 0
                        
                        self.set_xy(current_x, current_y)
                        self.cell(text_width, line_height, text, 0, 0)
                        current_x += text_width
                        line_width += text_width
                    
                    self.ln(line_height)
                else:
                    # Empty line
                    self.ln(3)
        
        self.ln(10)

    def print_chapter(self, title, body):
        self.add_page()
        self.chapter_title(title)
        self.chapter_body(body)

def generate_protocol_pdf(protocol_file, output_path):
    """Generate a PDF from a protocol text file"""
    try:
        # Read protocol text
        with open(protocol_file, 'r', encoding='utf-8') as f:
            protocol_text = f.read()
        
        # Extract title
        title_match = re.search(r'^# (.+)$', protocol_text, re.MULTILINE)
        title = title_match.group(1) if title_match else "Protocol Draft"
        
        # Create PDF
        pdf = ProtocolPDF(title)
        pdf.set_auto_page_break(True, margin=15)
        pdf.add_page()
        
        # Title page
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 16)
        pdf.cell(0, 10, "PROTOCOL", 0, 1, 'C')
        pdf.ln(10)
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 14)
        pdf.multi_cell(0, 10, title, 0, 'C')
        pdf.ln(10)
        
        # Date
        date_match = re.search(r'\*\*Date:\*\* (.+)', protocol_text)
        if date_match:
            pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 12)
            pdf.cell(0, 10, f"Date: {date_match.group(1)}", 0, 1, 'C')
        
        # Protocol ID
        protocol_id_match = re.search(r'\*\*Protocol ID:\*\* (.+)', protocol_text)
        if protocol_id_match:
            pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 12)
            pdf.cell(0, 10, f"Protocol ID: {protocol_id_match.group(1)}", 0, 1, 'C')
        
        pdf.ln(20)
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 10)
        pdf.cell(0, 10, "CONFIDENTIAL", 0, 1, 'C')
        pdf.cell(0, 10, "This document contains confidential information. Do not distribute without authorization.", 0, 1, 'C')
        
        # Main content
        pdf.add_page()
        pdf.chapter_body(protocol_text)
        
        # Save PDF
        pdf.output(output_path)
        
        print(json.dumps({
            "success": True,
            "message": "Protocol PDF generated successfully",
            "output_path": output_path
        }))
        return True
    
    except Exception as e:
        error_message = f"Error generating protocol PDF: {str(e)}"
        print(json.dumps({
            "success": False,
            "error": error_message
        }), file=sys.stderr)
        return False

def generate_full_bundle(protocol_file, strategic_file, sap_file, output_path, indication, phase):
    """Generate a complete bundle PDF including protocol, strategic intelligence, and SAP"""
    try:
        # Read files
        with open(protocol_file, 'r', encoding='utf-8') as f:
            protocol_text = f.read()
        
        with open(strategic_file, 'r', encoding='utf-8') as f:
            strategic_text = f.read()
        
        with open(sap_file, 'r', encoding='utf-8') as f:
            sap_text = f.read()
        
        # Create PDF
        title = f"{indication} {phase} - Protocol and Strategic Intelligence Bundle"
        pdf = ProtocolPDF(title)
        pdf.set_auto_page_break(True, margin=15)
        
        # Cover page
        pdf.add_page()
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 20)
        pdf.cell(0, 15, "PROTOCOL BUNDLE", 0, 1, 'C')
        pdf.ln(5)
        
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', 'B', 16)
        pdf.multi_cell(0, 10, title, 0, 'C')
        pdf.ln(15)
        
        # Date
        current_date = datetime.now().strftime("%d %B %Y")
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 12)
        pdf.cell(0, 10, f"Generated: {current_date}", 0, 1, 'C')
        
        pdf.ln(20)
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 12)
        pdf.cell(0, 10, "Contents:", 0, 1, 'L')
        pdf.cell(10, 10, "", 0, 0)
        pdf.cell(0, 10, "1. Protocol Draft", 0, 1, 'L')
        pdf.cell(10, 10, "", 0, 0)
        pdf.cell(0, 10, "2. Strategic Intelligence Summary", 0, 1, 'L')
        pdf.cell(10, 10, "", 0, 0)
        pdf.cell(0, 10, "3. Statistical Analysis Plan", 0, 1, 'L')
        
        pdf.ln(30)
        pdf.set_font('Arial' if USE_BUILT_IN_FONTS else 'DejaVu', '', 10)
        pdf.cell(0, 10, "CONFIDENTIAL", 0, 1, 'C')
        pdf.multi_cell(0, 5, "This document contains confidential information. Do not distribute without authorization. Generated by TrialSage AI.", 0, 'C')
        
        # Protocol section
        pdf.print_chapter("1. PROTOCOL DRAFT", protocol_text)
        
        # Strategic intelligence section
        pdf.print_chapter("2. STRATEGIC INTELLIGENCE SUMMARY", strategic_text)
        
        # SAP section
        pdf.print_chapter("3. STATISTICAL ANALYSIS PLAN", sap_text)
        
        # Save PDF
        pdf.output(output_path)
        
        print(json.dumps({
            "success": True,
            "message": "Bundle PDF generated successfully",
            "output_path": output_path
        }))
        return True
    
    except Exception as e:
        error_message = f"Error generating bundle PDF: {str(e)}"
        print(json.dumps({
            "success": False,
            "error": error_message
        }), file=sys.stderr)
        return False

if __name__ == "__main__":
    # Command line interface
    if len(sys.argv) == 3 and os.path.exists(sys.argv[1]):
        generate_protocol_pdf(sys.argv[1], sys.argv[2])
    elif len(sys.argv) == 6 and os.path.exists(sys.argv[1]) and os.path.exists(sys.argv[2]) and os.path.exists(sys.argv[3]):
        generate_full_bundle(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], "Unspecified Indication", "Unspecified Phase")
    elif len(sys.argv) == 8 and os.path.exists(sys.argv[1]) and os.path.exists(sys.argv[2]) and os.path.exists(sys.argv[3]):
        generate_full_bundle(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6])
    else:
        print(json.dumps({
            "success": False,
            "error": "Invalid arguments",
            "usage": "python report_pdf_generator.py <protocol_file> <output_path> OR python report_pdf_generator.py <protocol_file> <strategic_file> <sap_file> <output_path> [<indication> <phase>]"
        }), file=sys.stderr)