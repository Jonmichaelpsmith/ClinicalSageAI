version: '3.9'

services:
  web:
    build: .
    container_name: lumen_trial_guide_web
    ports:
      - "80:80"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - HF_API_KEY=${HF_API_KEY}
      - FAERS_API_KEY=${FAERS_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - redis
      - db
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports

  worker:
    build: .
    container_name: lumen_trial_guide_worker
    command: celery -A celery_config.celery_app worker --loglevel=info
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - HF_API_KEY=${HF_API_KEY}
      - FAERS_API_KEY=${FAERS_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - redis
      - db
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports

  flower:
    build: .
    container_name: lumen_trial_guide_flower
    command: celery -A celery_config.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      - redis
      - worker
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    container_name: lumen_trial_guide_redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  db:
    image: postgres:15-alpine
    container_name: lumen_trial_guide_db
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: lumen_trial_guide_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: lumen_trial_guide_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: