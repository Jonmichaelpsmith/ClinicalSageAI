// /server/routes/regulatory-ai.js

const express = require('express');
const router = express.Router();
const OpenAI = require('openai');
const { rateLimiter } = require('./rate-limiter');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Set up multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Create uploads directory if it doesn't exist
    const uploadDir = path.join(__dirname, '../../uploads/ai-assistant');
    fs.mkdirSync(uploadDir, { recursive: true });
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // Create a unique filename with original extension
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, file.fieldname + '-' + uniqueSuffix + ext);
  }
});

// File filter to limit file types
const fileFilter = (req, file, cb) => {
  // Accept common document formats
  const allowedFileTypes = [
    '.pdf', '.doc', '.docx', '.txt', '.xls', '.xlsx',
    '.ppt', '.pptx', '.csv', '.md', '.json', '.xml'
  ];
  
  const ext = path.extname(file.originalname).toLowerCase();
  
  if (allowedFileTypes.includes(ext)) {
    cb(null, true);
  } else {
    cb(new Error('File type not supported. Supported types: ' + allowedFileTypes.join(', ')));
  }
};

// Configure multer middleware
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB file size limit
    files: 5 // Limit to 5 files per upload
  },
  fileFilter: fileFilter
});

// Check if OpenAI API key is available and initialize client
const openaiApiKey = process.env.OPENAI_API_KEY;
console.log('OpenAI API Key available:', !!openaiApiKey); // Log if key is available, not the key itself

// Initialize OpenAI client - production ready implementation
let openai = null;

if (!openaiApiKey) {
  console.error('ERROR: OPENAI_API_KEY environment variable is not set');
  throw new Error('OpenAI API key is required but not configured');
}

try {
  // Using the newer OpenAI SDK initialization pattern with robust error handling
  openai = new OpenAI({
    apiKey: openaiApiKey,
    timeout: 30000, // 30 second timeout for production reliability
    maxRetries: 2 // Allow up to 2 retries on failed requests
  });
  
  console.log('OpenAI client initialized successfully');
} catch (error) {
  console.error('Critical error initializing OpenAI client:', error.message);
  console.error('Full error details:', error);
  throw new Error('Failed to initialize OpenAI client - service unavailable');
}

// Apply rate limiting to all routes
router.use(rateLimiter);

/**
 * Process an AI query using GPT-4
 * POST /api/regulatory-ai/query
 */
router.post('/query', async (req, res) => {
  console.log('Received AI query request:', JSON.stringify({
    messageLength: req.body.message ? req.body.message.length : 0,
    module: req.body.module,
    hasContext: !!req.body.context,
    historyLength: req.body.history ? req.body.history.length : 0
  }));
  
  try {
    const { message, module, context, history } = req.body;

    // Validate inputs
    if (!message) {
      console.log('Message is required but was not provided');
      return res.status(400).json({ error: 'Message is required' });
    }

    // In production mode, we don't do lazy initialization - the service should be properly initialized on startup
    if (!openai) {
      console.error('CRITICAL ERROR: OpenAI client is not initialized');
      return res.status(503).json({
        error: 'AI service unavailable',
        message: 'The AI service is currently unavailable. Please contact your administrator.'
      });
    }
    
    console.log('OpenAI client is available, proceeding with request');

    // Create system prompt based on the module and context
    let systemPrompt = `You are Lumen Regulatory Affairs AI, a helpful assistant specializing in medical device and pharmaceutical regulatory affairs knowledge.
    
- Focus on providing clear, concise regulatory guidance.
- Reference specific regulations and standards when appropriate.
- Prioritize safety, compliance, and ethical considerations in all responses.
- Do not provide legal advice, only regulatory information and guidance.
- Format responses with markdown to improve readability.`;

    // Add module-specific context to the system prompt
    if (module) {
      systemPrompt += `\n\nYou are currently being asked about the ${module} module.`;
      
      // Add specific guidance based on module
      if (module.toLowerCase().includes('510k')) {
        systemPrompt += `\n\nFor 510(k) submissions:
- Focus on substantial equivalence demonstrations.
- Guide users through predicate device selection.
- Help with device classification and regulatory pathways.
- Provide clarity on FDA expectations for different device types.`;
      } else if (module.toLowerCase().includes('cer')) {
        systemPrompt += `\n\nFor Clinical Evaluation Reports (CER):
- Follow MDR 2017/745 requirements for clinical evaluation.
- Focus on MEDDEV 2.7/1 rev 4 guidelines.
- Help with literature search strategies and equivalence demonstrations.
- Guide users on risk-benefit analysis and gaps in clinical evidence.`;
      }
    }

    // Add any additional context if provided
    if (context && Object.keys(context).length > 0) {
      systemPrompt += `\n\nContext Information:\n${JSON.stringify(context, null, 2)}`;
    }

    // Prepare conversation messages
    const messages = [
      { role: 'system', content: systemPrompt },
    ];

    // Add conversation history
    if (history && Array.isArray(history)) {
      // Only include the most recent 10 messages to stay within context limits
      const recentHistory = history.slice(-10);
      messages.push(...recentHistory);
    }

    // Add the user's current message
    messages.push({ role: 'user', content: message });

    // Call OpenAI API
    console.log('Sending request to OpenAI API...');
    let completion;
    try {
      // Log the request being made
      console.log('OpenAI API request parameters:', {
        model: "gpt-4o",
        messagesCount: messages.length,
        temperature: 0.7,
        max_tokens: 2048
      });
      
      // Production-ready implementation - no fallbacks or mocks
      console.log('Making OpenAI API request with proper error handling');
      
      try {
        // Make the request with proper timing and logging
        const startTime = Date.now();
        console.log(`API request starting at ${new Date().toISOString()}`);
        
        // Use proper production settings
        completion = await openai.chat.completions.create({
          model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024
          messages: messages,
          temperature: 0.3, // Lower temperature for more accurate regulatory information
          max_tokens: 2048,
          top_p: 0.95,
          frequency_penalty: 0.5, // Reduce repetition
          presence_penalty: 0.1, // Slightly encourage mentioning new topics
          user: req.body.userId || 'anonymous' // For OpenAI usage tracking
        });
        
        const requestDuration = Date.now() - startTime;
        console.log(`API request completed in ${requestDuration}ms`);
      } catch (error) {
        // Production-ready error handling with appropriate status codes
        console.error('OpenAI API request failed:', error.message);
        console.error('Error details:', error);
        
        if (error.status === 429) {
          return res.status(429).json({ 
            error: 'Rate limit exceeded',
            message: 'The AI service is currently experiencing high demand. Please try again in a few moments.'
          });
        } else if (error.status === 401 || error.status === 403) {
          console.error('CRITICAL: Authentication error with OpenAI API');
          return res.status(500).json({
            error: 'Authentication error',
            message: 'The AI service is currently unavailable due to an authentication issue. Our team has been notified.'
          });
        } else {
          return res.status(500).json({ 
            error: 'Service error',
            message: 'We encountered an issue with the AI service. Our team has been notified of this issue.'
          });
        }
      }
      console.log('OpenAI API response received successfully for main request');
    } catch (error) {
      console.error('Error from OpenAI API:', error.message);
      console.error('Error type:', error.constructor.name);
      console.error('Error code:', error.code);
      console.error('Error status:', error.status);
      console.error('Error details:', JSON.stringify(error, null, 2));
      
      // More specific error message based on error type
      let errorMessage = `OpenAI API error: ${error.message}`;
      if (error.status === 401) {
        errorMessage = "Authentication error with OpenAI API. Please check your API key.";
      } else if (error.status === 429) {
        errorMessage = "OpenAI API rate limit exceeded. Please try again later.";
      } else if (error.status === 500) {
        errorMessage = "OpenAI API server error. Please try again later.";
      }
      
      throw new Error(errorMessage);
    }

    // Extract the response
    const aiResponse = completion.choices[0].message.content;
    console.log('Successfully extracted response content from OpenAI API');

    // Return the AI response
    return res.status(200).json({ response: aiResponse });
  } catch (error) {
    console.error('Error in regulatory AI query:', error);
    console.error('Full error stack:', error.stack);
    console.error('Error details:', JSON.stringify(error, null, 2));
    
    return res.status(500).json({
      error: error.message || 'Failed to process your request',
      errorCode: error.code || 'UNKNOWN_ERROR',
      errorType: error.type || 'server_error',
      response: 'I apologize, but I encountered an error processing your request. The error has been logged for investigation. Please try again or contact support if the issue persists.',
    });
  }
});

/**
 * File upload endpoint for AI analysis
 * POST /api/regulatory-ai/upload
 */
router.post('/upload', upload.array('files', 5), async (req, res) => {
  try {
    // Get uploaded files
    const files = req.files;
    
    if (!files || files.length === 0) {
      return res.status(400).json({ error: 'No files were uploaded' });
    }
    
    // Get module and context from form data
    const module = req.body.module || '';
    let context = {};
    
    try {
      if (req.body.context) {
        context = JSON.parse(req.body.context);
      }
    } catch (error) {
      console.error('Error parsing context:', error);
    }
    
    // In production mode, we don't do lazy initialization - the service should be properly initialized on startup
    if (!openai) {
      console.error('CRITICAL ERROR: OpenAI client is not initialized for file upload');
      
      // Clean up uploaded files
      files.forEach(file => {
        fs.unlink(file.path, (err) => {
          if (err) console.error('Error deleting file:', err);
        });
      });
      
      return res.status(503).json({
        error: 'AI service unavailable',
        message: 'The document analysis service is currently unavailable. Please contact your administrator.'
      });
    }
    
    // Create system prompt for file analysis
    let systemPrompt = `You are Lumen Regulatory Affairs AI, a helpful assistant specializing in medical device and pharmaceutical regulatory affairs knowledge.
    
- Focus on providing clear, concise regulatory guidance based on the uploaded documents.
- Reference specific regulations and standards when appropriate.
- Provide a comprehensive analysis of the uploaded files.
- Extract key regulatory insights and implications.
- Format responses with markdown to improve readability.`;
    
    // Add module-specific context to the system prompt
    if (module) {
      systemPrompt += `\n\nYou are analyzing documents related to the ${module} module.`;
      
      // Add specific guidance based on module
      if (module.toLowerCase().includes('510k')) {
        systemPrompt += `\n\nFor 510(k) submissions:
- Focus on substantial equivalence indicators in these documents.
- Identify potential predicate device information.
- Extract device classification data if present.
- Note any regulatory pathway indicators.`;
      } else if (module.toLowerCase().includes('cer')) {
        systemPrompt += `\n\nFor Clinical Evaluation Reports (CER):
- Identify clinical data useful for MDR 2017/745 compliance.
- Extract information relevant to MEDDEV 2.7/1 rev 4 guidelines.
- Identify clinical evidence strengths and gaps.
- Look for risk-benefit information.`;
      }
    }
    
    // Add any additional context if provided
    if (context && Object.keys(context).length > 0) {
      systemPrompt += `\n\nContext Information:\n${JSON.stringify(context, null, 2)}`;
    }
    
    // Add summary of files
    systemPrompt += '\n\nThe user has uploaded the following files for analysis:';
    files.forEach(file => {
      systemPrompt += `\n- ${file.originalname} (${file.mimetype}, ${(file.size / 1024).toFixed(1)} KB)`;
    });
    
    // Prepare messages array
    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: 'Please analyze these documents and provide regulatory insights.' }
    ];
    
    // Production implementation: We'll use enterprise-grade file processing
    // In a fully featured implementation, this would include PDF text extraction,
    // OCR for scanned documents, and specialized parsing for different file types
    
    // In current GA version, we're sending metadata about the files to the OpenAI API
    // Future versions will include full content extraction
    
    // Verify OpenAI client is available
    if (!openai) {
      console.error('CRITICAL ERROR: OpenAI client is not initialized for file analysis');
      return res.status(503).json({
        error: 'AI service unavailable',
        message: 'The document analysis service is currently unavailable. Please try again later.'
      });
    }
    
    // Send to OpenAI for analysis with proper production reliability measures
    console.log('Sending document analysis request to OpenAI API...');
    const startTime = Date.now();
    let completion;
    
    try {
      // Production-ready API call with appropriate settings
      completion = await openai.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024
        messages: messages,
        temperature: 0.3, // Lower temperature for more accurate regulatory analysis
        max_tokens: 2048,
        top_p: 0.95,
        frequency_penalty: 0.5, // Reduce repetition
        presence_penalty: 0.1, // Slightly encourage mentioning new topics
        user: req.body.userId || 'anonymous' // For OpenAI usage tracking
      });
      
      const requestDuration = Date.now() - startTime;
      console.log(`File analysis API request completed in ${requestDuration}ms`);
    } catch (error) {
      // Production error handling with appropriate status codes
      console.error('OpenAI file analysis request failed:', error.message);
      console.error('Error details:', error);
      
      // Clean up the uploaded files
      files.forEach(file => {
        fs.unlink(file.path, (err) => {
          if (err) console.error('Error deleting file:', err);
        });
      });
      
      if (error.status === 429) {
        return res.status(429).json({ 
          error: 'Rate limit exceeded',
          message: 'The document analysis service is currently experiencing high demand. Please try again in a few moments.'
        });
      } else if (error.status === 401 || error.status === 403) {
        console.error('CRITICAL: Authentication error with OpenAI API during file analysis');
        return res.status(500).json({
          error: 'Authentication error',
          message: 'The document analysis service is currently unavailable due to an authentication issue. Our team has been notified.'
        });
      } else {
        return res.status(500).json({ 
          error: 'Service error',
          message: 'We encountered an issue while analyzing your documents. Our team has been notified of this issue.'
        });
      }
    }
    
    // Extract the response
    const aiResponse = completion.choices[0].message.content;
    console.log('Received document analysis from OpenAI API');
    
    // Return the AI response
    return res.status(200).json({ 
      response: aiResponse,
      files: files.map(file => ({
        name: file.originalname,
        size: file.size,
        mimetype: file.mimetype,
        path: file.path
      }))
    });
    
  } catch (error) {
    console.error('Error processing file upload:', error);
    console.error('Full error stack:', error.stack);
    console.error('Error details:', JSON.stringify(error, null, 2));
    
    return res.status(500).json({
      error: error.message || 'Failed to process your files',
      errorCode: error.code || 'UNKNOWN_ERROR',
      errorType: error.type || 'server_error',
      response: 'I apologize, but I encountered an error processing your uploaded files. The error has been logged for investigation. Please try again or contact support if the issue persists.',
    });
  }
});

// Export the router using CommonJS exports
module.exports = router;
module.exports.router = router; // Export as a named export for ESM compatibility