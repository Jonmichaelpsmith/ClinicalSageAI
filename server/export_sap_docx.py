#!/usr/bin/env python3
"""
Statistical Analysis Plan (SAP) DOCX Export Module
This module provides functionality to create branded, editable Statistical Analysis Plan documents
in DOCX format with consistent styling and professional presentation.
"""

import os
import sys
import json
import datetime
from typing import Dict, Any, Optional
from fastapi import FastAPI, Body, HTTPException, Path
from fastapi.responses import FileResponse
from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH

app = FastAPI(title="SAP DOCX Export Service")

def export_sap_docx(session_id: str, sap_text: Optional[str] = None) -> Dict[str, str]:
    """
    Generate a professionally formatted Statistical Analysis Plan document in DOCX format with branded cover page.
    
    Args:
        session_id: The unique session identifier
        sap_text: Optional SAP text content (if not provided, will attempt to load from session storage)
        
    Returns:
        Dictionary with status and path to the generated DOCX file
    """
    # Determine base directory based on environment
    if os.path.exists("/mnt/data"):
        # Production environment
        base_dir = "/mnt/data/lumen_reports_backend"
    else:
        # Development environment
        base_dir = "data"
    
    # Set up session directory
    archive_dir = os.path.join(base_dir, "sessions", session_id)
    os.makedirs(archive_dir, exist_ok=True)
    
    # Load SAP text from file if not provided
    if not sap_text:
        sap_path = os.path.join(archive_dir, "sap_text.txt")
        if os.path.exists(sap_path):
            with open(sap_path, "r") as f:
                sap_text = f.read()
        else:
            sap_text = "This Statistical Analysis Plan (SAP) has been generated by LumenTrialGuide.AI based on the available study design information. It includes standard statistical methods and approaches for analyzing the primary and secondary endpoints defined in the protocol."
    
    # Create a new DOCX document
    doc = Document()
    
    # Cover Page
    doc.add_heading("LumenTrialGuide.AI", 0)
    
    # Add subtitle with larger spacing and styling
    subtitle = doc.add_paragraph()
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    subtitle_run = subtitle.add_run("Statistical Analysis Plan (SAP)")
    subtitle_run.font.size = Pt(18)
    subtitle_run.font.bold = True
    subtitle_run.font.color.rgb = RGBColor(0, 102, 153)  # Professional blue color
    
    # Study identifier
    session_para = doc.add_paragraph()
    session_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    session_para.add_run(f"Session ID: {session_id}").font.size = Pt(12)
    
    # Add generated date/time
    date_para = doc.add_paragraph()
    date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    date_para.add_run(f"Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}").font.size = Pt(10)
    
    # Add creator info
    generator_para = doc.add_paragraph()
    generator_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    generator_para.add_run("Generated By: LumenTrialGuide.AI Intelligence Suite").font.size = Pt(10)
    
    # Break to new page for content
    doc.add_page_break()
    
    # Document content sections
    doc.add_heading("Statistical Analysis Plan", level=1)
    
    # Add preface paragraph
    preface = doc.add_paragraph()
    preface.add_run("This document contains the Statistical Analysis Plan (SAP) for the clinical study. It provides detailed methods for analyzing the data collected according to the protocol, including statistical approaches, data handling conventions, and analysis populations.").italic = True
    
    # Main content
    doc.add_heading("1. Introduction", level=2)
    doc.add_paragraph(sap_text)
    
    # Add standard SAP sections if not already in provided text
    if "analysis populations" not in sap_text.lower():
        doc.add_heading("2. Analysis Populations", level=2)
        doc.add_paragraph("The following analysis populations will be used for this study:")
        doc.add_paragraph("• Intent-to-Treat (ITT) Population: All randomized subjects").style = 'List Bullet'
        doc.add_paragraph("• Per-Protocol (PP) Population: All subjects who complete the study without major protocol deviations").style = 'List Bullet'
        doc.add_paragraph("• Safety Population: All subjects who receive at least one dose of study treatment").style = 'List Bullet'
    
    if "statistical methods" not in sap_text.lower():
        doc.add_heading("3. Statistical Methods", level=2)
        doc.add_paragraph("The primary endpoint analysis will be conducted using appropriate statistical models accounting for the study design. Secondary endpoints will be analyzed using similar approaches with adjustments for multiplicity where necessary.")
    
    if "missing data" not in sap_text.lower():
        doc.add_heading("4. Handling of Missing Data", level=2)
        doc.add_paragraph("Missing data will be handled using the following approaches depending on the extent and pattern of missingness.")
    
    if "interim" not in sap_text.lower():
        doc.add_heading("5. Interim Analyses", level=2)
        doc.add_paragraph("Interim analyses will be conducted according to the schedule and stopping rules specified in the protocol.")
    
    # Save the file
    docx_path = os.path.join(archive_dir, "sap_summary_branded.docx")
    doc.save(docx_path)
    
    return {
        "status": "ok",
        "path": f"/static/{session_id}/sap_summary_branded.docx"
    }

@app.post("/api/export/sap-docx")
def create_sap_docx(data: Dict[str, Any] = Body(...)):
    """
    Generate a professionally formatted SAP document in DOCX format
    
    Args:
        data: Dictionary containing session_id and optional sap_text
        
    Returns:
        Dictionary with status and path to the generated DOCX file
    """
    session_id = data.get("session_id")
    sap_text = data.get("sap_text")
    
    if not session_id:
        raise HTTPException(status_code=400, detail="Session ID is required")
    
    result = export_sap_docx(session_id, sap_text)
    return result

@app.get("/api/export/sap-docx/{session_id}")
def get_sap_docx(session_id: str = Path(..., description="The session ID")):
    """
    Get the SAP DOCX file for a specific session
    
    Args:
        session_id: The unique session identifier
        
    Returns:
        The DOCX file as a downloadable attachment
    """
    # Determine base directory based on environment
    if os.path.exists("/mnt/data"):
        # Production environment
        base_dir = "/mnt/data/lumen_reports_backend"
    else:
        # Development environment
        base_dir = "data"
    
    docx_path = os.path.join(base_dir, "sessions", session_id, "sap_summary_branded.docx")
    
    # Generate file if it doesn't exist
    if not os.path.exists(docx_path):
        export_sap_docx(session_id)
    
    # Check if file exists after generation attempt
    if not os.path.exists(docx_path):
        raise HTTPException(status_code=404, detail="SAP document not found")
    
    return FileResponse(
        docx_path,
        filename=f"SAP_{session_id}_{datetime.datetime.now().strftime('%Y%m%d')}.docx",
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8003)